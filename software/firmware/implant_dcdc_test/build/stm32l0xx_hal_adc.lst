ARM GAS  /tmp/cchPcaY2.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32l0xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_uidiv
  18              		.section	.text.ADC_DelayMicroSecond,"ax",%progbits
  19              		.align	2
  20              		.code	16
  21              		.thumb_func
  23              	ADC_DelayMicroSecond:
  24              	.LFB64:
  25              		.file 1 "Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c"
   1:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @file    stm32l0xx_hal_adc.c
   4:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @version V1.8.1
   6:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @date    14-April-2017
   7:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          peripheral:
  10:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  12:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Operation functions
  13:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  14:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  15:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Control functions
  16:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  17:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  18:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + State functions
  19:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ ADC state machine management
  20:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  21:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  22:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          "stm32l0xx_hal_adc_ex.c".
  23:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
  24:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   @verbatim
  25:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  27:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  28:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   [..]
  29:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  30:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  31:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
  32:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       analog watchdog or overrun events.
  33:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/cchPcaY2.s 			page 2


  34:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  35:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  36:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  37:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  38:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  39:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  40:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  41:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  42:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  43:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  44:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  45:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  46:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC calibration
  47:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  48:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  49:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  50:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  51:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  52:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  53:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  54:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  55:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  56:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      ##### How to use this driver #####
  57:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  58:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
  59:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  60:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  61:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ============================================================
  62:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
  63:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  64:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Enable the ADC interface
  65:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  66:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              Caution: On STM32L0, ADC clock frequency max is 16MHz (refer
  67:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       to device datasheet).
  68:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       Therefore, ADC clock prescaler must be configured in 
  69:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       function of ADC clock source frequency to remain below
  70:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       this maximum frequency.
  71:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  72:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  73:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  74:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  75:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  76:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  77:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  78:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    16MHz.
  79:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSIState" must be set either:
  80:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    - to "...HSIState = RCC_HSI_ON" to maintain the HSI16 oscillator
  81:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  82:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  83:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) Example:
  84:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  85:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    other device clock parameters configuration:
  86:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                 (mandatory)
  87:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  88:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                HSI enable                                         (optional: if asynchronous clock 
  89:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  90:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
ARM GAS  /tmp/cchPcaY2.s 			page 3


  91:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI16CalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  92:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_ON;
  93:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
  94:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  95:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  96:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  97:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  98:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  99:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC pins configuration
 100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               ADCx_IRQHandler().
 111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_DMA_Init().
 115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ================================================================
 123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_Init().
 128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         monitored, thresholds, ...)
 135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) When device is in mode low-power (low-power run, low-power sleep or stop mode), 
 139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         function "HAL_ADCEx_EnableVREFINT()" must be called before function HAL_ADC_Init().
 140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         In case of internal temperature sensor to be measured:
 141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly
 142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ====================================
 145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
ARM GAS  /tmp/cchPcaY2.s 			page 4


 148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         conversion accuracy
 149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         transfer by DMA.
 153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion by polling:
 155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 destination variable address.
 183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ============================================================
 196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Disable the ADC interface
 199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC clock disable
 203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) Example:
ARM GAS  /tmp/cchPcaY2.s 			page 5


 205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    other device clock parameters configuration:
 207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC pins configuration
 212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Deinitialize the DMA
 221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_DMA_Init().
 222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     @endverbatim
 228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************
 229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @attention
 230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      without specific prior written permission.
 243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************  
 256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #include "stm32l0xx_hal.h"
 260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @addtogroup STM32L0xx_HAL_Driver
ARM GAS  /tmp/cchPcaY2.s 			page 6


 262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC ADC
 266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief ADC HAL module driver
 267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Delay for ADC stabilization time.                                          */
 280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Maximum delay is 1us (refer to device datasheet, parameter tSTART). */
 281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Unit: us */
 282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #define ADC_STAB_DELAY_US       ((uint32_t) 1U)
 283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Delay for temperature sensor stabilization time. */
 285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Maximum delay is 10us (refer to device datasheet, parameter tSTART). */
 286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Unit: us */
 287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #define ADC_TEMPSENSOR_DELAY_US ((uint32_t) 10U) 
 288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DelayMicroSecond(uint32_t microSecond);
 305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim    
ARM GAS  /tmp/cchPcaY2.s 			page 7


 319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) De-initialize the ADC.
 325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
 326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to  
 331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         depending on possible clock sources: APB clock of HSI clock.
 334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented
 335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   When device is in mode low-power (low-power run, low-power sleep or stop mode), 
 350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         function "HAL_ADCEx_EnableVREFINT()" must be called before function HAL_ADC_Init() 
 351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (in case of previous ADC operations: function HAL_ADC_DeInit() must be called first).
 352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In case of internal temperature sensor to be measured:
 353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
 354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  
 360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check ADC handle */
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
ARM GAS  /tmp/cchPcaY2.s 			page 8


 376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
 388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Initialize ADC error code */
 396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Init the low level hardware */
 402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* correctly completed.                                                     */
 407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */
 408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* on the fly).                                                             */
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
 414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
 417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
 422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_REG_BUSY,
 424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL);
 425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                            */
 427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated only when ADC is disabled:              */
 428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC clock mode                                                      */
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC clock prescaler                                                 */
 430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC Resolution                                                      */
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
ARM GAS  /tmp/cchPcaY2.s 			page 9


 433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Some parameters of this register are not reset, since they are set   */
 434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by other functions and must be kept in case of usage of this         */
 435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* without needing to reconfigure all other ADC groups/channels         */
 437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* parameters):                                                         */
 438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*     (set into HAL_ADC_ConfigChannel() )                              */
 440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of ADC clock: clock source PCLK or asynchronous with 
 442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     selectable prescaler */
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLOCK_PRESCALER(hadc);
 444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of ADC:                                                */
 446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Resolution                                                        */
 447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the Low Frequency mode */
 452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable voltage regulator (if disabled at this step) */
 456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADVREGEN bit */
 459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR |= ADC_CR_ADVREGEN;
 460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC:                                                    */
 463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Resolution                                                            */
 464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Data alignment                                                        */
 465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Scan direction                                                        */
 466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - External trigger to start conversion                                  */
 467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - External trigger polarity                                             */
 468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Continuous conversion mode                                            */
 469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - DMA continuous request                                                */
 470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Overrun                                                               */
 471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - AutoDelay feature                                                     */
 472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Discontinuous mode                                                    */
 473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_SCANDIR |
 475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_EXTSEL  |
 476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_EXTEN   |
 477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_CONT    |
 478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_DMACFG  |
 479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_OVRMOD  |
 480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_AUTDLY  |
 481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  |
 482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_DISCEN   );
 483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
ARM GAS  /tmp/cchPcaY2.s 			page 10


 490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
 493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* start.                                                                 */
 494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
 495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       software start.                                                  */
 497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              hadc->Init.ExternalTrigConvEdge;
 501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable discontinuous mode only if continuous mode is disabled */
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.DiscontinuousConvMode == ENABLE)
 505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.ContinuousConvMode == DISABLE)
 507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable the selected ADC group regular discontinuous mode */
 509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
 512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* ADC regular group discontinuous was intended to be enabled,        */
 514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* but ADC regular group modes continuous and sequencer discontinuous */
 515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* cannot be enabled simultaneously.                                  */
 516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
 518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
 526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of Oversampler:                                          */
 532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Oversampling Ratio                                                  */
 533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Right bit shift                                                     */
 534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Triggered mode                                                      */
 535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_OVSS |
 538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_TOVS );
 539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.TriggeredMode );
 543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable OverSampling mode */
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
ARM GAS  /tmp/cchPcaY2.s 			page 11


 547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable OverSampling mode if needed */
 552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }    
 555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear the old sampling time */
 557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the new sample time */
 560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear ADC error code */
 563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the ADC state */
 566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL,
 568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_READY);
 569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         common group is still running.
 584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check ADC handle */
 592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
ARM GAS  /tmp/cchPcaY2.s 			page 12


 604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {   
 609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Change ADC state */
 616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* correctly completed.                                                     */
 623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register IER */
 628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
 630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register ISR */
 633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_FLAG_EOC | ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CR */
 638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable voltage regulator */
 639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: Regulator disable useful for power saving */
 640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset ADVREGEN bit */
 641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable 
 644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* No action */
 645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CFGR1 */
 647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_AUTDLY | \
 649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
 650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
 651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
 652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CFGR2 */
 654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
 656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register SMPR */
 659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /tmp/cchPcaY2.s 			page 13


 661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register TR */
 662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CALFACT */
 665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register DR */
 672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CALFACT */
 675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*                                                                        */
 683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* DeInit the low level hardware */
 687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC error code to none */
 690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
 693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
 697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
 705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
 707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
 712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */ 
 716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
ARM GAS  /tmp/cchPcaY2.s 			page 14


 718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
 720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
 722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
 727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */ 
 731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
 738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    ADC IO operation functions 
 739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
 740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim   
 741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       ##### IO operation functions #####
 743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group.
 746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group.
 747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Poll for conversion event.
 749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Handle ADC interrupt request
 753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
 756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
 761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
 762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
 773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
ARM GAS  /tmp/cchPcaY2.s 			page 15


 775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
 779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
 780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
 781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
 787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
 790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
 791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
 792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
 795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
 797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
 800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
 805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
 806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
 807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
 810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
 811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
 812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
 813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
 830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/cchPcaY2.s 			page 16


 832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 838:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 841:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
 842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 844:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 847:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
 848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 853:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
 854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 855:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 856:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 857:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 858:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 860:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
 861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 866:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 867:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 868:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 869:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
 871:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
 872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
 873:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
 874:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 879:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
 880:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
 881:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 882:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 883:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 885:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 887:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0;
 888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC   = 0x00;
ARM GAS  /tmp/cchPcaY2.s 			page 17


 889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 893:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
 894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 895:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 897:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 898:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
 899:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
 900:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 901:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
 902:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* each conversion:                                                       */
 903:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 904:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
 905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
 906:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
 907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 909:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
 910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 912:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
 913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 914:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
 916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
 918:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 920:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 921:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Get tick count */
 924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
 927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 931:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 934:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Process unlocked */
 938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
 941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 943:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Update ADC state machine */
ARM GAS  /tmp/cchPcaY2.s 			page 18


 946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 949:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
 954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
 957:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
 958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 959:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
 961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
 963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
 964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC state */
 967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 968:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 969:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
 970:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 971:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       else
 972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 973:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Change ADC state to error state */
 974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 976:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 979:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 980:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 982:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
 983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
 984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
 985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear regular group conversion flag */
 988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 996:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Poll for ADC event.
 997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 998:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  EventType: the ADC event type.
 999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          This parameter can be one of the following values:
1000:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
1001:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
1002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
ARM GAS  /tmp/cchPcaY2.s 			page 19


1003:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set  
1005:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten 
1006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1007:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR); 
1009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1013:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U; 
1014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1015:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1017:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1019:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Get tick count */
1020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
1021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check selected event flag */
1023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1025:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1027:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) ||((HAL_GetTick() - tickstart ) > Timeout))
1029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1030:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Process unlocked */
1034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
1037:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1038:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   switch(EventType)
1042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
1046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
1051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1052:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Overrun event */
1053:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1055:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* considered as an error.                                                */
1056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1057:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun ")                                                             */
1058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /tmp/cchPcaY2.s 			page 20


1060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1065:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1067:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
1070:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1077:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1078:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1079:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence), 
1080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         OVR overrun.
1081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1082:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure 
1084:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() doesn't enable the End Of Sampling 
1086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         mode), the user must:
1088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP) 
1090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
ARM GAS  /tmp/cchPcaY2.s 			page 21


1117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
1119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
1141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
1145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
1146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         default:
1148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
1150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
ARM GAS  /tmp/cchPcaY2.s 			page 22


1174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
1217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
1218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete. 
1219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  pData: Destination Buffer address.
1222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Length: Length of data to be transferred from ADC peripheral to memory (in bytes)
1223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/cchPcaY2.s 			page 23


1231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
1250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA error callback */
1271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
ARM GAS  /tmp/cchPcaY2.s 			page 24


1288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Start the DMA channel */
1289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC peripheral.
1311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
1326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
1333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
1340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /tmp/cchPcaY2.s 			page 25


1345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_Disable(hadc);
1358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            to flag EOC.
1387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To clear this flag, either use function:
1391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
1393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
ARM GAS  /tmp/cchPcaY2.s 			page 26


1402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return ADC converted value */ 
1406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->Instance->DR;
1407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
1411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
1424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
1436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
1444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
1450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC state */
1451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
1455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         else
1456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
1457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Change ADC state to error state */
1458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
ARM GAS  /tmp/cchPcaY2.s 			page 27


1459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
1460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
1461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
1463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Conversion complete callback */
1467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: Management of low power auto-wait enabled: flags must be cleared */
1478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       by user when fetching ADC conversion data.                       */
1479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       This case is managed in IRQ handler, but this low-power mode     */
1480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       should not be used with programming model IT or DMA.             */
1481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       Refer to comment of parameter "LowPowerAutoWait".                */
1482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoWait != ENABLE)
1483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
1485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check analog watchdog 1 flag ========== */
1489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
1492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Level out of window 1 callback */
1495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
1496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
1500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun ")                                                             */
1510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* error.                                                                 */
1512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
1513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
1514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to overrun */
ARM GAS  /tmp/cchPcaY2.s 			page 28


1516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Error callback */ 
1522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear the Overrun flag */
1526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
1533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */
1544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
1548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
1563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
ARM GAS  /tmp/cchPcaY2.s 			page 29


1573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
1578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
1579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
1604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
1605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim   
1606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================  
1609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Configure channels on regular group
1611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Configure the analog watchdog
1612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
1614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
1619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         VrefInt/Vlcd(STM32L0x3xx only)/TempSensor.
1621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         setting).
1624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         TS_vlcd (STM32L0x3xx only), TS_temp (values rough order: 5us to 17us).
1626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
ARM GAS  /tmp/cchPcaY2.s 			page 30


1630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
1631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
1632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         without resetting the ADC.
1633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
1634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
1635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
1637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Channel number                                                        */
1653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
1654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
1655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
1657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
1659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
1661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (sConfig->Rank != ADC_RANK_NONE)
1664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable selected channels */
1666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
1667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Management of internal measurement channels: Vlcd (STM32L0x3xx only)/VrefInt/TempSensor */
1669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* internal measurement paths enable: If internal channel selected, enable  */
1670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* dedicated internal buffers and path.                                     */
1671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Temperature sensor channel is selected, then enable the internal      */
1673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* buffers and path  */
1674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
1675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_TSEN;   
1677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
1680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If VRefInt channel is selected, then enable the internal buffers and path   */
1683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
1684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VREFEN;   
1686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
ARM GAS  /tmp/cchPcaY2.s 			page 31


1687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx
1689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Vlcd channel is selected, then enable the internal buffers and path   */
1690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANN
1691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VLCDEN;   
1693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif
1695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Regular sequence configuration */
1699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset the channel selection register from the selected channel */
1700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
1701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* internal measurement paths disable: If internal channel selected,    */
1704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* disable dedicated internal buffers and path.                         */
1705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
1706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_TSEN;   
1708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If VRefInt channel is selected, then enable the internal buffers and path   */
1711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
1712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VREFEN;   
1714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx
1717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Vlcd channel is selected, then enable the internal buffers and path   */
1718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANN
1719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VLCDEN;   
1721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif
1723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
1734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive  
1736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting 
1738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         the ADC.
1739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
1742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         is on going.
ARM GAS  /tmp/cchPcaY2.s 			page 32


1744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
1759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
1760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
1767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
1772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
1773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
1774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
1782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
1783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
1786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
1787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
1789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
1794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                        */
1798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Set the analog watchdog mode                                          */
1799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog              */
1800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR1_AWD1SGL=0)                             */
ARM GAS  /tmp/cchPcaY2.s 			page 33


1801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
1802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDEN  |
1803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDCH);
1804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
1806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
1807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds  */
1810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0     */
1811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
1812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
1813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear High & Low high thresholds */
1815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= (uint32_t) ~ (ADC_TR_HT | ADC_TR_LT);
1816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the high threshold */
1818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted);
1819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the low threshold */
1820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR |= tmpAWDLowThresholdShifted;
1821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
1823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
1824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
1827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1838:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1841:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1844:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    ADC Peripheral State functions
1846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
1847:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim
1848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
1850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
1852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1853:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     peripheral.
1854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Check the ADC state
1855:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Check the ADC error code
1856:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1857:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
ARM GAS  /tmp/cchPcaY2.s 			page 34


1858:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1860:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Return the ADC handle state.
1863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
1864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         compared with states bits.
1865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For example:                                                         
1866:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
1867:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
1868:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1869:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
1870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1871:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1873:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1874:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return ADC handle state */
1877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->State;
1878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1879:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1880:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1881:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Return the ADC error code.
1882:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1883:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
1884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1885:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1887:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->ErrorCode;
1891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1893:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1895:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1897:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1898:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1899:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1900:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1901:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1902:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1903:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1904:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1906:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1909:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
1910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         performed automatically by hardware.
1911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
1912:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
1913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
1914:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
ARM GAS  /tmp/cchPcaY2.s 			page 35


1915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1918:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1920:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1921:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
1929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
1930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1931:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1934:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
1938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1943:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Delay for ADC stabilization time. */
1944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
1945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
1947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
1948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1949:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
1951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
1955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1957:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1959:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
1961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
1965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
1966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1968:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1969:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1970:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
1971:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
ARM GAS  /tmp/cchPcaY2.s 			page 36


1972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         stopped.
1973:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1976:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
1977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1979:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1980:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
1981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
1982:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       disabled.                                                          */
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
1984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
1986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
1987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable the ADC peripheral */
1989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
1990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1996:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1998:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
2000:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2001:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      
2002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2003:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2005:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
2007:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2013:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2015:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2017:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2019:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2025:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2027:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
ARM GAS  /tmp/cchPcaY2.s 			page 37


2029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         stopped to disable the ADC.
2030:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
2031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
2032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
2034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2037:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
2038:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* this function if not needed.                                             */
2042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
2043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
2048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
2049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Stop conversions on regular group */
2051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
2052:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2053:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2055:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2057:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
2059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
2061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2065:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2067:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2070:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
2074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2077:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2078:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2079:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2082:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2084:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
ARM GAS  /tmp/cchPcaY2.s 			page 38


2086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
2091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
2093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
2094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
2098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
2099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
2102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
2107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
2113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC state */
2114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
2115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
2118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         else
2119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
2120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Change ADC state to error state */
2121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
2123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
2126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Conversion complete callback */
2130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
2131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
2133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Call DMA error callback */
2135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
ARM GAS  /tmp/cchPcaY2.s 			page 39


2143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
2145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Half conversion callback */
2150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
2151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA error callback.
2155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)
2159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
2164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
2165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
2168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Error callback */
2170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
2171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Delay micro seconds 
2175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  microSecond : delay
2176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DelayMicroSecond(uint32_t microSecond)
2179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
  26              		.loc 1 2179 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 10B5     		push	{r4, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 041C     		mov	r4, r0
2180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Compute number of CPU cycles to wait for */
2181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
  38              		.loc 1 2181 0
  39 0006 084B     		ldr	r3, .L4
  40 0008 1868     		ldr	r0, [r3]
  41              	.LVL1:
  42 000a 0849     		ldr	r1, .L4+4
  43 000c FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  /tmp/cchPcaY2.s 			page 40


  44              	.LVL2:
  45 0010 4443     		mul	r4, r0
  46              	.LVL3:
  47 0012 0194     		str	r4, [sp, #4]
2182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(waitLoopIndex != 0U)
  48              		.loc 1 2183 0
  49 0014 02E0     		b	.L2
  50              	.L3:
2184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     waitLoopIndex--;
  51              		.loc 1 2185 0
  52 0016 019B     		ldr	r3, [sp, #4]
  53 0018 013B     		sub	r3, r3, #1
  54 001a 0193     		str	r3, [sp, #4]
  55              	.L2:
2183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(waitLoopIndex != 0U)
  56              		.loc 1 2183 0 discriminator 1
  57 001c 019B     		ldr	r3, [sp, #4]
  58 001e 002B     		cmp	r3, #0
  59 0020 F9D1     		bne	.L3
2186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   } 
2187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
  60              		.loc 1 2187 0
  61 0022 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 0024 10BD     		pop	{r4, pc}
  64              	.L5:
  65 0026 C046     		.align	2
  66              	.L4:
  67 0028 00000000 		.word	SystemCoreClock
  68 002c 40420F00 		.word	1000000
  69              		.cfi_endproc
  70              	.LFE64:
  72              		.section	.text.ADC_ConversionStop,"ax",%progbits
  73              		.align	2
  74              		.code	16
  75              		.thumb_func
  77              	ADC_ConversionStop:
  78              	.LFB60:
2034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
  79              		.loc 1 2034 0
  80              		.cfi_startproc
  81              	.LVL4:
  82 0000 70B5     		push	{r4, r5, r6, lr}
  83              	.LCFI2:
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 4, -16
  86              		.cfi_offset 5, -12
  87              		.cfi_offset 6, -8
  88              		.cfi_offset 14, -4
  89 0002 041C     		mov	r4, r0
  90              	.LVL5:
2042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
  91              		.loc 1 2042 0
  92 0004 0368     		ldr	r3, [r0]
  93 0006 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/cchPcaY2.s 			page 41


  94 0008 5107     		lsl	r1, r2, #29
  95 000a 23D5     		bpl	.L11
2047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
  96              		.loc 1 2047 0
  97 000c 9A68     		ldr	r2, [r3, #8]
  98 000e 5107     		lsl	r1, r2, #29
  99 0010 06D5     		bpl	.L8
2048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 100              		.loc 1 2048 0 discriminator 1
 101 0012 9A68     		ldr	r2, [r3, #8]
2047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 102              		.loc 1 2047 0 discriminator 1
 103 0014 9107     		lsl	r1, r2, #30
 104 0016 03D4     		bmi	.L8
2051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
 105              		.loc 1 2051 0
 106 0018 9968     		ldr	r1, [r3, #8]
 107 001a 1022     		mov	r2, #16
 108 001c 0A43     		orr	r2, r1
 109 001e 9A60     		str	r2, [r3, #8]
 110              	.L8:
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 111              		.loc 1 2056 0
 112 0020 FFF7FEFF 		bl	HAL_GetTick
 113              	.LVL6:
 114 0024 061C     		mov	r6, r0
 115              	.LVL7:
2058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 116              		.loc 1 2058 0
 117 0026 0425     		mov	r5, #4
 118 0028 0EE0     		b	.L9
 119              	.LVL8:
 120              	.L10:
2060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 121              		.loc 1 2060 0
 122 002a FFF7FEFF 		bl	HAL_GetTick
 123              	.LVL9:
 124 002e 831B     		sub	r3, r0, r6
 125 0030 0A2B     		cmp	r3, #10
 126 0032 09D9     		bls	.L9
2063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 127              		.loc 1 2063 0
 128 0034 A26D     		ldr	r2, [r4, #88]
 129 0036 1023     		mov	r3, #16
 130 0038 1343     		orr	r3, r2
 131 003a A365     		str	r3, [r4, #88]
2066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 132              		.loc 1 2066 0
 133 003c E26D     		ldr	r2, [r4, #92]
 134 003e 0123     		mov	r3, #1
 135 0040 1343     		orr	r3, r2
 136 0042 E365     		str	r3, [r4, #92]
2068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
 137              		.loc 1 2068 0
 138 0044 0120     		mov	r0, #1
 139 0046 06E0     		b	.L7
 140              	.L9:
ARM GAS  /tmp/cchPcaY2.s 			page 42


2058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 141              		.loc 1 2058 0 discriminator 1
 142 0048 2368     		ldr	r3, [r4]
 143 004a 9B68     		ldr	r3, [r3, #8]
 144 004c 1D42     		tst	r5, r3
 145 004e ECD1     		bne	.L10
2075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 146              		.loc 1 2075 0
 147 0050 0020     		mov	r0, #0
 148 0052 00E0     		b	.L7
 149              	.LVL10:
 150              	.L11:
 151 0054 0020     		mov	r0, #0
 152              	.LVL11:
 153              	.L7:
2076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 154              		.loc 1 2076 0
 155              		@ sp needed
 156              	.LVL12:
 157 0056 70BD     		pop	{r4, r5, r6, pc}
 158              		.cfi_endproc
 159              	.LFE60:
 161              		.section	.text.ADC_Disable,"ax",%progbits
 162              		.align	2
 163              		.code	16
 164              		.thumb_func
 166              	ADC_Disable:
 167              	.LFB59:
1977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 168              		.loc 1 1977 0
 169              		.cfi_startproc
 170              	.LVL13:
 171 0000 70B5     		push	{r4, r5, r6, lr}
 172              	.LCFI3:
 173              		.cfi_def_cfa_offset 16
 174              		.cfi_offset 4, -16
 175              		.cfi_offset 5, -12
 176              		.cfi_offset 6, -8
 177              		.cfi_offset 14, -4
 178 0002 041C     		mov	r4, r0
 179              	.LVL14:
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 180              		.loc 1 1983 0
 181 0004 0368     		ldr	r3, [r0]
 182 0006 9A68     		ldr	r2, [r3, #8]
 183 0008 0321     		mov	r1, #3
 184 000a 0A40     		and	r2, r1
 185 000c 012A     		cmp	r2, #1
 186 000e 04D1     		bne	.L19
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 187              		.loc 1 1983 0 is_stmt 0 discriminator 1
 188 0010 1A68     		ldr	r2, [r3]
 189 0012 D107     		lsl	r1, r2, #31
 190 0014 03D4     		bmi	.L20
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 191              		.loc 1 1983 0
 192 0016 0022     		mov	r2, #0
ARM GAS  /tmp/cchPcaY2.s 			page 43


 193 0018 02E0     		b	.L14
 194              	.L19:
 195 001a 0022     		mov	r2, #0
 196 001c 00E0     		b	.L14
 197              	.L20:
 198 001e 0122     		mov	r2, #1
 199              	.L14:
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 200              		.loc 1 1983 0 discriminator 4
 201 0020 002A     		cmp	r2, #0
 202 0022 2FD0     		beq	.L21
1986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 203              		.loc 1 1986 0 is_stmt 1
 204 0024 9A68     		ldr	r2, [r3, #8]
 205 0026 0521     		mov	r1, #5
 206 0028 0A40     		and	r2, r1
 207 002a 012A     		cmp	r2, #1
 208 002c 0BD1     		bne	.L16
1989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
 209              		.loc 1 1989 0
 210 002e 9968     		ldr	r1, [r3, #8]
 211 0030 0222     		mov	r2, #2
 212 0032 0A43     		orr	r2, r1
 213 0034 9A60     		str	r2, [r3, #8]
 214 0036 2368     		ldr	r3, [r4]
 215 0038 0322     		mov	r2, #3
 216 003a 1A60     		str	r2, [r3]
2004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 217              		.loc 1 2004 0
 218 003c FFF7FEFF 		bl	HAL_GetTick
 219              	.LVL15:
 220 0040 061C     		mov	r6, r0
 221              	.LVL16:
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 222              		.loc 1 2006 0
 223 0042 0125     		mov	r5, #1
 224 0044 18E0     		b	.L17
 225              	.LVL17:
 226              	.L16:
1994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 227              		.loc 1 1994 0
 228 0046 A26D     		ldr	r2, [r4, #88]
 229 0048 1023     		mov	r3, #16
 230 004a 1343     		orr	r3, r2
 231 004c A365     		str	r3, [r4, #88]
1997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 232              		.loc 1 1997 0
 233 004e E26D     		ldr	r2, [r4, #92]
 234 0050 0123     		mov	r3, #1
 235 0052 1343     		orr	r3, r2
 236 0054 E365     		str	r3, [r4, #92]
1999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
 237              		.loc 1 1999 0
 238 0056 0120     		mov	r0, #1
 239              	.LVL18:
 240 0058 15E0     		b	.L15
 241              	.LVL19:
ARM GAS  /tmp/cchPcaY2.s 			page 44


 242              	.L18:
2008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 243              		.loc 1 2008 0
 244 005a FFF7FEFF 		bl	HAL_GetTick
 245              	.LVL20:
 246 005e 831B     		sub	r3, r0, r6
 247 0060 0A2B     		cmp	r3, #10
 248 0062 09D9     		bls	.L17
2011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 249              		.loc 1 2011 0
 250 0064 A26D     		ldr	r2, [r4, #88]
 251 0066 1023     		mov	r3, #16
 252 0068 1343     		orr	r3, r2
 253 006a A365     		str	r3, [r4, #88]
2014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 254              		.loc 1 2014 0
 255 006c E26D     		ldr	r2, [r4, #92]
 256 006e 0123     		mov	r3, #1
 257 0070 1343     		orr	r3, r2
 258 0072 E365     		str	r3, [r4, #92]
2016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
 259              		.loc 1 2016 0
 260 0074 0120     		mov	r0, #1
 261 0076 06E0     		b	.L15
 262              	.L17:
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 263              		.loc 1 2006 0 discriminator 1
 264 0078 2368     		ldr	r3, [r4]
 265 007a 9B68     		ldr	r3, [r3, #8]
 266 007c 1D42     		tst	r5, r3
 267 007e ECD1     		bne	.L18
2022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 268              		.loc 1 2022 0
 269 0080 0020     		mov	r0, #0
 270 0082 00E0     		b	.L15
 271              	.LVL21:
 272              	.L21:
 273 0084 0020     		mov	r0, #0
 274              	.LVL22:
 275              	.L15:
2023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 276              		.loc 1 2023 0
 277              		@ sp needed
 278              	.LVL23:
 279 0086 70BD     		pop	{r4, r5, r6, pc}
 280              		.cfi_endproc
 281              	.LFE59:
 283              		.section	.text.ADC_Enable,"ax",%progbits
 284              		.align	2
 285              		.code	16
 286              		.thumb_func
 288              	ADC_Enable:
 289              	.LFB58:
1919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 290              		.loc 1 1919 0
 291              		.cfi_startproc
 292              	.LVL24:
ARM GAS  /tmp/cchPcaY2.s 			page 45


 293 0000 70B5     		push	{r4, r5, r6, lr}
 294              	.LCFI4:
 295              		.cfi_def_cfa_offset 16
 296              		.cfi_offset 4, -16
 297              		.cfi_offset 5, -12
 298              		.cfi_offset 6, -8
 299              		.cfi_offset 14, -4
 300 0002 041C     		mov	r4, r0
 301              	.LVL25:
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 302              		.loc 1 1926 0
 303 0004 0368     		ldr	r3, [r0]
 304 0006 9A68     		ldr	r2, [r3, #8]
 305 0008 0321     		mov	r1, #3
 306 000a 0A40     		and	r2, r1
 307 000c 012A     		cmp	r2, #1
 308 000e 04D1     		bne	.L29
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 309              		.loc 1 1926 0 is_stmt 0 discriminator 1
 310 0010 1A68     		ldr	r2, [r3]
 311 0012 D107     		lsl	r1, r2, #31
 312 0014 03D4     		bmi	.L30
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 313              		.loc 1 1926 0
 314 0016 0022     		mov	r2, #0
 315 0018 02E0     		b	.L24
 316              	.L29:
 317 001a 0022     		mov	r2, #0
 318 001c 00E0     		b	.L24
 319              	.L30:
 320 001e 0122     		mov	r2, #1
 321              	.L24:
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 322              		.loc 1 1926 0 discriminator 4
 323 0020 002A     		cmp	r2, #0
 324 0022 2ED1     		bne	.L31
1929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 325              		.loc 1 1929 0 is_stmt 1
 326 0024 9968     		ldr	r1, [r3, #8]
 327 0026 184A     		ldr	r2, .L33
 328 0028 1142     		tst	r1, r2
 329 002a 09D0     		beq	.L26
1932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 330              		.loc 1 1932 0
 331 002c A26D     		ldr	r2, [r4, #88]
 332 002e 1023     		mov	r3, #16
 333 0030 1343     		orr	r3, r2
 334 0032 A365     		str	r3, [r4, #88]
1935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 335              		.loc 1 1935 0
 336 0034 E26D     		ldr	r2, [r4, #92]
 337 0036 0123     		mov	r3, #1
 338 0038 1343     		orr	r3, r2
 339 003a E365     		str	r3, [r4, #92]
1937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
 340              		.loc 1 1937 0
 341 003c 0120     		mov	r0, #1
ARM GAS  /tmp/cchPcaY2.s 			page 46


 342              	.LVL26:
 343 003e 21E0     		b	.L25
 344              	.LVL27:
 345              	.L26:
1941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 346              		.loc 1 1941 0
 347 0040 9968     		ldr	r1, [r3, #8]
 348 0042 0122     		mov	r2, #1
 349 0044 0A43     		orr	r2, r1
 350 0046 9A60     		str	r2, [r3, #8]
1944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 351              		.loc 1 1944 0
 352 0048 0120     		mov	r0, #1
 353              	.LVL28:
 354 004a FFF7FEFF 		bl	ADC_DelayMicroSecond
 355              	.LVL29:
1947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 356              		.loc 1 1947 0
 357 004e FFF7FEFF 		bl	HAL_GetTick
 358              	.LVL30:
 359 0052 061C     		mov	r6, r0
 360              	.LVL31:
1950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 361              		.loc 1 1950 0
 362 0054 0125     		mov	r5, #1
 363 0056 0EE0     		b	.L27
 364              	.LVL32:
 365              	.L28:
1952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 366              		.loc 1 1952 0
 367 0058 FFF7FEFF 		bl	HAL_GetTick
 368              	.LVL33:
 369 005c 831B     		sub	r3, r0, r6
 370 005e 0A2B     		cmp	r3, #10
 371 0060 09D9     		bls	.L27
1955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 372              		.loc 1 1955 0
 373 0062 A26D     		ldr	r2, [r4, #88]
 374 0064 1023     		mov	r3, #16
 375 0066 1343     		orr	r3, r2
 376 0068 A365     		str	r3, [r4, #88]
1958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 377              		.loc 1 1958 0
 378 006a E26D     		ldr	r2, [r4, #92]
 379 006c 0123     		mov	r3, #1
 380 006e 1343     		orr	r3, r2
 381 0070 E365     		str	r3, [r4, #92]
1960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
 382              		.loc 1 1960 0
 383 0072 0120     		mov	r0, #1
 384 0074 06E0     		b	.L25
 385              	.L27:
1950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 386              		.loc 1 1950 0 discriminator 1
 387 0076 2368     		ldr	r3, [r4]
 388 0078 1B68     		ldr	r3, [r3]
 389 007a 1D42     		tst	r5, r3
ARM GAS  /tmp/cchPcaY2.s 			page 47


 390 007c ECD0     		beq	.L28
1966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 391              		.loc 1 1966 0
 392 007e 0020     		mov	r0, #0
 393 0080 00E0     		b	.L25
 394              	.LVL34:
 395              	.L31:
 396 0082 0020     		mov	r0, #0
 397              	.LVL35:
 398              	.L25:
1967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 399              		.loc 1 1967 0
 400              		@ sp needed
 401              	.LVL36:
 402 0084 70BD     		pop	{r4, r5, r6, pc}
 403              	.L34:
 404 0086 C046     		.align	2
 405              	.L33:
 406 0088 17000080 		.word	-2147483625
 407              		.cfi_endproc
 408              	.LFE58:
 410              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 411              		.align	2
 412              		.weak	HAL_ADC_MspInit
 413              		.code	16
 414              		.thumb_func
 416              	HAL_ADC_MspInit:
 417              	.LFB38:
 709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 418              		.loc 1 709 0
 419              		.cfi_startproc
 420              	.LVL37:
 716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 421              		.loc 1 716 0
 422              		@ sp needed
 423 0000 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE38:
 427 0002 C046     		.section	.text.HAL_ADC_Init,"ax",%progbits
 428              		.align	2
 429              		.global	HAL_ADC_Init
 430              		.code	16
 431              		.thumb_func
 433              	HAL_ADC_Init:
 434              	.LFB36:
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 435              		.loc 1 358 0
 436              		.cfi_startproc
 437              	.LVL38:
 438 0000 38B5     		push	{r3, r4, r5, lr}
 439              	.LCFI5:
 440              		.cfi_def_cfa_offset 16
 441              		.cfi_offset 3, -16
 442              		.cfi_offset 4, -12
 443              		.cfi_offset 5, -8
 444              		.cfi_offset 14, -4
 445 0002 041E     		sub	r4, r0, #0
ARM GAS  /tmp/cchPcaY2.s 			page 48


 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 446              		.loc 1 361 0
 447 0004 00D1     		bne	.LCB429
 448 0006 DFE0     		b	.L53	@long jump
 449              	.LCB429:
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 450              		.loc 1 393 0
 451 0008 836D     		ldr	r3, [r0, #88]
 452 000a 002B     		cmp	r3, #0
 453 000c 04D1     		bne	.L38
 396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 454              		.loc 1 396 0
 455 000e C365     		str	r3, [r0, #92]
 399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 456              		.loc 1 399 0
 457 0010 5422     		mov	r2, #84
 458 0012 8354     		strb	r3, [r0, r2]
 402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 459              		.loc 1 402 0
 460 0014 FFF7FEFF 		bl	HAL_ADC_MspInit
 461              	.LVL39:
 462              	.L38:
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 463              		.loc 1 410 0
 464 0018 A36D     		ldr	r3, [r4, #88]
 465 001a D806     		lsl	r0, r3, #27
 466 001c 03D4     		bmi	.L39
 411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 467              		.loc 1 411 0 discriminator 1
 468 001e 2368     		ldr	r3, [r4]
 469 0020 9A68     		ldr	r2, [r3, #8]
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 470              		.loc 1 410 0 discriminator 1
 471 0022 5107     		lsl	r1, r2, #29
 472 0024 08D5     		bpl	.L40
 473              	.L39:
 414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 474              		.loc 1 414 0
 475 0026 A26D     		ldr	r2, [r4, #88]
 476 0028 1023     		mov	r3, #16
 477 002a 1343     		orr	r3, r2
 478 002c A365     		str	r3, [r4, #88]
 417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 479              		.loc 1 417 0
 480 002e 0022     		mov	r2, #0
 481 0030 5423     		mov	r3, #84
 482 0032 E254     		strb	r2, [r4, r3]
 418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 483              		.loc 1 418 0
 484 0034 0120     		mov	r0, #1
 485 0036 C8E0     		b	.L37
 486              	.L40:
 422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 487              		.loc 1 422 0
 488 0038 A16D     		ldr	r1, [r4, #88]
 489 003a 644A     		ldr	r2, .L57
 490 003c 0A40     		and	r2, r1
ARM GAS  /tmp/cchPcaY2.s 			page 49


 491 003e 0221     		mov	r1, #2
 492 0040 0A43     		orr	r2, r1
 493 0042 A265     		str	r2, [r4, #88]
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 494              		.loc 1 431 0
 495 0044 9A68     		ldr	r2, [r3, #8]
 496 0046 0321     		mov	r1, #3
 497 0048 0A40     		and	r2, r1
 498 004a 012A     		cmp	r2, #1
 499 004c 04D1     		bne	.L54
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 500              		.loc 1 431 0 is_stmt 0 discriminator 1
 501 004e 1A68     		ldr	r2, [r3]
 502 0050 D507     		lsl	r5, r2, #31
 503 0052 03D4     		bmi	.L55
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 504              		.loc 1 431 0
 505 0054 0022     		mov	r2, #0
 506 0056 02E0     		b	.L41
 507              	.L54:
 508 0058 0022     		mov	r2, #0
 509 005a 00E0     		b	.L41
 510              	.L55:
 511 005c 0122     		mov	r2, #1
 512              	.L41:
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 513              		.loc 1 431 0 discriminator 4
 514 005e 002A     		cmp	r2, #0
 515 0060 2DD1     		bne	.L42
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLOCK_PRESCALER(hadc);
 516              		.loc 1 443 0 is_stmt 1
 517 0062 6268     		ldr	r2, [r4, #4]
 518 0064 C021     		mov	r1, #192
 519 0066 0906     		lsl	r1, r1, #24
 520 0068 8A42     		cmp	r2, r1
 521 006a 07D0     		beq	.L43
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLOCK_PRESCALER(hadc);
 522              		.loc 1 443 0 is_stmt 0 discriminator 2
 523 006c 8021     		mov	r1, #128
 524 006e C905     		lsl	r1, r1, #23
 525 0070 8A42     		cmp	r2, r1
 526 0072 03D0     		beq	.L43
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLOCK_PRESCALER(hadc);
 527              		.loc 1 443 0 discriminator 1
 528 0074 8021     		mov	r1, #128
 529 0076 0906     		lsl	r1, r1, #24
 530 0078 8A42     		cmp	r2, r1
 531 007a 09D1     		bne	.L44
 532              	.L43:
 533 007c 1A69     		ldr	r2, [r3, #16]
 534 007e 9200     		lsl	r2, r2, #2
 535 0080 9208     		lsr	r2, r2, #2
 536 0082 1A61     		str	r2, [r3, #16]
 537 0084 2368     		ldr	r3, [r4]
 538 0086 1A69     		ldr	r2, [r3, #16]
 539 0088 6068     		ldr	r0, [r4, #4]
 540 008a 0243     		orr	r2, r0
ARM GAS  /tmp/cchPcaY2.s 			page 50


 541 008c 1A61     		str	r2, [r3, #16]
 542 008e 0CE0     		b	.L45
 543              	.L44:
 544 0090 1A69     		ldr	r2, [r3, #16]
 545 0092 9200     		lsl	r2, r2, #2
 546 0094 9208     		lsr	r2, r2, #2
 547 0096 1A61     		str	r2, [r3, #16]
 548 0098 4D4B     		ldr	r3, .L57+4
 549 009a 1968     		ldr	r1, [r3]
 550 009c 4D4A     		ldr	r2, .L57+8
 551 009e 0A40     		and	r2, r1
 552 00a0 1A60     		str	r2, [r3]
 553 00a2 1A68     		ldr	r2, [r3]
 554 00a4 6168     		ldr	r1, [r4, #4]
 555 00a6 0A43     		orr	r2, r1
 556 00a8 1A60     		str	r2, [r3]
 557              	.L45:
 447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 558              		.loc 1 447 0 is_stmt 1
 559 00aa 2368     		ldr	r3, [r4]
 560 00ac DA68     		ldr	r2, [r3, #12]
 561 00ae 1821     		mov	r1, #24
 562 00b0 8A43     		bic	r2, r1
 563 00b2 DA60     		str	r2, [r3, #12]
 448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 564              		.loc 1 448 0
 565 00b4 2368     		ldr	r3, [r4]
 566 00b6 DA68     		ldr	r2, [r3, #12]
 567 00b8 A568     		ldr	r5, [r4, #8]
 568 00ba 2A43     		orr	r2, r5
 569 00bc DA60     		str	r2, [r3, #12]
 570              	.L42:
 452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 571              		.loc 1 452 0
 572 00be 444B     		ldr	r3, .L57+4
 573 00c0 1968     		ldr	r1, [r3]
 574 00c2 454A     		ldr	r2, .L57+12
 575 00c4 0A40     		and	r2, r1
 576 00c6 1A60     		str	r2, [r3]
 453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 577              		.loc 1 453 0
 578 00c8 1968     		ldr	r1, [r3]
 579 00ca A06B     		ldr	r0, [r4, #56]
 580 00cc 4206     		lsl	r2, r0, #25
 581 00ce 0A43     		orr	r2, r1
 582 00d0 1A60     		str	r2, [r3]
 456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 583              		.loc 1 456 0
 584 00d2 2368     		ldr	r3, [r4]
 585 00d4 9A68     		ldr	r2, [r3, #8]
 586 00d6 D100     		lsl	r1, r2, #3
 587 00d8 04D4     		bmi	.L46
 459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR |= ADC_CR_ADVREGEN;
 588              		.loc 1 459 0
 589 00da 9968     		ldr	r1, [r3, #8]
 590 00dc 8022     		mov	r2, #128
 591 00de 5205     		lsl	r2, r2, #21
ARM GAS  /tmp/cchPcaY2.s 			page 51


 592 00e0 0A43     		orr	r2, r1
 593 00e2 9A60     		str	r2, [r3, #8]
 594              	.L46:
 473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 595              		.loc 1 473 0
 596 00e4 2368     		ldr	r3, [r4]
 597 00e6 D968     		ldr	r1, [r3, #12]
 598 00e8 3C4A     		ldr	r2, .L57+16
 599 00ea 0A40     		and	r2, r1
 600 00ec DA60     		str	r2, [r3, #12]
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 601              		.loc 1 484 0
 602 00ee 2368     		ldr	r3, [r4]
 603 00f0 D968     		ldr	r1, [r3, #12]
 604 00f2 E268     		ldr	r2, [r4, #12]
 605 00f4 2569     		ldr	r5, [r4, #16]
 606 00f6 022D     		cmp	r5, #2
 607 00f8 01D1     		bne	.L56
 608 00fa 0420     		mov	r0, #4
 609 00fc 00E0     		b	.L47
 610              	.L56:
 611 00fe 0020     		mov	r0, #0
 612              	.L47:
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 613              		.loc 1 484 0 is_stmt 0 discriminator 3
 614 0100 0243     		orr	r2, r0
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 615              		.loc 1 486 0 is_stmt 1 discriminator 3
 616 0102 256A     		ldr	r5, [r4, #32]
 617 0104 6803     		lsl	r0, r5, #13
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 618              		.loc 1 485 0 discriminator 3
 619 0106 0243     		orr	r2, r0
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 620              		.loc 1 487 0 discriminator 3
 621 0108 256B     		ldr	r5, [r4, #48]
 622 010a 6800     		lsl	r0, r5, #1
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 623              		.loc 1 486 0 discriminator 3
 624 010c 0243     		orr	r2, r0
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 625              		.loc 1 487 0 discriminator 3
 626 010e 606B     		ldr	r0, [r4, #52]
 627 0110 0243     		orr	r2, r0
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 628              		.loc 1 489 0 discriminator 3
 629 0112 A569     		ldr	r5, [r4, #24]
 630 0114 A803     		lsl	r0, r5, #14
 488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 631              		.loc 1 488 0 discriminator 3
 632 0116 0243     		orr	r2, r0
 490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 633              		.loc 1 490 0 discriminator 3
 634 0118 E569     		ldr	r5, [r4, #28]
 635 011a E803     		lsl	r0, r5, #15
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 636              		.loc 1 489 0 discriminator 3
ARM GAS  /tmp/cchPcaY2.s 			page 52


 637 011c 0243     		orr	r2, r0
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 638              		.loc 1 484 0 discriminator 3
 639 011e 0A43     		orr	r2, r1
 640 0120 DA60     		str	r2, [r3, #12]
 497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 641              		.loc 1 497 0 discriminator 3
 642 0122 A36A     		ldr	r3, [r4, #40]
 643 0124 C222     		mov	r2, #194
 644 0126 FF32     		add	r2, r2, #255
 645 0128 9342     		cmp	r3, r2
 646 012a 05D0     		beq	.L48
 499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 647              		.loc 1 499 0
 648 012c 2268     		ldr	r2, [r4]
 649 012e D168     		ldr	r1, [r2, #12]
 650 0130 E06A     		ldr	r0, [r4, #44]
 651 0132 0343     		orr	r3, r0
 652 0134 0B43     		orr	r3, r1
 653 0136 D360     		str	r3, [r2, #12]
 654              	.L48:
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.DiscontinuousConvMode == ENABLE)
 655              		.loc 1 504 0
 656 0138 616A     		ldr	r1, [r4, #36]
 657 013a 0129     		cmp	r1, #1
 658 013c 11D1     		bne	.L49
 506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.ContinuousConvMode == DISABLE)
 659              		.loc 1 506 0
 660 013e 226A     		ldr	r2, [r4, #32]
 661 0140 002A     		cmp	r2, #0
 662 0142 06D1     		bne	.L50
 509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 663              		.loc 1 509 0
 664 0144 2368     		ldr	r3, [r4]
 665 0146 D968     		ldr	r1, [r3, #12]
 666 0148 8022     		mov	r2, #128
 667 014a 5202     		lsl	r2, r2, #9
 668 014c 0A43     		orr	r2, r1
 669 014e DA60     		str	r2, [r3, #12]
 670 0150 07E0     		b	.L49
 671              	.L50:
 518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 672              		.loc 1 518 0
 673 0152 A26D     		ldr	r2, [r4, #88]
 674 0154 2023     		mov	r3, #32
 675 0156 1343     		orr	r3, r2
 676 0158 A365     		str	r3, [r4, #88]
 521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 677              		.loc 1 521 0
 678 015a E26D     		ldr	r2, [r4, #92]
 679 015c 0123     		mov	r3, #1
 680 015e 1343     		orr	r3, r2
 681 0160 E365     		str	r3, [r4, #92]
 682              	.L49:
 525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
 683              		.loc 1 525 0
 684 0162 236C     		ldr	r3, [r4, #64]
ARM GAS  /tmp/cchPcaY2.s 			page 53


 685 0164 012B     		cmp	r3, #1
 686 0166 13D1     		bne	.L51
 536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 687              		.loc 1 536 0
 688 0168 2368     		ldr	r3, [r4]
 689 016a 1969     		ldr	r1, [r3, #16]
 690 016c 1C4A     		ldr	r2, .L57+20
 691 016e 0A40     		and	r2, r1
 692 0170 1A61     		str	r2, [r3, #16]
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 693              		.loc 1 540 0
 694 0172 2368     		ldr	r3, [r4]
 695 0174 1969     		ldr	r1, [r3, #16]
 696 0176 626C     		ldr	r2, [r4, #68]
 697 0178 A56C     		ldr	r5, [r4, #72]
 698 017a 2A43     		orr	r2, r5
 541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 699              		.loc 1 541 0
 700 017c E06C     		ldr	r0, [r4, #76]
 701 017e 0243     		orr	r2, r0
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 702              		.loc 1 540 0
 703 0180 0A43     		orr	r2, r1
 704 0182 1A61     		str	r2, [r3, #16]
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 705              		.loc 1 545 0
 706 0184 2368     		ldr	r3, [r4]
 707 0186 1969     		ldr	r1, [r3, #16]
 708 0188 0122     		mov	r2, #1
 709 018a 0A43     		orr	r2, r1
 710 018c 1A61     		str	r2, [r3, #16]
 711 018e 07E0     		b	.L52
 712              	.L51:
 549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 713              		.loc 1 549 0
 714 0190 2368     		ldr	r3, [r4]
 715 0192 1A69     		ldr	r2, [r3, #16]
 716 0194 D107     		lsl	r1, r2, #31
 717 0196 03D5     		bpl	.L52
 552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 718              		.loc 1 552 0
 719 0198 1A69     		ldr	r2, [r3, #16]
 720 019a 0121     		mov	r1, #1
 721 019c 8A43     		bic	r2, r1
 722 019e 1A61     		str	r2, [r3, #16]
 723              	.L52:
 557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 724              		.loc 1 557 0
 725 01a0 2368     		ldr	r3, [r4]
 726 01a2 5A69     		ldr	r2, [r3, #20]
 727 01a4 0721     		mov	r1, #7
 728 01a6 8A43     		bic	r2, r1
 729 01a8 5A61     		str	r2, [r3, #20]
 560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 730              		.loc 1 560 0
 731 01aa 2368     		ldr	r3, [r4]
 732 01ac 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/cchPcaY2.s 			page 54


 733 01ae E56B     		ldr	r5, [r4, #60]
 734 01b0 2A43     		orr	r2, r5
 735 01b2 5A61     		str	r2, [r3, #20]
 563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 736              		.loc 1 563 0
 737 01b4 0023     		mov	r3, #0
 738 01b6 E365     		str	r3, [r4, #92]
 566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 739              		.loc 1 566 0
 740 01b8 A36D     		ldr	r3, [r4, #88]
 741 01ba 0322     		mov	r2, #3
 742 01bc 9343     		bic	r3, r2
 743 01be 0122     		mov	r2, #1
 744 01c0 1343     		orr	r3, r2
 745 01c2 A365     		str	r3, [r4, #88]
 572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 746              		.loc 1 572 0
 747 01c4 0020     		mov	r0, #0
 748 01c6 00E0     		b	.L37
 749              	.LVL40:
 750              	.L53:
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 751              		.loc 1 363 0
 752 01c8 0120     		mov	r0, #1
 753              	.LVL41:
 754              	.L37:
 573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 755              		.loc 1 573 0
 756              		@ sp needed
 757              	.LVL42:
 758 01ca 38BD     		pop	{r3, r4, r5, pc}
 759              	.L58:
 760              		.align	2
 761              	.L57:
 762 01cc FDFEFFFF 		.word	-259
 763 01d0 08270140 		.word	1073817352
 764 01d4 FFFFC3FF 		.word	-3932161
 765 01d8 FFFFFFFD 		.word	-33554433
 766 01dc 1902FEFF 		.word	-130535
 767 01e0 03FCFFFF 		.word	-1021
 768              		.cfi_endproc
 769              	.LFE36:
 771              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 772              		.align	2
 773              		.weak	HAL_ADC_MspDeInit
 774              		.code	16
 775              		.thumb_func
 777              	HAL_ADC_MspDeInit:
 778              	.LFB39:
 724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 779              		.loc 1 724 0
 780              		.cfi_startproc
 781              	.LVL43:
 731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 782              		.loc 1 731 0
 783              		@ sp needed
 784 0000 7047     		bx	lr
ARM GAS  /tmp/cchPcaY2.s 			page 55


 785              		.cfi_endproc
 786              	.LFE39:
 788 0002 C046     		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 789              		.align	2
 790              		.global	HAL_ADC_DeInit
 791              		.code	16
 792              		.thumb_func
 794              	HAL_ADC_DeInit:
 795              	.LFB37:
 588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 796              		.loc 1 588 0
 797              		.cfi_startproc
 798              	.LVL44:
 799 0000 38B5     		push	{r3, r4, r5, lr}
 800              	.LCFI6:
 801              		.cfi_def_cfa_offset 16
 802              		.cfi_offset 3, -16
 803              		.cfi_offset 4, -12
 804              		.cfi_offset 5, -8
 805              		.cfi_offset 14, -4
 806 0002 041E     		sub	r4, r0, #0
 807              	.LVL45:
 592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 808              		.loc 1 592 0
 809 0004 47D0     		beq	.L64
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 810              		.loc 1 601 0
 811 0006 826D     		ldr	r2, [r0, #88]
 812 0008 0223     		mov	r3, #2
 813 000a 1343     		orr	r3, r2
 814 000c 8365     		str	r3, [r0, #88]
 604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 815              		.loc 1 604 0
 816 000e FFF7FEFF 		bl	ADC_ConversionStop
 817              	.LVL46:
 818 0012 051E     		sub	r5, r0, #0
 819              	.LVL47:
 607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 820              		.loc 1 607 0
 821 0014 07D1     		bne	.L62
 610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 822              		.loc 1 610 0
 823 0016 201C     		mov	r0, r4
 824              	.LVL48:
 825 0018 FFF7FEFF 		bl	ADC_Disable
 826              	.LVL49:
 827 001c 051E     		sub	r5, r0, #0
 828              	.LVL50:
 613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 829              		.loc 1 613 0
 830 001e 012D     		cmp	r5, #1
 831 0020 01D0     		beq	.L62
 616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 832              		.loc 1 616 0
 833 0022 0123     		mov	r3, #1
 834 0024 A365     		str	r3, [r4, #88]
 835              	.LVL51:
ARM GAS  /tmp/cchPcaY2.s 			page 56


 836              	.L62:
 623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 837              		.loc 1 623 0
 838 0026 012D     		cmp	r5, #1
 839 0028 30D0     		beq	.L63
 628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 840              		.loc 1 628 0
 841 002a 2368     		ldr	r3, [r4]
 842 002c 5968     		ldr	r1, [r3, #4]
 843 002e 1B4A     		ldr	r2, .L65
 844 0030 0A40     		and	r2, r1
 845 0032 5A60     		str	r2, [r3, #4]
 633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 846              		.loc 1 633 0
 847 0034 2368     		ldr	r3, [r4]
 848 0036 1A4A     		ldr	r2, .L65+4
 849 0038 1A60     		str	r2, [r3]
 641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 850              		.loc 1 641 0
 851 003a 2368     		ldr	r3, [r4]
 852 003c 9968     		ldr	r1, [r3, #8]
 853 003e 194A     		ldr	r2, .L65+8
 854 0040 0A40     		and	r2, r1
 855 0042 9A60     		str	r2, [r3, #8]
 647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 856              		.loc 1 647 0
 857 0044 2368     		ldr	r3, [r4]
 858 0046 D968     		ldr	r1, [r3, #12]
 859 0048 174A     		ldr	r2, .L65+12
 860 004a 0A40     		and	r2, r1
 861 004c DA60     		str	r2, [r3, #12]
 654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 862              		.loc 1 654 0
 863 004e 2368     		ldr	r3, [r4]
 864 0050 1969     		ldr	r1, [r3, #16]
 865 0052 164A     		ldr	r2, .L65+16
 866 0054 0A40     		and	r2, r1
 867 0056 1A61     		str	r2, [r3, #16]
 659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 868              		.loc 1 659 0
 869 0058 2368     		ldr	r3, [r4]
 870 005a 5A69     		ldr	r2, [r3, #20]
 871 005c 0721     		mov	r1, #7
 872 005e 8A43     		bic	r2, r1
 873 0060 5A61     		str	r2, [r3, #20]
 662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 874              		.loc 1 662 0
 875 0062 2368     		ldr	r3, [r4]
 876 0064 196A     		ldr	r1, [r3, #32]
 877 0066 124A     		ldr	r2, .L65+20
 878 0068 0A40     		and	r2, r1
 879 006a 1A62     		str	r2, [r3, #32]
 665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 880              		.loc 1 665 0
 881 006c 2268     		ldr	r2, [r4]
 882 006e B423     		mov	r3, #180
 883 0070 D058     		ldr	r0, [r2, r3]
ARM GAS  /tmp/cchPcaY2.s 			page 57


 884 0072 7F21     		mov	r1, #127
 885 0074 8843     		bic	r0, r1
 886 0076 D050     		str	r0, [r2, r3]
 675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 887              		.loc 1 675 0
 888 0078 2268     		ldr	r2, [r4]
 889 007a D058     		ldr	r0, [r2, r3]
 890 007c 8843     		bic	r0, r1
 891 007e D050     		str	r0, [r2, r3]
 687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 892              		.loc 1 687 0
 893 0080 201C     		mov	r0, r4
 894 0082 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 895              	.LVL52:
 690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 896              		.loc 1 690 0
 897 0086 0023     		mov	r3, #0
 898 0088 E365     		str	r3, [r4, #92]
 693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 899              		.loc 1 693 0
 900 008a A365     		str	r3, [r4, #88]
 901              	.L63:
 697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 902              		.loc 1 697 0
 903 008c 0022     		mov	r2, #0
 904 008e 5423     		mov	r3, #84
 905 0090 E254     		strb	r2, [r4, r3]
 700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 906              		.loc 1 700 0
 907 0092 281C     		mov	r0, r5
 908 0094 00E0     		b	.L61
 909              	.LVL53:
 910              	.L64:
 594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 911              		.loc 1 594 0
 912 0096 0120     		mov	r0, #1
 913              	.LVL54:
 914              	.L61:
 701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 915              		.loc 1 701 0
 916              		@ sp needed
 917              	.LVL55:
 918 0098 38BD     		pop	{r3, r4, r5, pc}
 919              	.L66:
 920 009a C046     		.align	2
 921              	.L65:
 922 009c 60F7FFFF 		.word	-2208
 923 00a0 9F080000 		.word	2207
 924 00a4 FFFFFFEF 		.word	-268435457
 925 00a8 00023E83 		.word	-2093088256
 926 00ac 02FCFF3F 		.word	1073740802
 927 00b0 00F000F0 		.word	-268374016
 928              		.cfi_endproc
 929              	.LFE37:
 931              		.section	.text.HAL_ADC_Start,"ax",%progbits
 932              		.align	2
 933              		.global	HAL_ADC_Start
ARM GAS  /tmp/cchPcaY2.s 			page 58


 934              		.code	16
 935              		.thumb_func
 937              	HAL_ADC_Start:
 938              	.LFB40:
 766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 939              		.loc 1 766 0
 940              		.cfi_startproc
 941              	.LVL56:
 942 0000 10B5     		push	{r4, lr}
 943              	.LCFI7:
 944              		.cfi_def_cfa_offset 8
 945              		.cfi_offset 4, -8
 946              		.cfi_offset 14, -4
 947 0002 041C     		mov	r4, r0
 948              	.LVL57:
 773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 949              		.loc 1 773 0
 950 0004 0368     		ldr	r3, [r0]
 951 0006 9B68     		ldr	r3, [r3, #8]
 952 0008 5A07     		lsl	r2, r3, #29
 953 000a 23D4     		bmi	.L71
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 954              		.loc 1 776 0
 955 000c 5423     		mov	r3, #84
 956 000e C35C     		ldrb	r3, [r0, r3]
 957 0010 012B     		cmp	r3, #1
 958 0012 21D0     		beq	.L72
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 959              		.loc 1 776 0 is_stmt 0 discriminator 2
 960 0014 0122     		mov	r2, #1
 961 0016 5423     		mov	r3, #84
 962 0018 C254     		strb	r2, [r0, r3]
 781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 963              		.loc 1 781 0 is_stmt 1 discriminator 2
 964 001a C369     		ldr	r3, [r0, #28]
 965 001c 012B     		cmp	r3, #1
 966 001e 02D0     		beq	.L73
 783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 967              		.loc 1 783 0
 968 0020 FFF7FEFF 		bl	ADC_Enable
 969              	.LVL58:
 970 0024 00E0     		b	.L70
 971              	.LVL59:
 972              	.L73:
 767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 973              		.loc 1 767 0
 974 0026 0020     		mov	r0, #0
 975              	.LVL60:
 976              	.L70:
 787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 977              		.loc 1 787 0
 978 0028 0028     		cmp	r0, #0
 979 002a 16D1     		bne	.L69
 792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 980              		.loc 1 792 0
 981 002c A26D     		ldr	r2, [r4, #88]
 982 002e 0B4B     		ldr	r3, .L74
ARM GAS  /tmp/cchPcaY2.s 			page 59


 983 0030 1340     		and	r3, r2
 984 0032 8022     		mov	r2, #128
 985 0034 5200     		lsl	r2, r2, #1
 986 0036 1343     		orr	r3, r2
 987 0038 A365     		str	r3, [r4, #88]
 797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 988              		.loc 1 797 0
 989 003a 0023     		mov	r3, #0
 990 003c E365     		str	r3, [r4, #92]
 802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 991              		.loc 1 802 0
 992 003e 5422     		mov	r2, #84
 993 0040 A354     		strb	r3, [r4, r2]
 807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 994              		.loc 1 807 0
 995 0042 2368     		ldr	r3, [r4]
 996 0044 1C22     		mov	r2, #28
 997 0046 1A60     		str	r2, [r3]
 813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 998              		.loc 1 813 0
 999 0048 2368     		ldr	r3, [r4]
 1000 004a 9968     		ldr	r1, [r3, #8]
 1001 004c 0422     		mov	r2, #4
 1002 004e 0A43     		orr	r2, r1
 1003 0050 9A60     		str	r2, [r3, #8]
 1004 0052 02E0     		b	.L69
 1005              	.LVL61:
 1006              	.L71:
 818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 1007              		.loc 1 818 0
 1008 0054 0220     		mov	r0, #2
 1009              	.LVL62:
 822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 1010              		.loc 1 822 0
 1011 0056 00E0     		b	.L69
 1012              	.LVL63:
 1013              	.L72:
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1014              		.loc 1 776 0
 1015 0058 0220     		mov	r0, #2
 1016              	.LVL64:
 1017              	.L69:
 823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1018              		.loc 1 823 0
 1019              		@ sp needed
 1020              	.LVL65:
 1021 005a 10BD     		pop	{r4, pc}
 1022              	.L75:
 1023              		.align	2
 1024              	.L74:
 1025 005c FEF0FFFF 		.word	-3842
 1026              		.cfi_endproc
 1027              	.LFE40:
 1029              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 1030              		.align	2
 1031              		.global	HAL_ADC_Stop
 1032              		.code	16
ARM GAS  /tmp/cchPcaY2.s 			page 60


 1033              		.thumb_func
 1035              	HAL_ADC_Stop:
 1036              	.LFB41:
 832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1037              		.loc 1 832 0
 1038              		.cfi_startproc
 1039              	.LVL66:
 1040 0000 10B5     		push	{r4, lr}
 1041              	.LCFI8:
 1042              		.cfi_def_cfa_offset 8
 1043              		.cfi_offset 4, -8
 1044              		.cfi_offset 14, -4
 1045 0002 041C     		mov	r4, r0
 1046              	.LVL67:
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1047              		.loc 1 839 0
 1048 0004 5423     		mov	r3, #84
 1049 0006 C35C     		ldrb	r3, [r0, r3]
 1050 0008 012B     		cmp	r3, #1
 1051 000a 15D0     		beq	.L79
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1052              		.loc 1 839 0 is_stmt 0 discriminator 2
 1053 000c 0122     		mov	r2, #1
 1054 000e 5423     		mov	r3, #84
 1055 0010 C254     		strb	r2, [r0, r3]
 842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 1056              		.loc 1 842 0 is_stmt 1 discriminator 2
 1057 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1058              	.LVL68:
 845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1059              		.loc 1 845 0 discriminator 2
 1060 0016 0028     		cmp	r0, #0
 1061 0018 0AD1     		bne	.L78
 848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 1062              		.loc 1 848 0
 1063 001a 201C     		mov	r0, r4
 1064              	.LVL69:
 1065 001c FFF7FEFF 		bl	ADC_Disable
 1066              	.LVL70:
 851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1067              		.loc 1 851 0
 1068 0020 0028     		cmp	r0, #0
 1069 0022 05D1     		bne	.L78
 854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1070              		.loc 1 854 0
 1071 0024 A26D     		ldr	r2, [r4, #88]
 1072 0026 054B     		ldr	r3, .L80
 1073 0028 1340     		and	r3, r2
 1074 002a 0122     		mov	r2, #1
 1075 002c 1343     		orr	r3, r2
 1076 002e A365     		str	r3, [r4, #88]
 1077              	.LVL71:
 1078              	.L78:
 861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1079              		.loc 1 861 0
 1080 0030 0022     		mov	r2, #0
 1081 0032 5423     		mov	r3, #84
ARM GAS  /tmp/cchPcaY2.s 			page 61


 1082 0034 E254     		strb	r2, [r4, r3]
 864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 1083              		.loc 1 864 0
 1084 0036 00E0     		b	.L77
 1085              	.LVL72:
 1086              	.L79:
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1087              		.loc 1 839 0
 1088 0038 0220     		mov	r0, #2
 1089              	.LVL73:
 1090              	.L77:
 865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1091              		.loc 1 865 0
 1092              		@ sp needed
 1093              	.LVL74:
 1094 003a 10BD     		pop	{r4, pc}
 1095              	.L81:
 1096              		.align	2
 1097              	.L80:
 1098 003c FEFEFFFF 		.word	-258
 1099              		.cfi_endproc
 1100              	.LFE41:
 1102              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 1103              		.align	2
 1104              		.global	HAL_ADC_PollForConversion
 1105              		.code	16
 1106              		.thumb_func
 1108              	HAL_ADC_PollForConversion:
 1109              	.LFB42:
 886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1110              		.loc 1 886 0
 1111              		.cfi_startproc
 1112              	.LVL75:
 1113 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1114              	.LCFI9:
 1115              		.cfi_def_cfa_offset 24
 1116              		.cfi_offset 3, -24
 1117              		.cfi_offset 4, -20
 1118              		.cfi_offset 5, -16
 1119              		.cfi_offset 6, -12
 1120              		.cfi_offset 7, -8
 1121              		.cfi_offset 14, -4
 1122 0002 041C     		mov	r4, r0
 1123 0004 0D1C     		mov	r5, r1
 1124              	.LVL76:
 894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 1125              		.loc 1 894 0
 1126 0006 4169     		ldr	r1, [r0, #20]
 1127              	.LVL77:
 1128 0008 0829     		cmp	r1, #8
 1129 000a 0CD0     		beq	.L91
 907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 1130              		.loc 1 907 0
 1131 000c 0368     		ldr	r3, [r0]
 1132 000e DB68     		ldr	r3, [r3, #12]
 1133 0010 DA07     		lsl	r2, r3, #31
 1134 0012 0AD5     		bpl	.L92
ARM GAS  /tmp/cchPcaY2.s 			page 62


 910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1135              		.loc 1 910 0
 1136 0014 826D     		ldr	r2, [r0, #88]
 1137 0016 2023     		mov	r3, #32
 1138 0018 1343     		orr	r3, r2
 1139 001a 8365     		str	r3, [r0, #88]
 913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1140              		.loc 1 913 0
 1141 001c 0022     		mov	r2, #0
 1142 001e 5423     		mov	r3, #84
 1143 0020 C254     		strb	r2, [r0, r3]
 915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
 1144              		.loc 1 915 0
 1145 0022 0120     		mov	r0, #1
 1146              	.LVL78:
 1147 0024 4BE0     		b	.L84
 1148              	.LVL79:
 1149              	.L91:
 896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 1150              		.loc 1 896 0
 1151 0026 0826     		mov	r6, #8
 1152 0028 00E0     		b	.L83
 1153              	.L92:
 919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 1154              		.loc 1 919 0
 1155 002a 0C26     		mov	r6, #12
 1156              	.L83:
 1157              	.LVL80:
 924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1158              		.loc 1 924 0
 1159 002c FFF7FEFF 		bl	HAL_GetTick
 1160              	.LVL81:
 1161 0030 071C     		mov	r7, r0
 1162              	.LVL82:
 927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 1163              		.loc 1 927 0
 1164 0032 11E0     		b	.L94
 1165              	.LVL83:
 1166              	.L88:
 930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1167              		.loc 1 930 0
 1168 0034 6B1C     		add	r3, r5, #1
 1169 0036 0FD0     		beq	.L94
 932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 1170              		.loc 1 932 0
 1171 0038 002D     		cmp	r5, #0
 1172 003a 04D0     		beq	.L87
 932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 1173              		.loc 1 932 0 is_stmt 0 discriminator 1
 1174 003c FFF7FEFF 		bl	HAL_GetTick
 1175              	.LVL84:
 1176 0040 C01B     		sub	r0, r0, r7
 1177 0042 A842     		cmp	r0, r5
 1178 0044 08D9     		bls	.L94
 1179              	.L87:
 935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1180              		.loc 1 935 0 is_stmt 1
ARM GAS  /tmp/cchPcaY2.s 			page 63


 1181 0046 A26D     		ldr	r2, [r4, #88]
 1182 0048 0423     		mov	r3, #4
 1183 004a 1343     		orr	r3, r2
 1184 004c A365     		str	r3, [r4, #88]
 938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 1185              		.loc 1 938 0
 1186 004e 0022     		mov	r2, #0
 1187 0050 5423     		mov	r3, #84
 1188 0052 E254     		strb	r2, [r4, r3]
 940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
 1189              		.loc 1 940 0
 1190 0054 0320     		mov	r0, #3
 1191 0056 32E0     		b	.L84
 1192              	.L94:
 927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 1193              		.loc 1 927 0 discriminator 1
 1194 0058 2368     		ldr	r3, [r4]
 1195 005a 1A68     		ldr	r2, [r3]
 1196 005c 1642     		tst	r6, r2
 1197 005e E9D0     		beq	.L88
 946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1198              		.loc 1 946 0
 1199 0060 A16D     		ldr	r1, [r4, #88]
 1200 0062 8022     		mov	r2, #128
 1201 0064 9200     		lsl	r2, r2, #2
 1202 0066 0A43     		orr	r2, r1
 1203 0068 A265     		str	r2, [r4, #88]
 950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1204              		.loc 1 950 0
 1205 006a D968     		ldr	r1, [r3, #12]
 1206 006c C022     		mov	r2, #192
 1207 006e 1201     		lsl	r2, r2, #4
 1208 0070 1142     		tst	r1, r2
 1209 0072 1BD1     		bne	.L89
 950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1210              		.loc 1 950 0 is_stmt 0 discriminator 1
 1211 0074 216A     		ldr	r1, [r4, #32]
 1212 0076 0029     		cmp	r1, #0
 1213 0078 18D1     		bne	.L89
 954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 1214              		.loc 1 954 0 is_stmt 1
 1215 007a 1A68     		ldr	r2, [r3]
 1216 007c 1107     		lsl	r1, r2, #28
 1217 007e 15D5     		bpl	.L89
 958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1218              		.loc 1 958 0
 1219 0080 9A68     		ldr	r2, [r3, #8]
 1220 0082 5107     		lsl	r1, r2, #29
 1221 0084 0AD4     		bmi	.L90
 964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 1222              		.loc 1 964 0
 1223 0086 5A68     		ldr	r2, [r3, #4]
 1224 0088 0C21     		mov	r1, #12
 1225 008a 8A43     		bic	r2, r1
 1226 008c 5A60     		str	r2, [r3, #4]
 967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 1227              		.loc 1 967 0
ARM GAS  /tmp/cchPcaY2.s 			page 64


 1228 008e A26D     		ldr	r2, [r4, #88]
 1229 0090 0B4B     		ldr	r3, .L95
 1230 0092 1A40     		and	r2, r3
 1231 0094 0123     		mov	r3, #1
 1232 0096 1343     		orr	r3, r2
 1233 0098 A365     		str	r3, [r4, #88]
 1234 009a 07E0     		b	.L89
 1235              	.L90:
 974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1236              		.loc 1 974 0
 1237 009c A26D     		ldr	r2, [r4, #88]
 1238 009e 2023     		mov	r3, #32
 1239 00a0 1343     		orr	r3, r2
 1240 00a2 A365     		str	r3, [r4, #88]
 977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 1241              		.loc 1 977 0
 1242 00a4 E26D     		ldr	r2, [r4, #92]
 1243 00a6 0123     		mov	r3, #1
 1244 00a8 1343     		orr	r3, r2
 1245 00aa E365     		str	r3, [r4, #92]
 1246              	.L89:
 985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 1247              		.loc 1 985 0
 1248 00ac A269     		ldr	r2, [r4, #24]
 1249 00ae 002A     		cmp	r2, #0
 1250 00b0 04D1     		bne	.L93
 988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 1251              		.loc 1 988 0
 1252 00b2 2368     		ldr	r3, [r4]
 1253 00b4 0C22     		mov	r2, #12
 1254 00b6 1A60     		str	r2, [r3]
 992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 1255              		.loc 1 992 0
 1256 00b8 0020     		mov	r0, #0
 1257 00ba 00E0     		b	.L84
 1258              	.L93:
 1259 00bc 0020     		mov	r0, #0
 1260              	.LVL85:
 1261              	.L84:
 993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1262              		.loc 1 993 0
 1263              		@ sp needed
 1264              	.LVL86:
 1265              	.LVL87:
 1266 00be F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1267              	.L96:
 1268              		.align	2
 1269              	.L95:
 1270 00c0 FEFEFFFF 		.word	-258
 1271              		.cfi_endproc
 1272              	.LFE42:
 1274              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1275              		.align	2
 1276              		.global	HAL_ADC_PollForEvent
 1277              		.code	16
 1278              		.thumb_func
 1280              	HAL_ADC_PollForEvent:
ARM GAS  /tmp/cchPcaY2.s 			page 65


 1281              	.LFB43:
1012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1282              		.loc 1 1012 0
 1283              		.cfi_startproc
 1284              	.LVL88:
 1285 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1286              	.LCFI10:
 1287              		.cfi_def_cfa_offset 24
 1288              		.cfi_offset 3, -24
 1289              		.cfi_offset 4, -20
 1290              		.cfi_offset 5, -16
 1291              		.cfi_offset 6, -12
 1292              		.cfi_offset 7, -8
 1293              		.cfi_offset 14, -4
 1294 0002 051C     		mov	r5, r0
 1295 0004 0C1C     		mov	r4, r1
 1296 0006 161C     		mov	r6, r2
 1297              	.LVL89:
1020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1298              		.loc 1 1020 0
 1299 0008 FFF7FEFF 		bl	HAL_GetTick
 1300              	.LVL90:
 1301 000c 071C     		mov	r7, r0
 1302              	.LVL91:
1023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1303              		.loc 1 1023 0
 1304 000e 11E0     		b	.L106
 1305              	.LVL92:
 1306              	.L102:
1026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1307              		.loc 1 1026 0
 1308 0010 721C     		add	r2, r6, #1
 1309 0012 0FD0     		beq	.L106
1028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) ||((HAL_GetTick() - tickstart ) > Timeout))
 1310              		.loc 1 1028 0
 1311 0014 002E     		cmp	r6, #0
 1312 0016 04D0     		beq	.L100
1028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) ||((HAL_GetTick() - tickstart ) > Timeout))
 1313              		.loc 1 1028 0 is_stmt 0 discriminator 1
 1314 0018 FFF7FEFF 		bl	HAL_GetTick
 1315              	.LVL93:
 1316 001c C01B     		sub	r0, r0, r7
 1317 001e B042     		cmp	r0, r6
 1318 0020 08D9     		bls	.L106
 1319              	.L100:
1031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1320              		.loc 1 1031 0 is_stmt 1
 1321 0022 AA6D     		ldr	r2, [r5, #88]
 1322 0024 0423     		mov	r3, #4
 1323 0026 1343     		orr	r3, r2
 1324 0028 AB65     		str	r3, [r5, #88]
1034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 1325              		.loc 1 1034 0
 1326 002a 0022     		mov	r2, #0
 1327 002c 5423     		mov	r3, #84
 1328 002e EA54     		strb	r2, [r5, r3]
1036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
ARM GAS  /tmp/cchPcaY2.s 			page 66


 1329              		.loc 1 1036 0
 1330 0030 0320     		mov	r0, #3
 1331 0032 1EE0     		b	.L101
 1332              	.L106:
1023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1333              		.loc 1 1023 0 discriminator 1
 1334 0034 2B68     		ldr	r3, [r5]
 1335 0036 1968     		ldr	r1, [r3]
 1336 0038 2140     		and	r1, r4
 1337 003a A142     		cmp	r1, r4
 1338 003c E8D1     		bne	.L102
1041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   switch(EventType)
 1339              		.loc 1 1041 0
 1340 003e 802C     		cmp	r4, #128
 1341 0040 08D1     		bne	.L107
1046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1342              		.loc 1 1046 0
 1343 0042 A96D     		ldr	r1, [r5, #88]
 1344 0044 8022     		mov	r2, #128
 1345 0046 5202     		lsl	r2, r2, #9
 1346 0048 0A43     		orr	r2, r1
 1347 004a AA65     		str	r2, [r5, #88]
1049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1348              		.loc 1 1049 0
 1349 004c 8022     		mov	r2, #128
 1350 004e 1A60     		str	r2, [r3]
1073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 1351              		.loc 1 1073 0
 1352 0050 0020     		mov	r0, #0
1050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
 1353              		.loc 1 1050 0
 1354 0052 0EE0     		b	.L101
 1355              	.L107:
1058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 1356              		.loc 1 1058 0
 1357 0054 6A6B     		ldr	r2, [r5, #52]
 1358 0056 002A     		cmp	r2, #0
 1359 0058 08D1     		bne	.L105
1061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 1360              		.loc 1 1061 0
 1361 005a A96D     		ldr	r1, [r5, #88]
 1362 005c 8022     		mov	r2, #128
 1363 005e D200     		lsl	r2, r2, #3
 1364 0060 0A43     		orr	r2, r1
 1365 0062 AA65     		str	r2, [r5, #88]
1064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 1366              		.loc 1 1064 0
 1367 0064 E96D     		ldr	r1, [r5, #92]
 1368 0066 0222     		mov	r2, #2
 1369 0068 0A43     		orr	r2, r1
 1370 006a EA65     		str	r2, [r5, #92]
 1371              	.L105:
1068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 1372              		.loc 1 1068 0
 1373 006c 1022     		mov	r2, #16
 1374 006e 1A60     		str	r2, [r3]
1073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
ARM GAS  /tmp/cchPcaY2.s 			page 67


 1375              		.loc 1 1073 0
 1376 0070 0020     		mov	r0, #0
 1377              	.L101:
1074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1378              		.loc 1 1074 0
 1379              		@ sp needed
 1380              	.LVL94:
 1381              	.LVL95:
 1382              	.LVL96:
 1383              	.LVL97:
 1384 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1385              		.cfi_endproc
 1386              	.LFE43:
 1388              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1389              		.align	2
 1390              		.global	HAL_ADC_Start_IT
 1391              		.code	16
 1392              		.thumb_func
 1394              	HAL_ADC_Start_IT:
 1395              	.LFB44:
1095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1396              		.loc 1 1095 0
 1397              		.cfi_startproc
 1398              	.LVL98:
 1399 0000 10B5     		push	{r4, lr}
 1400              	.LCFI11:
 1401              		.cfi_def_cfa_offset 8
 1402              		.cfi_offset 4, -8
 1403              		.cfi_offset 14, -4
 1404 0002 041C     		mov	r4, r0
 1405              	.LVL99:
1102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1406              		.loc 1 1102 0
 1407 0004 0368     		ldr	r3, [r0]
 1408 0006 9B68     		ldr	r3, [r3, #8]
 1409 0008 5A07     		lsl	r2, r3, #29
 1410 000a 36D4     		bmi	.L115
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1411              		.loc 1 1105 0
 1412 000c 5423     		mov	r3, #84
 1413 000e C35C     		ldrb	r3, [r0, r3]
 1414 0010 012B     		cmp	r3, #1
 1415 0012 34D0     		beq	.L116
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1416              		.loc 1 1105 0 is_stmt 0 discriminator 2
 1417 0014 0122     		mov	r2, #1
 1418 0016 5423     		mov	r3, #84
 1419 0018 C254     		strb	r2, [r0, r3]
1110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 1420              		.loc 1 1110 0 is_stmt 1 discriminator 2
 1421 001a C369     		ldr	r3, [r0, #28]
 1422 001c 012B     		cmp	r3, #1
 1423 001e 02D0     		beq	.L117
1112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 1424              		.loc 1 1112 0
 1425 0020 FFF7FEFF 		bl	ADC_Enable
 1426              	.LVL100:
ARM GAS  /tmp/cchPcaY2.s 			page 68


 1427 0024 00E0     		b	.L111
 1428              	.LVL101:
 1429              	.L117:
1096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1430              		.loc 1 1096 0
 1431 0026 0020     		mov	r0, #0
 1432              	.LVL102:
 1433              	.L111:
1116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1434              		.loc 1 1116 0
 1435 0028 0028     		cmp	r0, #0
 1436 002a 29D1     		bne	.L110
1121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1437              		.loc 1 1121 0
 1438 002c A26D     		ldr	r2, [r4, #88]
 1439 002e 154B     		ldr	r3, .L119
 1440 0030 1340     		and	r3, r2
 1441 0032 8022     		mov	r2, #128
 1442 0034 5200     		lsl	r2, r2, #1
 1443 0036 1343     		orr	r3, r2
 1444 0038 A365     		str	r3, [r4, #88]
1126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1445              		.loc 1 1126 0
 1446 003a 0023     		mov	r3, #0
 1447 003c E365     		str	r3, [r4, #92]
1131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1448              		.loc 1 1131 0
 1449 003e 5422     		mov	r2, #84
 1450 0040 A354     		strb	r3, [r4, r2]
1136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1451              		.loc 1 1136 0
 1452 0042 2368     		ldr	r3, [r4]
 1453 0044 1C22     		mov	r2, #28
 1454 0046 1A60     		str	r2, [r3]
1140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
 1455              		.loc 1 1140 0
 1456 0048 6269     		ldr	r2, [r4, #20]
 1457 004a 082A     		cmp	r2, #8
 1458 004c 0AD1     		bne	.L118
1143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1459              		.loc 1 1143 0
 1460 004e 2368     		ldr	r3, [r4]
 1461 0050 5A68     		ldr	r2, [r3, #4]
 1462 0052 0421     		mov	r1, #4
 1463 0054 8A43     		bic	r2, r1
 1464 0056 5A60     		str	r2, [r3, #4]
1144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 1465              		.loc 1 1144 0
 1466 0058 2368     		ldr	r3, [r4]
 1467 005a 5968     		ldr	r1, [r3, #4]
 1468 005c 1822     		mov	r2, #24
 1469 005e 0A43     		orr	r2, r1
 1470 0060 5A60     		str	r2, [r3, #4]
1145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
 1471              		.loc 1 1145 0
 1472 0062 04E0     		b	.L114
 1473              	.L118:
ARM GAS  /tmp/cchPcaY2.s 			page 69


1148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 1474              		.loc 1 1148 0
 1475 0064 2368     		ldr	r3, [r4]
 1476 0066 5968     		ldr	r1, [r3, #4]
 1477 0068 1C22     		mov	r2, #28
 1478 006a 0A43     		orr	r2, r1
 1479 006c 5A60     		str	r2, [r3, #4]
 1480              	.L114:
1156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 1481              		.loc 1 1156 0
 1482 006e 2368     		ldr	r3, [r4]
 1483 0070 9968     		ldr	r1, [r3, #8]
 1484 0072 0422     		mov	r2, #4
 1485 0074 0A43     		orr	r2, r1
 1486 0076 9A60     		str	r2, [r3, #8]
 1487 0078 02E0     		b	.L110
 1488              	.LVL103:
 1489              	.L115:
1161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 1490              		.loc 1 1161 0
 1491 007a 0220     		mov	r0, #2
 1492              	.LVL104:
1165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 1493              		.loc 1 1165 0
 1494 007c 00E0     		b	.L110
 1495              	.LVL105:
 1496              	.L116:
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1497              		.loc 1 1105 0
 1498 007e 0220     		mov	r0, #2
 1499              	.LVL106:
 1500              	.L110:
1166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1501              		.loc 1 1166 0
 1502              		@ sp needed
 1503              	.LVL107:
 1504 0080 10BD     		pop	{r4, pc}
 1505              	.L120:
 1506 0082 C046     		.align	2
 1507              	.L119:
 1508 0084 FEF0FFFF 		.word	-3842
 1509              		.cfi_endproc
 1510              	.LFE44:
 1512              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1513              		.align	2
 1514              		.global	HAL_ADC_Stop_IT
 1515              		.code	16
 1516              		.thumb_func
 1518              	HAL_ADC_Stop_IT:
 1519              	.LFB45:
1176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1520              		.loc 1 1176 0
 1521              		.cfi_startproc
 1522              	.LVL108:
 1523 0000 10B5     		push	{r4, lr}
 1524              	.LCFI12:
 1525              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cchPcaY2.s 			page 70


 1526              		.cfi_offset 4, -8
 1527              		.cfi_offset 14, -4
 1528 0002 041C     		mov	r4, r0
 1529              	.LVL109:
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1530              		.loc 1 1183 0
 1531 0004 5423     		mov	r3, #84
 1532 0006 C35C     		ldrb	r3, [r0, r3]
 1533 0008 012B     		cmp	r3, #1
 1534 000a 1AD0     		beq	.L124
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1535              		.loc 1 1183 0 is_stmt 0 discriminator 2
 1536 000c 0122     		mov	r2, #1
 1537 000e 5423     		mov	r3, #84
 1538 0010 C254     		strb	r2, [r0, r3]
1186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 1539              		.loc 1 1186 0 is_stmt 1 discriminator 2
 1540 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1541              	.LVL110:
1189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1542              		.loc 1 1189 0 discriminator 2
 1543 0016 0028     		cmp	r0, #0
 1544 0018 0FD1     		bne	.L123
1193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 1545              		.loc 1 1193 0
 1546 001a 2368     		ldr	r3, [r4]
 1547 001c 5A68     		ldr	r2, [r3, #4]
 1548 001e 1C21     		mov	r1, #28
 1549 0020 8A43     		bic	r2, r1
 1550 0022 5A60     		str	r2, [r3, #4]
1196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 1551              		.loc 1 1196 0
 1552 0024 201C     		mov	r0, r4
 1553              	.LVL111:
 1554 0026 FFF7FEFF 		bl	ADC_Disable
 1555              	.LVL112:
1199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1556              		.loc 1 1199 0
 1557 002a 0028     		cmp	r0, #0
 1558 002c 05D1     		bne	.L123
1202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1559              		.loc 1 1202 0
 1560 002e A26D     		ldr	r2, [r4, #88]
 1561 0030 054B     		ldr	r3, .L125
 1562 0032 1340     		and	r3, r2
 1563 0034 0122     		mov	r2, #1
 1564 0036 1343     		orr	r3, r2
 1565 0038 A365     		str	r3, [r4, #88]
 1566              	.LVL113:
 1567              	.L123:
1209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1568              		.loc 1 1209 0
 1569 003a 0022     		mov	r2, #0
 1570 003c 5423     		mov	r3, #84
 1571 003e E254     		strb	r2, [r4, r3]
1212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 1572              		.loc 1 1212 0
ARM GAS  /tmp/cchPcaY2.s 			page 71


 1573 0040 00E0     		b	.L122
 1574              	.LVL114:
 1575              	.L124:
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1576              		.loc 1 1183 0
 1577 0042 0220     		mov	r0, #2
 1578              	.LVL115:
 1579              	.L122:
1213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1580              		.loc 1 1213 0
 1581              		@ sp needed
 1582              	.LVL116:
 1583 0044 10BD     		pop	{r4, pc}
 1584              	.L126:
 1585 0046 C046     		.align	2
 1586              	.L125:
 1587 0048 FEFEFFFF 		.word	-258
 1588              		.cfi_endproc
 1589              	.LFE45:
 1591              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1592              		.align	2
 1593              		.global	HAL_ADC_Start_DMA
 1594              		.code	16
 1595              		.thumb_func
 1597              	HAL_ADC_Start_DMA:
 1598              	.LFB46:
1226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1599              		.loc 1 1226 0
 1600              		.cfi_startproc
 1601              	.LVL117:
 1602 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1603              	.LCFI13:
 1604              		.cfi_def_cfa_offset 24
 1605              		.cfi_offset 3, -24
 1606              		.cfi_offset 4, -20
 1607              		.cfi_offset 5, -16
 1608              		.cfi_offset 6, -12
 1609              		.cfi_offset 7, -8
 1610              		.cfi_offset 14, -4
 1611 0002 041C     		mov	r4, r0
 1612 0004 0F1C     		mov	r7, r1
 1613 0006 161C     		mov	r6, r2
 1614              	.LVL118:
1233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1615              		.loc 1 1233 0
 1616 0008 0068     		ldr	r0, [r0]
 1617              	.LVL119:
 1618 000a 8068     		ldr	r0, [r0, #8]
 1619 000c 4307     		lsl	r3, r0, #29
 1620 000e 3FD4     		bmi	.L131
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1621              		.loc 1 1236 0
 1622 0010 5423     		mov	r3, #84
 1623 0012 E35C     		ldrb	r3, [r4, r3]
 1624 0014 012B     		cmp	r3, #1
 1625 0016 3ED0     		beq	.L132
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
ARM GAS  /tmp/cchPcaY2.s 			page 72


 1626              		.loc 1 1236 0 is_stmt 0 discriminator 2
 1627 0018 0122     		mov	r2, #1
 1628              	.LVL120:
 1629 001a 5423     		mov	r3, #84
 1630 001c E254     		strb	r2, [r4, r3]
1241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 1631              		.loc 1 1241 0 is_stmt 1 discriminator 2
 1632 001e E369     		ldr	r3, [r4, #28]
 1633 0020 012B     		cmp	r3, #1
 1634 0022 04D0     		beq	.L133
1243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 1635              		.loc 1 1243 0
 1636 0024 201C     		mov	r0, r4
 1637 0026 FFF7FEFF 		bl	ADC_Enable
 1638              	.LVL121:
 1639 002a 051C     		mov	r5, r0
 1640              	.LVL122:
 1641 002c 00E0     		b	.L130
 1642              	.LVL123:
 1643              	.L133:
1227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1644              		.loc 1 1227 0
 1645 002e 0025     		mov	r5, #0
 1646              	.LVL124:
 1647              	.L130:
1247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1648              		.loc 1 1247 0
 1649 0030 002D     		cmp	r5, #0
 1650 0032 2ED1     		bne	.L128
1252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1651              		.loc 1 1252 0
 1652 0034 A26D     		ldr	r2, [r4, #88]
 1653 0036 194B     		ldr	r3, .L134
 1654 0038 1340     		and	r3, r2
 1655 003a 8022     		mov	r2, #128
 1656 003c 5200     		lsl	r2, r2, #1
 1657 003e 1343     		orr	r3, r2
 1658 0040 A365     		str	r3, [r4, #88]
1257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1659              		.loc 1 1257 0
 1660 0042 0023     		mov	r3, #0
 1661 0044 E365     		str	r3, [r4, #92]
1262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1662              		.loc 1 1262 0
 1663 0046 5422     		mov	r2, #84
 1664 0048 A354     		strb	r3, [r4, r2]
1265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1665              		.loc 1 1265 0
 1666 004a 236D     		ldr	r3, [r4, #80]
 1667 004c 144A     		ldr	r2, .L134+4
 1668 004e DA62     		str	r2, [r3, #44]
1268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1669              		.loc 1 1268 0
 1670 0050 236D     		ldr	r3, [r4, #80]
 1671 0052 144A     		ldr	r2, .L134+8
 1672 0054 1A63     		str	r2, [r3, #48]
1271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
ARM GAS  /tmp/cchPcaY2.s 			page 73


 1673              		.loc 1 1271 0
 1674 0056 236D     		ldr	r3, [r4, #80]
 1675 0058 134A     		ldr	r2, .L134+12
 1676 005a 5A63     		str	r2, [r3, #52]
1280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1677              		.loc 1 1280 0
 1678 005c 2368     		ldr	r3, [r4]
 1679 005e 1C22     		mov	r2, #28
 1680 0060 1A60     		str	r2, [r3]
1283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 1681              		.loc 1 1283 0
 1682 0062 2368     		ldr	r3, [r4]
 1683 0064 5968     		ldr	r1, [r3, #4]
 1684 0066 1022     		mov	r2, #16
 1685 0068 0A43     		orr	r2, r1
 1686 006a 5A60     		str	r2, [r3, #4]
1286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 1687              		.loc 1 1286 0
 1688 006c 2368     		ldr	r3, [r4]
 1689 006e D968     		ldr	r1, [r3, #12]
 1690 0070 0122     		mov	r2, #1
 1691 0072 0A43     		orr	r2, r1
 1692 0074 DA60     		str	r2, [r3, #12]
1289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1693              		.loc 1 1289 0
 1694 0076 2168     		ldr	r1, [r4]
 1695 0078 4031     		add	r1, r1, #64
 1696 007a 206D     		ldr	r0, [r4, #80]
 1697 007c 3A1C     		mov	r2, r7
 1698 007e 331C     		mov	r3, r6
 1699 0080 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1700              	.LVL125:
1295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 1701              		.loc 1 1295 0
 1702 0084 2368     		ldr	r3, [r4]
 1703 0086 9968     		ldr	r1, [r3, #8]
 1704 0088 0422     		mov	r2, #4
 1705 008a 0A43     		orr	r2, r1
 1706 008c 9A60     		str	r2, [r3, #8]
 1707 008e 00E0     		b	.L128
 1708              	.LVL126:
 1709              	.L131:
1300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 1710              		.loc 1 1300 0
 1711 0090 0225     		mov	r5, #2
 1712              	.LVL127:
 1713              	.L128:
1304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 1714              		.loc 1 1304 0
 1715 0092 281C     		mov	r0, r5
 1716 0094 00E0     		b	.L129
 1717              	.LVL128:
 1718              	.L132:
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1719              		.loc 1 1236 0
 1720 0096 0220     		mov	r0, #2
 1721              	.LVL129:
ARM GAS  /tmp/cchPcaY2.s 			page 74


 1722              	.L129:
1305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1723              		.loc 1 1305 0
 1724              		@ sp needed
 1725              	.LVL130:
 1726              	.LVL131:
 1727              	.LVL132:
 1728 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1729              	.L135:
 1730 009a C046     		.align	2
 1731              	.L134:
 1732 009c FEF0FFFF 		.word	-3842
 1733 00a0 00000000 		.word	ADC_DMAConvCplt
 1734 00a4 00000000 		.word	ADC_DMAHalfConvCplt
 1735 00a8 00000000 		.word	ADC_DMAError
 1736              		.cfi_endproc
 1737              	.LFE46:
 1739              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1740              		.align	2
 1741              		.global	HAL_ADC_Stop_DMA
 1742              		.code	16
 1743              		.thumb_func
 1745              	HAL_ADC_Stop_DMA:
 1746              	.LFB47:
1316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1747              		.loc 1 1316 0
 1748              		.cfi_startproc
 1749              	.LVL133:
 1750 0000 38B5     		push	{r3, r4, r5, lr}
 1751              	.LCFI14:
 1752              		.cfi_def_cfa_offset 16
 1753              		.cfi_offset 3, -16
 1754              		.cfi_offset 4, -12
 1755              		.cfi_offset 5, -8
 1756              		.cfi_offset 14, -4
 1757 0002 041C     		mov	r4, r0
 1758              	.LVL134:
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1759              		.loc 1 1323 0
 1760 0004 5423     		mov	r3, #84
 1761 0006 C35C     		ldrb	r3, [r0, r3]
 1762 0008 012B     		cmp	r3, #1
 1763 000a 30D0     		beq	.L142
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1764              		.loc 1 1323 0 is_stmt 0 discriminator 2
 1765 000c 0122     		mov	r2, #1
 1766 000e 5423     		mov	r3, #84
 1767 0010 C254     		strb	r2, [r0, r3]
1326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 1768              		.loc 1 1326 0 is_stmt 1 discriminator 2
 1769 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1770              	.LVL135:
 1771 0016 051E     		sub	r5, r0, #0
 1772              	.LVL136:
1329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1773              		.loc 1 1329 0 discriminator 2
 1774 0018 24D1     		bne	.L138
ARM GAS  /tmp/cchPcaY2.s 			page 75


1332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 1775              		.loc 1 1332 0
 1776 001a 2368     		ldr	r3, [r4]
 1777 001c DA68     		ldr	r2, [r3, #12]
 1778 001e 0121     		mov	r1, #1
 1779 0020 8A43     		bic	r2, r1
 1780 0022 DA60     		str	r2, [r3, #12]
1336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 1781              		.loc 1 1336 0
 1782 0024 206D     		ldr	r0, [r4, #80]
 1783              	.LVL137:
 1784 0026 FFF7FEFF 		bl	HAL_DMA_Abort
 1785              	.LVL138:
 1786 002a 051E     		sub	r5, r0, #0
 1787              	.LVL139:
1339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
 1788              		.loc 1 1339 0
 1789 002c 03D0     		beq	.L139
1342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 1790              		.loc 1 1342 0
 1791 002e A26D     		ldr	r2, [r4, #88]
 1792 0030 4023     		mov	r3, #64
 1793 0032 1343     		orr	r3, r2
 1794 0034 A365     		str	r3, [r4, #88]
 1795              	.L139:
1346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 1796              		.loc 1 1346 0
 1797 0036 2368     		ldr	r3, [r4]
 1798 0038 5A68     		ldr	r2, [r3, #4]
 1799 003a 1021     		mov	r1, #16
 1800 003c 8A43     		bic	r2, r1
 1801 003e 5A60     		str	r2, [r3, #4]
1351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1802              		.loc 1 1351 0
 1803 0040 002D     		cmp	r5, #0
 1804 0042 04D1     		bne	.L140
1353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
 1805              		.loc 1 1353 0
 1806 0044 201C     		mov	r0, r4
 1807              	.LVL140:
 1808 0046 FFF7FEFF 		bl	ADC_Disable
 1809              	.LVL141:
 1810 004a 051C     		mov	r5, r0
 1811              	.LVL142:
 1812 004c 02E0     		b	.L141
 1813              	.L140:
1357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_Disable(hadc);
 1814              		.loc 1 1357 0
 1815 004e 201C     		mov	r0, r4
 1816              	.LVL143:
 1817 0050 FFF7FEFF 		bl	ADC_Disable
 1818              	.LVL144:
 1819              	.L141:
1361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1820              		.loc 1 1361 0
 1821 0054 002D     		cmp	r5, #0
 1822 0056 05D1     		bne	.L138
ARM GAS  /tmp/cchPcaY2.s 			page 76


1364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1823              		.loc 1 1364 0
 1824 0058 A26D     		ldr	r2, [r4, #88]
 1825 005a 064B     		ldr	r3, .L143
 1826 005c 1340     		and	r3, r2
 1827 005e 0122     		mov	r2, #1
 1828 0060 1343     		orr	r3, r2
 1829 0062 A365     		str	r3, [r4, #88]
 1830              	.LVL145:
 1831              	.L138:
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1832              		.loc 1 1372 0
 1833 0064 0022     		mov	r2, #0
 1834 0066 5423     		mov	r3, #84
 1835 0068 E254     		strb	r2, [r4, r3]
1375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 1836              		.loc 1 1375 0
 1837 006a 281C     		mov	r0, r5
 1838 006c 00E0     		b	.L137
 1839              	.LVL146:
 1840              	.L142:
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1841              		.loc 1 1323 0
 1842 006e 0220     		mov	r0, #2
 1843              	.LVL147:
 1844              	.L137:
1376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1845              		.loc 1 1376 0
 1846              		@ sp needed
 1847              	.LVL148:
 1848 0070 38BD     		pop	{r3, r4, r5, pc}
 1849              	.L144:
 1850 0072 C046     		.align	2
 1851              	.L143:
 1852 0074 FEFEFFFF 		.word	-258
 1853              		.cfi_endproc
 1854              	.LFE47:
 1856              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1857              		.align	2
 1858              		.global	HAL_ADC_GetValue
 1859              		.code	16
 1860              		.thumb_func
 1862              	HAL_ADC_GetValue:
 1863              	.LFB48:
1398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1864              		.loc 1 1398 0
 1865              		.cfi_startproc
 1866              	.LVL149:
1406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->Instance->DR;
 1867              		.loc 1 1406 0
 1868 0000 0368     		ldr	r3, [r0]
 1869 0002 186C     		ldr	r0, [r3, #64]
 1870              	.LVL150:
1407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1871              		.loc 1 1407 0
 1872              		@ sp needed
 1873 0004 7047     		bx	lr
ARM GAS  /tmp/cchPcaY2.s 			page 77


 1874              		.cfi_endproc
 1875              	.LFE48:
 1877 0006 C046     		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1878              		.align	2
 1879              		.weak	HAL_ADC_ConvCpltCallback
 1880              		.code	16
 1881              		.thumb_func
 1883              	HAL_ADC_ConvCpltCallback:
 1884              	.LFB50:
1537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1885              		.loc 1 1537 0
 1886              		.cfi_startproc
 1887              	.LVL151:
1544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1888              		.loc 1 1544 0
 1889              		@ sp needed
 1890 0000 7047     		bx	lr
 1891              		.cfi_endproc
 1892              	.LFE50:
 1894 0002 C046     		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1895              		.align	2
 1896              		.code	16
 1897              		.thumb_func
 1899              	ADC_DMAConvCplt:
 1900              	.LFB61:
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 1901              		.loc 1 2085 0
 1902              		.cfi_startproc
 1903              	.LVL152:
 1904 0000 08B5     		push	{r3, lr}
 1905              	.LCFI15:
 1906              		.cfi_def_cfa_offset 8
 1907              		.cfi_offset 3, -8
 1908              		.cfi_offset 14, -4
2087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1909              		.loc 1 2087 0
 1910 0002 836A     		ldr	r3, [r0, #40]
 1911              	.LVL153:
2090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 1912              		.loc 1 2090 0
 1913 0004 9A6D     		ldr	r2, [r3, #88]
 1914 0006 5021     		mov	r1, #80
 1915 0008 1142     		tst	r1, r2
 1916 000a 2AD1     		bne	.L148
2093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1917              		.loc 1 2093 0
 1918 000c 996D     		ldr	r1, [r3, #88]
 1919 000e 8022     		mov	r2, #128
 1920 0010 9200     		lsl	r2, r2, #2
 1921 0012 0A43     		orr	r2, r1
 1922 0014 9A65     		str	r2, [r3, #88]
2097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1923              		.loc 1 2097 0
 1924 0016 1A68     		ldr	r2, [r3]
 1925 0018 D068     		ldr	r0, [r2, #12]
 1926              	.LVL154:
 1927 001a C021     		mov	r1, #192
ARM GAS  /tmp/cchPcaY2.s 			page 78


 1928 001c 0901     		lsl	r1, r1, #4
 1929 001e 0842     		tst	r0, r1
 1930 0020 1BD1     		bne	.L149
2097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1931              		.loc 1 2097 0 is_stmt 0 discriminator 1
 1932 0022 186A     		ldr	r0, [r3, #32]
 1933 0024 0028     		cmp	r0, #0
 1934 0026 18D1     		bne	.L149
2101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 1935              		.loc 1 2101 0 is_stmt 1
 1936 0028 1168     		ldr	r1, [r2]
 1937 002a 0807     		lsl	r0, r1, #28
 1938 002c 15D5     		bpl	.L149
2105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1939              		.loc 1 2105 0
 1940 002e 9168     		ldr	r1, [r2, #8]
 1941 0030 4807     		lsl	r0, r1, #29
 1942 0032 0AD4     		bmi	.L150
2111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 1943              		.loc 1 2111 0
 1944 0034 5168     		ldr	r1, [r2, #4]
 1945 0036 0C20     		mov	r0, #12
 1946 0038 8143     		bic	r1, r0
 1947 003a 5160     		str	r1, [r2, #4]
2114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
 1948              		.loc 1 2114 0
 1949 003c 996D     		ldr	r1, [r3, #88]
 1950 003e 0B4A     		ldr	r2, .L152
 1951 0040 0A40     		and	r2, r1
 1952 0042 0121     		mov	r1, #1
 1953 0044 0A43     		orr	r2, r1
 1954 0046 9A65     		str	r2, [r3, #88]
 1955 0048 07E0     		b	.L149
 1956              	.L150:
2121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1957              		.loc 1 2121 0
 1958 004a 996D     		ldr	r1, [r3, #88]
 1959 004c 2022     		mov	r2, #32
 1960 004e 0A43     		orr	r2, r1
 1961 0050 9A65     		str	r2, [r3, #88]
2124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 1962              		.loc 1 2124 0
 1963 0052 D96D     		ldr	r1, [r3, #92]
 1964 0054 0122     		mov	r2, #1
 1965 0056 0A43     		orr	r2, r1
 1966 0058 DA65     		str	r2, [r3, #92]
 1967              	.L149:
2130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 1968              		.loc 1 2130 0 discriminator 1
 1969 005a 181C     		mov	r0, r3
 1970 005c FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1971              	.LVL155:
 1972 0060 02E0     		b	.L147
 1973              	.LVL156:
 1974              	.L148:
2135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 1975              		.loc 1 2135 0
ARM GAS  /tmp/cchPcaY2.s 			page 79


 1976 0062 1B6D     		ldr	r3, [r3, #80]
 1977              	.LVL157:
 1978 0064 5B6B     		ldr	r3, [r3, #52]
 1979 0066 9847     		blx	r3
 1980              	.LVL158:
 1981              	.L147:
2137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1982              		.loc 1 2137 0
 1983              		@ sp needed
 1984 0068 08BD     		pop	{r3, pc}
 1985              	.L153:
 1986 006a C046     		.align	2
 1987              	.L152:
 1988 006c FEFEFFFF 		.word	-258
 1989              		.cfi_endproc
 1990              	.LFE61:
 1992              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1993              		.align	2
 1994              		.weak	HAL_ADC_ConvHalfCpltCallback
 1995              		.code	16
 1996              		.thumb_func
 1998              	HAL_ADC_ConvHalfCpltCallback:
 1999              	.LFB51:
1552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2000              		.loc 1 1552 0
 2001              		.cfi_startproc
 2002              	.LVL159:
1559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2003              		.loc 1 1559 0
 2004              		@ sp needed
 2005 0000 7047     		bx	lr
 2006              		.cfi_endproc
 2007              	.LFE51:
 2009 0002 C046     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 2010              		.align	2
 2011              		.code	16
 2012              		.thumb_func
 2014              	ADC_DMAHalfConvCplt:
 2015              	.LFB62:
2145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2016              		.loc 1 2145 0
 2017              		.cfi_startproc
 2018              	.LVL160:
 2019 0000 08B5     		push	{r3, lr}
 2020              	.LCFI16:
 2021              		.cfi_def_cfa_offset 8
 2022              		.cfi_offset 3, -8
 2023              		.cfi_offset 14, -4
2147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2024              		.loc 1 2147 0
 2025 0002 806A     		ldr	r0, [r0, #40]
 2026              	.LVL161:
2150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 2027              		.loc 1 2150 0
 2028 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 2029              	.LVL162:
2151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
ARM GAS  /tmp/cchPcaY2.s 			page 80


 2030              		.loc 1 2151 0
 2031              		@ sp needed
 2032 0008 08BD     		pop	{r3, pc}
 2033              		.cfi_endproc
 2034              	.LFE62:
 2036 000a C046     		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2037              		.align	2
 2038              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2039              		.code	16
 2040              		.thumb_func
 2042              	HAL_ADC_LevelOutOfWindowCallback:
 2043              	.LFB52:
1567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2044              		.loc 1 1567 0
 2045              		.cfi_startproc
 2046              	.LVL163:
1574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2047              		.loc 1 1574 0
 2048              		@ sp needed
 2049 0000 7047     		bx	lr
 2050              		.cfi_endproc
 2051              	.LFE52:
 2053 0002 C046     		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2054              		.align	2
 2055              		.weak	HAL_ADC_ErrorCallback
 2056              		.code	16
 2057              		.thumb_func
 2059              	HAL_ADC_ErrorCallback:
 2060              	.LFB53:
1589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2061              		.loc 1 1589 0
 2062              		.cfi_startproc
 2063              	.LVL164:
1596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2064              		.loc 1 1596 0
 2065              		@ sp needed
 2066 0000 7047     		bx	lr
 2067              		.cfi_endproc
 2068              	.LFE53:
 2070 0002 C046     		.section	.text.ADC_DMAError,"ax",%progbits
 2071              		.align	2
 2072              		.code	16
 2073              		.thumb_func
 2075              	ADC_DMAError:
 2076              	.LFB63:
2159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2077              		.loc 1 2159 0
 2078              		.cfi_startproc
 2079              	.LVL165:
 2080 0000 08B5     		push	{r3, lr}
 2081              	.LCFI17:
 2082              		.cfi_def_cfa_offset 8
 2083              		.cfi_offset 3, -8
 2084              		.cfi_offset 14, -4
2161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2085              		.loc 1 2161 0
 2086 0002 806A     		ldr	r0, [r0, #40]
ARM GAS  /tmp/cchPcaY2.s 			page 81


 2087              	.LVL166:
2164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2088              		.loc 1 2164 0
 2089 0004 826D     		ldr	r2, [r0, #88]
 2090 0006 4023     		mov	r3, #64
 2091 0008 1343     		orr	r3, r2
 2092 000a 8365     		str	r3, [r0, #88]
2167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 2093              		.loc 1 2167 0
 2094 000c C26D     		ldr	r2, [r0, #92]
 2095 000e 0423     		mov	r3, #4
 2096 0010 1343     		orr	r3, r2
 2097 0012 C365     		str	r3, [r0, #92]
2170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 2098              		.loc 1 2170 0
 2099 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2100              	.LVL167:
2171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2101              		.loc 1 2171 0
 2102              		@ sp needed
 2103 0018 08BD     		pop	{r3, pc}
 2104              		.cfi_endproc
 2105              	.LFE63:
 2107 001a C046     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2108              		.align	2
 2109              		.global	HAL_ADC_IRQHandler
 2110              		.code	16
 2111              		.thumb_func
 2113              	HAL_ADC_IRQHandler:
 2114              	.LFB49:
1415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2115              		.loc 1 1415 0
 2116              		.cfi_startproc
 2117              	.LVL168:
 2118 0000 10B5     		push	{r4, lr}
 2119              	.LCFI18:
 2120              		.cfi_def_cfa_offset 8
 2121              		.cfi_offset 4, -8
 2122              		.cfi_offset 14, -4
 2123 0002 041C     		mov	r4, r0
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 2124              		.loc 1 1422 0
 2125 0004 0368     		ldr	r3, [r0]
 2126 0006 1A68     		ldr	r2, [r3]
 2127 0008 5107     		lsl	r1, r2, #29
 2128 000a 02D5     		bpl	.L160
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 2129              		.loc 1 1422 0 is_stmt 0 discriminator 1
 2130 000c 5A68     		ldr	r2, [r3, #4]
 2131 000e 5107     		lsl	r1, r2, #29
 2132 0010 05D4     		bmi	.L161
 2133              	.L160:
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2134              		.loc 1 1423 0 is_stmt 1 discriminator 2
 2135 0012 1A68     		ldr	r2, [r3]
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 2136              		.loc 1 1422 0 discriminator 2
ARM GAS  /tmp/cchPcaY2.s 			page 82


 2137 0014 1107     		lsl	r1, r2, #28
 2138 0016 34D5     		bpl	.L162
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2139              		.loc 1 1423 0
 2140 0018 5A68     		ldr	r2, [r3, #4]
 2141 001a 1107     		lsl	r1, r2, #28
 2142 001c 31D5     		bpl	.L162
 2143              	.L161:
1426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2144              		.loc 1 1426 0
 2145 001e A26D     		ldr	r2, [r4, #88]
 2146 0020 D106     		lsl	r1, r2, #27
 2147 0022 04D4     		bmi	.L163
1429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 2148              		.loc 1 1429 0
 2149 0024 A16D     		ldr	r1, [r4, #88]
 2150 0026 8022     		mov	r2, #128
 2151 0028 9200     		lsl	r2, r2, #2
 2152 002a 0A43     		orr	r2, r1
 2153 002c A265     		str	r2, [r4, #88]
 2154              	.L163:
1434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2155              		.loc 1 1434 0
 2156 002e D968     		ldr	r1, [r3, #12]
 2157 0030 C022     		mov	r2, #192
 2158 0032 1201     		lsl	r2, r2, #4
 2159 0034 1142     		tst	r1, r2
 2160 0036 1BD1     		bne	.L164
1434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2161              		.loc 1 1434 0 is_stmt 0 discriminator 1
 2162 0038 226A     		ldr	r2, [r4, #32]
 2163 003a 002A     		cmp	r2, #0
 2164 003c 18D1     		bne	.L164
1438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 2165              		.loc 1 1438 0 is_stmt 1
 2166 003e 1A68     		ldr	r2, [r3]
 2167 0040 1107     		lsl	r1, r2, #28
 2168 0042 15D5     		bpl	.L164
1442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2169              		.loc 1 1442 0
 2170 0044 9A68     		ldr	r2, [r3, #8]
 2171 0046 5107     		lsl	r1, r2, #29
 2172 0048 0AD4     		bmi	.L165
1448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 2173              		.loc 1 1448 0
 2174 004a 5A68     		ldr	r2, [r3, #4]
 2175 004c 0C21     		mov	r1, #12
 2176 004e 8A43     		bic	r2, r1
 2177 0050 5A60     		str	r2, [r3, #4]
1451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
 2178              		.loc 1 1451 0
 2179 0052 A26D     		ldr	r2, [r4, #88]
 2180 0054 214B     		ldr	r3, .L170
 2181 0056 1340     		and	r3, r2
 2182 0058 0122     		mov	r2, #1
 2183 005a 1343     		orr	r3, r2
 2184 005c A365     		str	r3, [r4, #88]
ARM GAS  /tmp/cchPcaY2.s 			page 83


 2185 005e 07E0     		b	.L164
 2186              	.L165:
1458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2187              		.loc 1 1458 0
 2188 0060 A26D     		ldr	r2, [r4, #88]
 2189 0062 2023     		mov	r3, #32
 2190 0064 1343     		orr	r3, r2
 2191 0066 A365     		str	r3, [r4, #88]
1461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 2192              		.loc 1 1461 0
 2193 0068 E26D     		ldr	r2, [r4, #92]
 2194 006a 0123     		mov	r3, #1
 2195 006c 1343     		orr	r3, r2
 2196 006e E365     		str	r3, [r4, #92]
 2197              	.L164:
1470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 2198              		.loc 1 1470 0
 2199 0070 201C     		mov	r0, r4
 2200              	.LVL169:
 2201 0072 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2202              	.LVL170:
1482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoWait != ENABLE)
 2203              		.loc 1 1482 0
 2204 0076 A269     		ldr	r2, [r4, #24]
 2205 0078 012A     		cmp	r2, #1
 2206 007a 02D0     		beq	.L162
1484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 2207              		.loc 1 1484 0
 2208 007c 2368     		ldr	r3, [r4]
 2209 007e 0C22     		mov	r2, #12
 2210 0080 1A60     		str	r2, [r3]
 2211              	.L162:
1489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 2212              		.loc 1 1489 0
 2213 0082 2368     		ldr	r3, [r4]
 2214 0084 1A68     		ldr	r2, [r3]
 2215 0086 1106     		lsl	r1, r2, #24
 2216 0088 0DD5     		bpl	.L166
1489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 2217              		.loc 1 1489 0 is_stmt 0 discriminator 1
 2218 008a 5B68     		ldr	r3, [r3, #4]
 2219 008c 1A06     		lsl	r2, r3, #24
 2220 008e 0AD5     		bpl	.L166
1492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2221              		.loc 1 1492 0 is_stmt 1
 2222 0090 A26D     		ldr	r2, [r4, #88]
 2223 0092 8023     		mov	r3, #128
 2224 0094 5B02     		lsl	r3, r3, #9
 2225 0096 1343     		orr	r3, r2
 2226 0098 A365     		str	r3, [r4, #88]
1495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
 2227              		.loc 1 1495 0
 2228 009a 201C     		mov	r0, r4
 2229 009c FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 2230              	.LVL171:
1498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 2231              		.loc 1 1498 0
ARM GAS  /tmp/cchPcaY2.s 			page 84


 2232 00a0 2368     		ldr	r3, [r4]
 2233 00a2 8022     		mov	r2, #128
 2234 00a4 1A60     		str	r2, [r3]
 2235              	.L166:
1504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 2236              		.loc 1 1504 0
 2237 00a6 2368     		ldr	r3, [r4]
 2238 00a8 1A68     		ldr	r2, [r3]
 2239 00aa D106     		lsl	r1, r2, #27
 2240 00ac 14D5     		bpl	.L159
1504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 2241              		.loc 1 1504 0 is_stmt 0 discriminator 1
 2242 00ae 5A68     		ldr	r2, [r3, #4]
 2243 00b0 D106     		lsl	r1, r2, #27
 2244 00b2 11D5     		bpl	.L159
1512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 2245              		.loc 1 1512 0 is_stmt 1
 2246 00b4 626B     		ldr	r2, [r4, #52]
 2247 00b6 002A     		cmp	r2, #0
 2248 00b8 02D0     		beq	.L168
1513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2249              		.loc 1 1513 0 discriminator 1
 2250 00ba DA68     		ldr	r2, [r3, #12]
1512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 2251              		.loc 1 1512 0 discriminator 1
 2252 00bc D107     		lsl	r1, r2, #31
 2253 00be 08D5     		bpl	.L169
 2254              	.L168:
1516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 2255              		.loc 1 1516 0
 2256 00c0 E16D     		ldr	r1, [r4, #92]
 2257 00c2 0222     		mov	r2, #2
 2258 00c4 0A43     		orr	r2, r1
 2259 00c6 E265     		str	r2, [r4, #92]
1519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 2260              		.loc 1 1519 0
 2261 00c8 1022     		mov	r2, #16
 2262 00ca 1A60     		str	r2, [r3]
1522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
 2263              		.loc 1 1522 0
 2264 00cc 201C     		mov	r0, r4
 2265 00ce FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2266              	.LVL172:
 2267              	.L169:
1526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 2268              		.loc 1 1526 0
 2269 00d2 2368     		ldr	r3, [r4]
 2270 00d4 1022     		mov	r2, #16
 2271 00d6 1A60     		str	r2, [r3]
 2272              	.L159:
1529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2273              		.loc 1 1529 0
 2274              		@ sp needed
 2275              	.LVL173:
 2276 00d8 10BD     		pop	{r4, pc}
 2277              	.L171:
 2278 00da C046     		.align	2
ARM GAS  /tmp/cchPcaY2.s 			page 85


 2279              	.L170:
 2280 00dc FEFEFFFF 		.word	-258
 2281              		.cfi_endproc
 2282              	.LFE49:
 2284              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2285              		.align	2
 2286              		.global	HAL_ADC_ConfigChannel
 2287              		.code	16
 2288              		.thumb_func
 2290              	HAL_ADC_ConfigChannel:
 2291              	.LFB54:
1640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2292              		.loc 1 1640 0
 2293              		.cfi_startproc
 2294              	.LVL174:
 2295 0000 38B5     		push	{r3, r4, r5, lr}
 2296              	.LCFI19:
 2297              		.cfi_def_cfa_offset 16
 2298              		.cfi_offset 3, -16
 2299              		.cfi_offset 4, -12
 2300              		.cfi_offset 5, -8
 2301              		.cfi_offset 14, -4
 2302 0002 041C     		mov	r4, r0
 2303 0004 0D1C     		mov	r5, r1
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2304              		.loc 1 1647 0
 2305 0006 5423     		mov	r3, #84
 2306 0008 C35C     		ldrb	r3, [r0, r3]
 2307 000a 012B     		cmp	r3, #1
 2308 000c 4AD0     		beq	.L179
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2309              		.loc 1 1647 0 is_stmt 0 discriminator 2
 2310 000e 0122     		mov	r2, #1
 2311 0010 5423     		mov	r3, #84
 2312 0012 C254     		strb	r2, [r0, r3]
1654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 2313              		.loc 1 1654 0 is_stmt 1 discriminator 2
 2314 0014 0368     		ldr	r3, [r0]
 2315 0016 9A68     		ldr	r2, [r3, #8]
 2316 0018 5007     		lsl	r0, r2, #29
 2317 001a 08D5     		bpl	.L174
 2318              	.LVL175:
1657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2319              		.loc 1 1657 0
 2320 001c A26D     		ldr	r2, [r4, #88]
 2321 001e 2023     		mov	r3, #32
 2322 0020 1343     		orr	r3, r2
 2323 0022 A365     		str	r3, [r4, #88]
1659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 2324              		.loc 1 1659 0
 2325 0024 0022     		mov	r2, #0
 2326 0026 5423     		mov	r3, #84
 2327 0028 E254     		strb	r2, [r4, r3]
1660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 2328              		.loc 1 1660 0
 2329 002a 0120     		mov	r0, #1
 2330 002c 3BE0     		b	.L173
ARM GAS  /tmp/cchPcaY2.s 			page 86


 2331              	.L174:
1663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (sConfig->Rank != ADC_RANK_NONE)
 2332              		.loc 1 1663 0
 2333 002e 1E4A     		ldr	r2, .L180
 2334 0030 4968     		ldr	r1, [r1, #4]
 2335              	.LVL176:
 2336 0032 9142     		cmp	r1, r2
 2337 0034 1BD0     		beq	.L175
1666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 2338              		.loc 1 1666 0
 2339 0036 996A     		ldr	r1, [r3, #40]
 2340 0038 2868     		ldr	r0, [r5]
 2341 003a 4203     		lsl	r2, r0, #13
 2342 003c 520B     		lsr	r2, r2, #13
 2343 003e 0A43     		orr	r2, r1
 2344 0040 9A62     		str	r2, [r3, #40]
1674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
 2345              		.loc 1 1674 0
 2346 0042 2968     		ldr	r1, [r5]
 2347 0044 4903     		lsl	r1, r1, #13
 2348 0046 08D5     		bpl	.L176
1676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_TSEN;   
 2349              		.loc 1 1676 0
 2350 0048 184B     		ldr	r3, .L180+4
 2351 004a 1968     		ldr	r1, [r3]
 2352 004c 8022     		mov	r2, #128
 2353 004e 1204     		lsl	r2, r2, #16
 2354 0050 0A43     		orr	r2, r1
 2355 0052 1A60     		str	r2, [r3]
1679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 2356              		.loc 1 1679 0
 2357 0054 0A20     		mov	r0, #10
 2358 0056 FFF7FEFF 		bl	ADC_DelayMicroSecond
 2359              	.LVL177:
 2360              	.L176:
1683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
 2361              		.loc 1 1683 0
 2362 005a 2B68     		ldr	r3, [r5]
 2363 005c 9A03     		lsl	r2, r3, #14
 2364 005e 1CD5     		bpl	.L177
1685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VREFEN;   
 2365              		.loc 1 1685 0
 2366 0060 124B     		ldr	r3, .L180+4
 2367 0062 1968     		ldr	r1, [r3]
 2368 0064 8022     		mov	r2, #128
 2369 0066 D203     		lsl	r2, r2, #15
 2370 0068 0A43     		orr	r2, r1
 2371 006a 1A60     		str	r2, [r3]
 2372 006c 15E0     		b	.L177
 2373              	.L175:
1700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 2374              		.loc 1 1700 0
 2375 006e 9A6A     		ldr	r2, [r3, #40]
 2376 0070 2868     		ldr	r0, [r5]
 2377 0072 4103     		lsl	r1, r0, #13
 2378 0074 490B     		lsr	r1, r1, #13
 2379 0076 8A43     		bic	r2, r1
ARM GAS  /tmp/cchPcaY2.s 			page 87


 2380 0078 9A62     		str	r2, [r3, #40]
1705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
 2381              		.loc 1 1705 0
 2382 007a 2968     		ldr	r1, [r5]
 2383 007c 4903     		lsl	r1, r1, #13
 2384 007e 04D5     		bpl	.L178
1707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_TSEN;   
 2385              		.loc 1 1707 0
 2386 0080 0A4B     		ldr	r3, .L180+4
 2387 0082 1968     		ldr	r1, [r3]
 2388 0084 0A4A     		ldr	r2, .L180+8
 2389 0086 0A40     		and	r2, r1
 2390 0088 1A60     		str	r2, [r3]
 2391              	.L178:
1711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
 2392              		.loc 1 1711 0
 2393 008a 2B68     		ldr	r3, [r5]
 2394 008c 9A03     		lsl	r2, r3, #14
 2395 008e 04D5     		bpl	.L177
1713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VREFEN;   
 2396              		.loc 1 1713 0
 2397 0090 064B     		ldr	r3, .L180+4
 2398 0092 1968     		ldr	r1, [r3]
 2399 0094 074A     		ldr	r2, .L180+12
 2400 0096 0A40     		and	r2, r1
 2401 0098 1A60     		str	r2, [r3]
 2402              	.L177:
1726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2403              		.loc 1 1726 0
 2404 009a 0022     		mov	r2, #0
 2405 009c 5423     		mov	r3, #84
 2406 009e E254     		strb	r2, [r4, r3]
1729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 2407              		.loc 1 1729 0
 2408 00a0 0020     		mov	r0, #0
 2409 00a2 00E0     		b	.L173
 2410              	.LVL178:
 2411              	.L179:
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2412              		.loc 1 1647 0
 2413 00a4 0220     		mov	r0, #2
 2414              	.LVL179:
 2415              	.L173:
1730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2416              		.loc 1 1730 0
 2417              		@ sp needed
 2418              	.LVL180:
 2419              	.LVL181:
 2420 00a6 38BD     		pop	{r3, r4, r5, pc}
 2421              	.L181:
 2422              		.align	2
 2423              	.L180:
 2424 00a8 01100000 		.word	4097
 2425 00ac 08270140 		.word	1073817352
 2426 00b0 FFFF7FFF 		.word	-8388609
 2427 00b4 FFFFBFFF 		.word	-4194305
 2428              		.cfi_endproc
ARM GAS  /tmp/cchPcaY2.s 			page 88


 2429              	.LFE54:
 2431              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2432              		.align	2
 2433              		.global	HAL_ADC_AnalogWDGConfig
 2434              		.code	16
 2435              		.thumb_func
 2437              	HAL_ADC_AnalogWDGConfig:
 2438              	.LFB55:
1755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2439              		.loc 1 1755 0
 2440              		.cfi_startproc
 2441              	.LVL182:
 2442 0000 30B5     		push	{r4, r5, lr}
 2443              	.LCFI20:
 2444              		.cfi_def_cfa_offset 12
 2445              		.cfi_offset 4, -12
 2446              		.cfi_offset 5, -8
 2447              		.cfi_offset 14, -4
 2448              	.LVL183:
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2449              		.loc 1 1776 0
 2450 0002 5423     		mov	r3, #84
 2451 0004 C35C     		ldrb	r3, [r0, r3]
 2452 0006 012B     		cmp	r3, #1
 2453 0008 46D0     		beq	.L188
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2454              		.loc 1 1776 0 is_stmt 0 discriminator 2
 2455 000a 0122     		mov	r2, #1
 2456 000c 5423     		mov	r3, #84
 2457 000e C254     		strb	r2, [r0, r3]
1783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2458              		.loc 1 1783 0 is_stmt 1 discriminator 2
 2459 0010 0368     		ldr	r3, [r0]
 2460 0012 9A68     		ldr	r2, [r3, #8]
 2461 0014 5407     		lsl	r4, r2, #29
 2462 0016 35D4     		bmi	.L184
1786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
 2463              		.loc 1 1786 0
 2464 0018 8D68     		ldr	r5, [r1, #8]
 2465 001a 012D     		cmp	r5, #1
 2466 001c 04D1     		bne	.L185
1789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 2467              		.loc 1 1789 0
 2468 001e 5C68     		ldr	r4, [r3, #4]
 2469 0020 8022     		mov	r2, #128
 2470 0022 2243     		orr	r2, r4
 2471 0024 5A60     		str	r2, [r3, #4]
 2472 0026 03E0     		b	.L186
 2473              	.L185:
1794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 2474              		.loc 1 1794 0
 2475 0028 5A68     		ldr	r2, [r3, #4]
 2476 002a 8024     		mov	r4, #128
 2477 002c A243     		bic	r2, r4
 2478 002e 5A60     		str	r2, [r3, #4]
 2479              	.L186:
1801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
ARM GAS  /tmp/cchPcaY2.s 			page 89


 2480              		.loc 1 1801 0 discriminator 1
 2481 0030 0368     		ldr	r3, [r0]
 2482 0032 DC68     		ldr	r4, [r3, #12]
 2483 0034 194A     		ldr	r2, .L189
 2484 0036 2240     		and	r2, r4
 2485 0038 DA60     		str	r2, [r3, #12]
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
 2486              		.loc 1 1805 0 discriminator 1
 2487 003a 0368     		ldr	r3, [r0]
 2488 003c DC68     		ldr	r4, [r3, #12]
1806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 2489              		.loc 1 1806 0 discriminator 1
 2490 003e F822     		mov	r2, #248
 2491 0040 D205     		lsl	r2, r2, #23
 2492 0042 4D68     		ldr	r5, [r1, #4]
 2493 0044 2A40     		and	r2, r5
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
 2494              		.loc 1 1805 0 discriminator 1
 2495 0046 0D68     		ldr	r5, [r1]
 2496 0048 2A43     		orr	r2, r5
 2497 004a 2243     		orr	r2, r4
 2498 004c DA60     		str	r2, [r3, #12]
1811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
 2499              		.loc 1 1811 0 discriminator 1
 2500 004e 0368     		ldr	r3, [r0]
 2501 0050 DC68     		ldr	r4, [r3, #12]
 2502 0052 1822     		mov	r2, #24
 2503 0054 1440     		and	r4, r2
 2504 0056 A408     		lsr	r4, r4, #2
 2505 0058 CD68     		ldr	r5, [r1, #12]
 2506 005a A540     		lsl	r5, r5, r4
 2507 005c 2C1C     		mov	r4, r5
 2508              	.LVL184:
1812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2509              		.loc 1 1812 0 discriminator 1
 2510 005e 0969     		ldr	r1, [r1, #16]
 2511              	.LVL185:
 2512 0060 DD68     		ldr	r5, [r3, #12]
 2513 0062 2A40     		and	r2, r5
 2514 0064 9208     		lsr	r2, r2, #2
 2515 0066 9140     		lsl	r1, r1, r2
 2516 0068 0A1C     		mov	r2, r1
 2517              	.LVL186:
1815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= (uint32_t) ~ (ADC_TR_HT | ADC_TR_LT);
 2518              		.loc 1 1815 0 discriminator 1
 2519 006a 1D6A     		ldr	r5, [r3, #32]
 2520 006c 0C49     		ldr	r1, .L189+4
 2521              	.LVL187:
 2522 006e 2940     		and	r1, r5
 2523 0070 1962     		str	r1, [r3, #32]
1818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted);
 2524              		.loc 1 1818 0 discriminator 1
 2525 0072 0368     		ldr	r3, [r0]
 2526 0074 2104     		lsl	r1, r4, #16
 2527 0076 1962     		str	r1, [r3, #32]
1820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR |= tmpAWDLowThresholdShifted;
 2528              		.loc 1 1820 0 discriminator 1
ARM GAS  /tmp/cchPcaY2.s 			page 90


 2529 0078 0368     		ldr	r3, [r0]
 2530 007a 196A     		ldr	r1, [r3, #32]
 2531 007c 0A43     		orr	r2, r1
 2532              	.LVL188:
 2533 007e 1A62     		str	r2, [r3, #32]
1756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2534              		.loc 1 1756 0 discriminator 1
 2535 0080 0023     		mov	r3, #0
 2536 0082 04E0     		b	.L187
 2537              	.LVL189:
 2538              	.L184:
1827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2539              		.loc 1 1827 0
 2540 0084 826D     		ldr	r2, [r0, #88]
 2541 0086 2023     		mov	r3, #32
 2542 0088 1343     		orr	r3, r2
 2543 008a 8365     		str	r3, [r0, #88]
 2544              	.LVL190:
1829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2545              		.loc 1 1829 0
 2546 008c 0123     		mov	r3, #1
 2547              	.LVL191:
 2548              	.L187:
1833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2549              		.loc 1 1833 0
 2550 008e 0021     		mov	r1, #0
 2551 0090 5422     		mov	r2, #84
 2552 0092 8154     		strb	r1, [r0, r2]
1836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 2553              		.loc 1 1836 0
 2554 0094 181C     		mov	r0, r3
 2555              	.LVL192:
 2556 0096 00E0     		b	.L183
 2557              	.LVL193:
 2558              	.L188:
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2559              		.loc 1 1776 0
 2560 0098 0220     		mov	r0, #2
 2561              	.LVL194:
 2562              	.L183:
1837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2563              		.loc 1 1837 0
 2564              		@ sp needed
 2565 009a 30BD     		pop	{r4, r5, pc}
 2566              	.L190:
 2567              		.align	2
 2568              	.L189:
 2569 009c FFFF3F83 		.word	-2092957697
 2570 00a0 00F000F0 		.word	-268374016
 2571              		.cfi_endproc
 2572              	.LFE55:
 2574              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2575              		.align	2
 2576              		.global	HAL_ADC_GetState
 2577              		.code	16
 2578              		.thumb_func
 2580              	HAL_ADC_GetState:
ARM GAS  /tmp/cchPcaY2.s 			page 91


 2581              	.LFB56:
1872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2582              		.loc 1 1872 0
 2583              		.cfi_startproc
 2584              	.LVL195:
1877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->State;
 2585              		.loc 1 1877 0
 2586 0000 806D     		ldr	r0, [r0, #88]
 2587              	.LVL196:
1878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2588              		.loc 1 1878 0
 2589              		@ sp needed
 2590 0002 7047     		bx	lr
 2591              		.cfi_endproc
 2592              	.LFE56:
 2594              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2595              		.align	2
 2596              		.global	HAL_ADC_GetError
 2597              		.code	16
 2598              		.thumb_func
 2600              	HAL_ADC_GetError:
 2601              	.LFB57:
1886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 2602              		.loc 1 1886 0
 2603              		.cfi_startproc
 2604              	.LVL197:
1890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->ErrorCode;
 2605              		.loc 1 1890 0
 2606 0000 C06D     		ldr	r0, [r0, #92]
 2607              	.LVL198:
1891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2608              		.loc 1 1891 0
 2609              		@ sp needed
 2610 0002 7047     		bx	lr
 2611              		.cfi_endproc
 2612              	.LFE57:
 2614              		.text
 2615              	.Letext0:
 2616              		.file 2 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 2617              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 2618              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l072xx.h"
 2619              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 2620              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 2621              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 2622              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc.h"
 2623              		.file 9 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 2624              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
ARM GAS  /tmp/cchPcaY2.s 			page 92


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l0xx_hal_adc.c
     /tmp/cchPcaY2.s:19     .text.ADC_DelayMicroSecond:00000000 $t
     /tmp/cchPcaY2.s:23     .text.ADC_DelayMicroSecond:00000000 ADC_DelayMicroSecond
     /tmp/cchPcaY2.s:67     .text.ADC_DelayMicroSecond:00000028 $d
     /tmp/cchPcaY2.s:73     .text.ADC_ConversionStop:00000000 $t
     /tmp/cchPcaY2.s:77     .text.ADC_ConversionStop:00000000 ADC_ConversionStop
     /tmp/cchPcaY2.s:162    .text.ADC_Disable:00000000 $t
     /tmp/cchPcaY2.s:166    .text.ADC_Disable:00000000 ADC_Disable
     /tmp/cchPcaY2.s:284    .text.ADC_Enable:00000000 $t
     /tmp/cchPcaY2.s:288    .text.ADC_Enable:00000000 ADC_Enable
     /tmp/cchPcaY2.s:406    .text.ADC_Enable:00000088 $d
     /tmp/cchPcaY2.s:411    .text.HAL_ADC_MspInit:00000000 $t
     /tmp/cchPcaY2.s:416    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
     /tmp/cchPcaY2.s:428    .text.HAL_ADC_Init:00000000 $t
     /tmp/cchPcaY2.s:433    .text.HAL_ADC_Init:00000000 HAL_ADC_Init
     /tmp/cchPcaY2.s:762    .text.HAL_ADC_Init:000001cc $d
     /tmp/cchPcaY2.s:772    .text.HAL_ADC_MspDeInit:00000000 $t
     /tmp/cchPcaY2.s:777    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
     /tmp/cchPcaY2.s:789    .text.HAL_ADC_DeInit:00000000 $t
     /tmp/cchPcaY2.s:794    .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
     /tmp/cchPcaY2.s:922    .text.HAL_ADC_DeInit:0000009c $d
     /tmp/cchPcaY2.s:932    .text.HAL_ADC_Start:00000000 $t
     /tmp/cchPcaY2.s:937    .text.HAL_ADC_Start:00000000 HAL_ADC_Start
     /tmp/cchPcaY2.s:1025   .text.HAL_ADC_Start:0000005c $d
     /tmp/cchPcaY2.s:1030   .text.HAL_ADC_Stop:00000000 $t
     /tmp/cchPcaY2.s:1035   .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
     /tmp/cchPcaY2.s:1098   .text.HAL_ADC_Stop:0000003c $d
     /tmp/cchPcaY2.s:1103   .text.HAL_ADC_PollForConversion:00000000 $t
     /tmp/cchPcaY2.s:1108   .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
     /tmp/cchPcaY2.s:1270   .text.HAL_ADC_PollForConversion:000000c0 $d
     /tmp/cchPcaY2.s:1275   .text.HAL_ADC_PollForEvent:00000000 $t
     /tmp/cchPcaY2.s:1280   .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
     /tmp/cchPcaY2.s:1389   .text.HAL_ADC_Start_IT:00000000 $t
     /tmp/cchPcaY2.s:1394   .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
     /tmp/cchPcaY2.s:1508   .text.HAL_ADC_Start_IT:00000084 $d
     /tmp/cchPcaY2.s:1513   .text.HAL_ADC_Stop_IT:00000000 $t
     /tmp/cchPcaY2.s:1518   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
     /tmp/cchPcaY2.s:1587   .text.HAL_ADC_Stop_IT:00000048 $d
     /tmp/cchPcaY2.s:1592   .text.HAL_ADC_Start_DMA:00000000 $t
     /tmp/cchPcaY2.s:1597   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
     /tmp/cchPcaY2.s:1732   .text.HAL_ADC_Start_DMA:0000009c $d
     /tmp/cchPcaY2.s:1899   .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
     /tmp/cchPcaY2.s:2014   .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
     /tmp/cchPcaY2.s:2075   .text.ADC_DMAError:00000000 ADC_DMAError
     /tmp/cchPcaY2.s:1740   .text.HAL_ADC_Stop_DMA:00000000 $t
     /tmp/cchPcaY2.s:1745   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
     /tmp/cchPcaY2.s:1852   .text.HAL_ADC_Stop_DMA:00000074 $d
     /tmp/cchPcaY2.s:1857   .text.HAL_ADC_GetValue:00000000 $t
     /tmp/cchPcaY2.s:1862   .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
     /tmp/cchPcaY2.s:1878   .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/cchPcaY2.s:1883   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/cchPcaY2.s:1895   .text.ADC_DMAConvCplt:00000000 $t
     /tmp/cchPcaY2.s:1988   .text.ADC_DMAConvCplt:0000006c $d
     /tmp/cchPcaY2.s:1993   .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
     /tmp/cchPcaY2.s:1998   .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/cchPcaY2.s:2010   .text.ADC_DMAHalfConvCplt:00000000 $t
ARM GAS  /tmp/cchPcaY2.s 			page 93


     /tmp/cchPcaY2.s:2037   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 $t
     /tmp/cchPcaY2.s:2042   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/cchPcaY2.s:2054   .text.HAL_ADC_ErrorCallback:00000000 $t
     /tmp/cchPcaY2.s:2059   .text.HAL_ADC_ErrorCallback:00000000 HAL_ADC_ErrorCallback
     /tmp/cchPcaY2.s:2071   .text.ADC_DMAError:00000000 $t
     /tmp/cchPcaY2.s:2108   .text.HAL_ADC_IRQHandler:00000000 $t
     /tmp/cchPcaY2.s:2113   .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
     /tmp/cchPcaY2.s:2280   .text.HAL_ADC_IRQHandler:000000dc $d
     /tmp/cchPcaY2.s:2285   .text.HAL_ADC_ConfigChannel:00000000 $t
     /tmp/cchPcaY2.s:2290   .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
     /tmp/cchPcaY2.s:2424   .text.HAL_ADC_ConfigChannel:000000a8 $d
     /tmp/cchPcaY2.s:2432   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
     /tmp/cchPcaY2.s:2437   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
     /tmp/cchPcaY2.s:2569   .text.HAL_ADC_AnalogWDGConfig:0000009c $d
     /tmp/cchPcaY2.s:2575   .text.HAL_ADC_GetState:00000000 $t
     /tmp/cchPcaY2.s:2580   .text.HAL_ADC_GetState:00000000 HAL_ADC_GetState
     /tmp/cchPcaY2.s:2595   .text.HAL_ADC_GetError:00000000 $t
     /tmp/cchPcaY2.s:2600   .text.HAL_ADC_GetError:00000000 HAL_ADC_GetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
