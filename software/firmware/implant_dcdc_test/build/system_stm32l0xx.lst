ARM GAS  /tmp/ccx21hwy.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"system_stm32l0xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	2
  19              		.global	SystemInit
  20              		.code	16
  21              		.thumb_func
  23              	SystemInit:
  24              	.LFB36:
  25              		.file 1 "Src/system_stm32l0xx.c"
   1:Src/system_stm32l0xx.c **** /**
   2:Src/system_stm32l0xx.c ****   ******************************************************************************
   3:Src/system_stm32l0xx.c ****   * @file    system_stm32l0xx.c
   4:Src/system_stm32l0xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32l0xx.c ****   * @version V1.7.1
   6:Src/system_stm32l0xx.c ****   * @date    25-November-2016
   7:Src/system_stm32l0xx.c ****   * @brief   CMSIS Cortex-M0+ Device Peripheral Access Layer System Source File.
   8:Src/system_stm32l0xx.c ****   *
   9:Src/system_stm32l0xx.c ****   *   This file provides two functions and one global variable to be called from 
  10:Src/system_stm32l0xx.c ****   *   user application:
  11:Src/system_stm32l0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  12:Src/system_stm32l0xx.c ****   *                      before branch to main program. This call is made inside
  13:Src/system_stm32l0xx.c ****   *                      the "startup_stm32l0xx.s" file.
  14:Src/system_stm32l0xx.c ****   *
  15:Src/system_stm32l0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  16:Src/system_stm32l0xx.c ****   *                                  by the user application to setup the SysTick 
  17:Src/system_stm32l0xx.c ****   *                                  timer or configure other parameters.
  18:Src/system_stm32l0xx.c ****   *                                     
  19:Src/system_stm32l0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  20:Src/system_stm32l0xx.c ****   *                                 be called whenever the core clock is changed
  21:Src/system_stm32l0xx.c ****   *                                 during program execution.
  22:Src/system_stm32l0xx.c ****   *
  23:Src/system_stm32l0xx.c ****   *
  24:Src/system_stm32l0xx.c ****   ******************************************************************************
  25:Src/system_stm32l0xx.c ****   * @attention
  26:Src/system_stm32l0xx.c ****   *
  27:Src/system_stm32l0xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  28:Src/system_stm32l0xx.c ****   *
  29:Src/system_stm32l0xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  30:Src/system_stm32l0xx.c ****   * are permitted provided that the following conditions are met:
  31:Src/system_stm32l0xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  32:Src/system_stm32l0xx.c ****   *      this list of conditions and the following disclaimer.
  33:Src/system_stm32l0xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
ARM GAS  /tmp/ccx21hwy.s 			page 2


  34:Src/system_stm32l0xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  35:Src/system_stm32l0xx.c ****   *      and/or other materials provided with the distribution.
  36:Src/system_stm32l0xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  37:Src/system_stm32l0xx.c ****   *      may be used to endorse or promote products derived from this software
  38:Src/system_stm32l0xx.c ****   *      without specific prior written permission.
  39:Src/system_stm32l0xx.c ****   *
  40:Src/system_stm32l0xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  41:Src/system_stm32l0xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  42:Src/system_stm32l0xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  43:Src/system_stm32l0xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  44:Src/system_stm32l0xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  45:Src/system_stm32l0xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  46:Src/system_stm32l0xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  47:Src/system_stm32l0xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  48:Src/system_stm32l0xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  49:Src/system_stm32l0xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  50:Src/system_stm32l0xx.c ****   *
  51:Src/system_stm32l0xx.c ****   ******************************************************************************
  52:Src/system_stm32l0xx.c ****   */
  53:Src/system_stm32l0xx.c **** 
  54:Src/system_stm32l0xx.c **** /** @addtogroup CMSIS
  55:Src/system_stm32l0xx.c ****   * @{
  56:Src/system_stm32l0xx.c ****   */
  57:Src/system_stm32l0xx.c **** 
  58:Src/system_stm32l0xx.c **** /** @addtogroup stm32l0xx_system
  59:Src/system_stm32l0xx.c ****   * @{
  60:Src/system_stm32l0xx.c ****   */  
  61:Src/system_stm32l0xx.c ****   
  62:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Includes
  63:Src/system_stm32l0xx.c ****   * @{
  64:Src/system_stm32l0xx.c ****   */
  65:Src/system_stm32l0xx.c **** 
  66:Src/system_stm32l0xx.c **** #include "stm32l0xx.h"
  67:Src/system_stm32l0xx.c **** 
  68:Src/system_stm32l0xx.c **** #if !defined  (HSE_VALUE) 
  69:Src/system_stm32l0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000U) /*!< Value of the External oscillator in Hz */
  70:Src/system_stm32l0xx.c **** #endif /* HSE_VALUE */
  71:Src/system_stm32l0xx.c **** 
  72:Src/system_stm32l0xx.c **** #if !defined  (MSI_VALUE)
  73:Src/system_stm32l0xx.c ****   #define MSI_VALUE    ((uint32_t)2000000U) /*!< Value of the Internal oscillator in Hz*/
  74:Src/system_stm32l0xx.c **** #endif /* MSI_VALUE */
  75:Src/system_stm32l0xx.c ****    
  76:Src/system_stm32l0xx.c **** #if !defined  (HSI_VALUE)
  77:Src/system_stm32l0xx.c ****   #define HSI_VALUE    ((uint32_t)16000000U) /*!< Value of the Internal oscillator in Hz*/
  78:Src/system_stm32l0xx.c **** #endif /* HSI_VALUE */
  79:Src/system_stm32l0xx.c **** 
  80:Src/system_stm32l0xx.c **** 
  81:Src/system_stm32l0xx.c **** /**
  82:Src/system_stm32l0xx.c ****   * @}
  83:Src/system_stm32l0xx.c ****   */
  84:Src/system_stm32l0xx.c **** 
  85:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_TypesDefinitions
  86:Src/system_stm32l0xx.c ****   * @{
  87:Src/system_stm32l0xx.c ****   */
  88:Src/system_stm32l0xx.c **** 
  89:Src/system_stm32l0xx.c **** /**
  90:Src/system_stm32l0xx.c ****   * @}
ARM GAS  /tmp/ccx21hwy.s 			page 3


  91:Src/system_stm32l0xx.c ****   */
  92:Src/system_stm32l0xx.c **** 
  93:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Defines
  94:Src/system_stm32l0xx.c ****   * @{
  95:Src/system_stm32l0xx.c ****   */
  96:Src/system_stm32l0xx.c **** /************************* Miscellaneous Configuration ************************/
  97:Src/system_stm32l0xx.c **** 
  98:Src/system_stm32l0xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
  99:Src/system_stm32l0xx.c ****      Internal SRAM. */
 100:Src/system_stm32l0xx.c **** /* #define VECT_TAB_SRAM */
 101:Src/system_stm32l0xx.c **** #define VECT_TAB_OFFSET  0x00U /*!< Vector Table base offset field. 
 102:Src/system_stm32l0xx.c ****                                    This value must be a multiple of 0x200. */
 103:Src/system_stm32l0xx.c **** /******************************************************************************/
 104:Src/system_stm32l0xx.c **** /**
 105:Src/system_stm32l0xx.c ****   * @}
 106:Src/system_stm32l0xx.c ****   */
 107:Src/system_stm32l0xx.c **** 
 108:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Macros
 109:Src/system_stm32l0xx.c ****   * @{
 110:Src/system_stm32l0xx.c ****   */
 111:Src/system_stm32l0xx.c **** 
 112:Src/system_stm32l0xx.c **** /**
 113:Src/system_stm32l0xx.c ****   * @}
 114:Src/system_stm32l0xx.c ****   */
 115:Src/system_stm32l0xx.c **** 
 116:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Variables
 117:Src/system_stm32l0xx.c ****   * @{
 118:Src/system_stm32l0xx.c ****   */
 119:Src/system_stm32l0xx.c ****   /* This variable is updated in three ways:
 120:Src/system_stm32l0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 121:Src/system_stm32l0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 122:Src/system_stm32l0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
 123:Src/system_stm32l0xx.c ****          Note: If you use this function to configure the system clock; then there
 124:Src/system_stm32l0xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 125:Src/system_stm32l0xx.c ****                variable is updated automatically.
 126:Src/system_stm32l0xx.c ****   */
 127:Src/system_stm32l0xx.c ****   uint32_t SystemCoreClock = 2000000U;
 128:Src/system_stm32l0xx.c ****   const uint8_t AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U
 129:Src/system_stm32l0xx.c ****   const uint8_t APBPrescTable[8] = {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
 130:Src/system_stm32l0xx.c ****   const uint8_t PLLMulTable[9] = {3U, 4U, 6U, 8U, 12U, 16U, 24U, 32U, 48U};
 131:Src/system_stm32l0xx.c **** 
 132:Src/system_stm32l0xx.c **** /**
 133:Src/system_stm32l0xx.c ****   * @}
 134:Src/system_stm32l0xx.c ****   */
 135:Src/system_stm32l0xx.c **** 
 136:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_FunctionPrototypes
 137:Src/system_stm32l0xx.c ****   * @{
 138:Src/system_stm32l0xx.c ****   */
 139:Src/system_stm32l0xx.c **** 
 140:Src/system_stm32l0xx.c **** /**
 141:Src/system_stm32l0xx.c ****   * @}
 142:Src/system_stm32l0xx.c ****   */
 143:Src/system_stm32l0xx.c **** 
 144:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Functions
 145:Src/system_stm32l0xx.c ****   * @{
 146:Src/system_stm32l0xx.c ****   */
 147:Src/system_stm32l0xx.c **** 
ARM GAS  /tmp/ccx21hwy.s 			page 4


 148:Src/system_stm32l0xx.c **** /**
 149:Src/system_stm32l0xx.c ****   * @brief  Setup the microcontroller system.
 150:Src/system_stm32l0xx.c ****   * @param  None
 151:Src/system_stm32l0xx.c ****   * @retval None
 152:Src/system_stm32l0xx.c ****   */
 153:Src/system_stm32l0xx.c **** void SystemInit (void)
 154:Src/system_stm32l0xx.c **** {    
  26              		.loc 1 154 0
  27              		.cfi_startproc
 155:Src/system_stm32l0xx.c **** /*!< Set MSION bit */
 156:Src/system_stm32l0xx.c ****   RCC->CR |= (uint32_t)0x00000100U;
  28              		.loc 1 156 0
  29 0000 104B     		ldr	r3, .L2
  30 0002 1968     		ldr	r1, [r3]
  31 0004 8022     		mov	r2, #128
  32 0006 5200     		lsl	r2, r2, #1
  33 0008 0A43     		orr	r2, r1
  34 000a 1A60     		str	r2, [r3]
 157:Src/system_stm32l0xx.c **** 
 158:Src/system_stm32l0xx.c ****   /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
 159:Src/system_stm32l0xx.c ****   RCC->CFGR &= (uint32_t) 0x88FF400CU;
  35              		.loc 1 159 0
  36 000c D968     		ldr	r1, [r3, #12]
  37 000e 0E4A     		ldr	r2, .L2+4
  38 0010 0A40     		and	r2, r1
  39 0012 DA60     		str	r2, [r3, #12]
 160:Src/system_stm32l0xx.c ****  
 161:Src/system_stm32l0xx.c ****   /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
 162:Src/system_stm32l0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFF6U;
  40              		.loc 1 162 0
  41 0014 1968     		ldr	r1, [r3]
  42 0016 0D4A     		ldr	r2, .L2+8
  43 0018 0A40     		and	r2, r1
  44 001a 1A60     		str	r2, [r3]
 163:Src/system_stm32l0xx.c ****   
 164:Src/system_stm32l0xx.c ****   /*!< Reset HSI48ON  bit */
 165:Src/system_stm32l0xx.c ****   RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
  45              		.loc 1 165 0
  46 001c 9A68     		ldr	r2, [r3, #8]
  47 001e 0121     		mov	r1, #1
  48 0020 8A43     		bic	r2, r1
  49 0022 9A60     		str	r2, [r3, #8]
 166:Src/system_stm32l0xx.c ****   
 167:Src/system_stm32l0xx.c ****   /*!< Reset HSEBYP bit */
 168:Src/system_stm32l0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
  50              		.loc 1 168 0
  51 0024 1968     		ldr	r1, [r3]
  52 0026 0A4A     		ldr	r2, .L2+12
  53 0028 0A40     		and	r2, r1
  54 002a 1A60     		str	r2, [r3]
 169:Src/system_stm32l0xx.c **** 
 170:Src/system_stm32l0xx.c ****   /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
 171:Src/system_stm32l0xx.c ****   RCC->CFGR &= (uint32_t)0xFF02FFFFU;
  55              		.loc 1 171 0
  56 002c D968     		ldr	r1, [r3, #12]
  57 002e 094A     		ldr	r2, .L2+16
  58 0030 0A40     		and	r2, r1
ARM GAS  /tmp/ccx21hwy.s 			page 5


  59 0032 DA60     		str	r2, [r3, #12]
 172:Src/system_stm32l0xx.c **** 
 173:Src/system_stm32l0xx.c ****   /*!< Disable all interrupts */
 174:Src/system_stm32l0xx.c ****   RCC->CIER = 0x00000000U;
  60              		.loc 1 174 0
  61 0034 0022     		mov	r2, #0
  62 0036 1A61     		str	r2, [r3, #16]
 175:Src/system_stm32l0xx.c ****   
 176:Src/system_stm32l0xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 177:Src/system_stm32l0xx.c **** #ifdef VECT_TAB_SRAM
 178:Src/system_stm32l0xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 179:Src/system_stm32l0xx.c **** #else
 180:Src/system_stm32l0xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  63              		.loc 1 180 0
  64 0038 8022     		mov	r2, #128
  65 003a 1205     		lsl	r2, r2, #20
  66 003c 064B     		ldr	r3, .L2+20
  67 003e 9A60     		str	r2, [r3, #8]
 181:Src/system_stm32l0xx.c **** #endif
 182:Src/system_stm32l0xx.c **** }
  68              		.loc 1 182 0
  69              		@ sp needed
  70 0040 7047     		bx	lr
  71              	.L3:
  72 0042 C046     		.align	2
  73              	.L2:
  74 0044 00100240 		.word	1073876992
  75 0048 0C40FF88 		.word	-1996537844
  76 004c F6FFF6FE 		.word	-17367050
  77 0050 FFFFFBFF 		.word	-262145
  78 0054 FFFF02FF 		.word	-16580609
  79 0058 00ED00E0 		.word	-536810240
  80              		.cfi_endproc
  81              	.LFE36:
  83              		.global	__aeabi_uidiv
  84              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  85              		.align	2
  86              		.global	SystemCoreClockUpdate
  87              		.code	16
  88              		.thumb_func
  90              	SystemCoreClockUpdate:
  91              	.LFB37:
 183:Src/system_stm32l0xx.c **** 
 184:Src/system_stm32l0xx.c **** /**
 185:Src/system_stm32l0xx.c ****   * @brief  Update SystemCoreClock according to Clock Register Values
 186:Src/system_stm32l0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 187:Src/system_stm32l0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 188:Src/system_stm32l0xx.c ****   *         other parameters.
 189:Src/system_stm32l0xx.c ****   *           
 190:Src/system_stm32l0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 191:Src/system_stm32l0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 192:Src/system_stm32l0xx.c ****   *         based on this variable will be incorrect.         
 193:Src/system_stm32l0xx.c ****   *     
 194:Src/system_stm32l0xx.c ****   * @note   - The system frequency computed by this function is not the real 
 195:Src/system_stm32l0xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 196:Src/system_stm32l0xx.c ****   *           constant and the selected clock source:
 197:Src/system_stm32l0xx.c ****   *             
ARM GAS  /tmp/ccx21hwy.s 			page 6


 198:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI 
 199:Src/system_stm32l0xx.c ****   *             value as defined by the MSI range.
 200:Src/system_stm32l0xx.c ****   *                                   
 201:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 202:Src/system_stm32l0xx.c ****   *                                              
 203:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 204:Src/system_stm32l0xx.c ****   *                          
 205:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 206:Src/system_stm32l0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 207:Src/system_stm32l0xx.c ****   *         
 208:Src/system_stm32l0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32l0xx_hal.h file (default value
 209:Src/system_stm32l0xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 210:Src/system_stm32l0xx.c ****   *             in voltage and temperature.   
 211:Src/system_stm32l0xx.c ****   *    
 212:Src/system_stm32l0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32l0xx_hal.h file (default value
 213:Src/system_stm32l0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 214:Src/system_stm32l0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 215:Src/system_stm32l0xx.c ****   *              have wrong result.
 216:Src/system_stm32l0xx.c ****   *                
 217:Src/system_stm32l0xx.c ****   *         - The result of this function could be not correct when using fractional
 218:Src/system_stm32l0xx.c ****   *           value for HSE crystal.
 219:Src/system_stm32l0xx.c ****   * @param  None
 220:Src/system_stm32l0xx.c ****   * @retval None
 221:Src/system_stm32l0xx.c ****   */
 222:Src/system_stm32l0xx.c **** void SystemCoreClockUpdate (void)
 223:Src/system_stm32l0xx.c **** {
  92              		.loc 1 223 0
  93              		.cfi_startproc
  94 0000 08B5     		push	{r3, lr}
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 3, -8
  98              		.cfi_offset 14, -4
  99              	.LVL0:
 224:Src/system_stm32l0xx.c ****   uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 225:Src/system_stm32l0xx.c **** 
 226:Src/system_stm32l0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 227:Src/system_stm32l0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 100              		.loc 1 227 0
 101 0002 294B     		ldr	r3, .L13
 102 0004 DB68     		ldr	r3, [r3, #12]
 103 0006 0C22     		mov	r2, #12
 104 0008 1340     		and	r3, r2
 105              	.LVL1:
 228:Src/system_stm32l0xx.c ****   
 229:Src/system_stm32l0xx.c ****   switch (tmp)
 106              		.loc 1 229 0
 107 000a 042B     		cmp	r3, #4
 108 000c 13D0     		beq	.L6
 109 000e 02D8     		bhi	.L7
 110 0010 002B     		cmp	r3, #0
 111 0012 05D0     		beq	.L8
 112 0014 32E0     		b	.L5
 113              	.L7:
 114 0016 082B     		cmp	r3, #8
 115 0018 11D0     		beq	.L9
 116 001a 0C2B     		cmp	r3, #12
ARM GAS  /tmp/ccx21hwy.s 			page 7


 117 001c 13D0     		beq	.L10
 118 001e 2DE0     		b	.L5
 119              	.L8:
 230:Src/system_stm32l0xx.c ****   {
 231:Src/system_stm32l0xx.c ****     case 0x00U:  /* MSI used as system clock */
 232:Src/system_stm32l0xx.c ****       msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 120              		.loc 1 232 0
 121 0020 214B     		ldr	r3, .L13
 122              	.LVL2:
 123 0022 5B68     		ldr	r3, [r3, #4]
 124 0024 1B04     		lsl	r3, r3, #16
 125 0026 5B0F     		lsr	r3, r3, #29
 126              	.LVL3:
 233:Src/system_stm32l0xx.c ****       SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 127              		.loc 1 233 0
 128 0028 0133     		add	r3, r3, #1
 129              	.LVL4:
 130 002a 8022     		mov	r2, #128
 131 002c 1202     		lsl	r2, r2, #8
 132 002e 9A40     		lsl	r2, r2, r3
 133 0030 1E4B     		ldr	r3, .L13+4
 134              	.LVL5:
 135 0032 1A60     		str	r2, [r3]
 234:Src/system_stm32l0xx.c ****       break;
 136              		.loc 1 234 0
 137 0034 2CE0     		b	.L11
 138              	.LVL6:
 139              	.L6:
 235:Src/system_stm32l0xx.c ****     case 0x04U:  /* HSI used as system clock */
 236:Src/system_stm32l0xx.c ****       SystemCoreClock = HSI_VALUE;
 140              		.loc 1 236 0
 141 0036 1E4A     		ldr	r2, .L13+8
 142 0038 1C4B     		ldr	r3, .L13+4
 143              	.LVL7:
 144 003a 1A60     		str	r2, [r3]
 237:Src/system_stm32l0xx.c ****       break;
 145              		.loc 1 237 0
 146 003c 28E0     		b	.L11
 147              	.LVL8:
 148              	.L9:
 238:Src/system_stm32l0xx.c ****     case 0x08U:  /* HSE used as system clock */
 239:Src/system_stm32l0xx.c ****       SystemCoreClock = HSE_VALUE;
 149              		.loc 1 239 0
 150 003e 1D4A     		ldr	r2, .L13+12
 151 0040 1A4B     		ldr	r3, .L13+4
 152              	.LVL9:
 153 0042 1A60     		str	r2, [r3]
 240:Src/system_stm32l0xx.c ****       break;
 154              		.loc 1 240 0
 155 0044 24E0     		b	.L11
 156              	.LVL10:
 157              	.L10:
 241:Src/system_stm32l0xx.c ****     case 0x0CU:  /* PLL used as system clock */
 242:Src/system_stm32l0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 243:Src/system_stm32l0xx.c ****       pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 158              		.loc 1 243 0
 159 0046 184B     		ldr	r3, .L13
ARM GAS  /tmp/ccx21hwy.s 			page 8


 160              	.LVL11:
 161 0048 DA68     		ldr	r2, [r3, #12]
 162 004a 9202     		lsl	r2, r2, #10
 163              	.LVL12:
 244:Src/system_stm32l0xx.c ****       plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 164              		.loc 1 244 0
 165 004c D968     		ldr	r1, [r3, #12]
 166 004e 0902     		lsl	r1, r1, #8
 167              	.LVL13:
 245:Src/system_stm32l0xx.c ****       pllmul = PLLMulTable[(pllmul >> 18U)];
 168              		.loc 1 245 0
 169 0050 120F     		lsr	r2, r2, #28
 170 0052 1948     		ldr	r0, .L13+16
 171 0054 825C     		ldrb	r2, [r0, r2]
 172              	.LVL14:
 246:Src/system_stm32l0xx.c ****       plldiv = (plldiv >> 22U) + 1U;
 173              		.loc 1 246 0
 174 0056 890F     		lsr	r1, r1, #30
 175 0058 0131     		add	r1, r1, #1
 176              	.LVL15:
 247:Src/system_stm32l0xx.c ****       
 248:Src/system_stm32l0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 177              		.loc 1 248 0
 178 005a DB68     		ldr	r3, [r3, #12]
 179              	.LVL16:
 249:Src/system_stm32l0xx.c **** 
 250:Src/system_stm32l0xx.c ****       if (pllsource == 0x00U)
 180              		.loc 1 250 0
 181 005c D803     		lsl	r0, r3, #15
 182 005e 06D4     		bmi	.L12
 251:Src/system_stm32l0xx.c ****       {
 252:Src/system_stm32l0xx.c ****         /* HSI oscillator clock selected as PLL clock entry */
 253:Src/system_stm32l0xx.c ****         SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 183              		.loc 1 253 0
 184 0060 1348     		ldr	r0, .L13+8
 185 0062 5043     		mul	r0, r2
 186 0064 FFF7FEFF 		bl	__aeabi_uidiv
 187              	.LVL17:
 188 0068 104B     		ldr	r3, .L13+4
 189 006a 1860     		str	r0, [r3]
 190 006c 10E0     		b	.L11
 191              	.LVL18:
 192              	.L12:
 254:Src/system_stm32l0xx.c ****       }
 255:Src/system_stm32l0xx.c ****       else
 256:Src/system_stm32l0xx.c ****       {
 257:Src/system_stm32l0xx.c ****         /* HSE selected as PLL clock entry */
 258:Src/system_stm32l0xx.c ****         SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 193              		.loc 1 258 0
 194 006e 1148     		ldr	r0, .L13+12
 195 0070 5043     		mul	r0, r2
 196 0072 FFF7FEFF 		bl	__aeabi_uidiv
 197              	.LVL19:
 198 0076 0D4B     		ldr	r3, .L13+4
 199 0078 1860     		str	r0, [r3]
 200 007a 09E0     		b	.L11
 201              	.LVL20:
ARM GAS  /tmp/ccx21hwy.s 			page 9


 202              	.L5:
 259:Src/system_stm32l0xx.c ****       }
 260:Src/system_stm32l0xx.c ****       break;
 261:Src/system_stm32l0xx.c ****     default: /* MSI used as system clock */
 262:Src/system_stm32l0xx.c ****       msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 203              		.loc 1 262 0
 204 007c 0A4B     		ldr	r3, .L13
 205              	.LVL21:
 206 007e 5B68     		ldr	r3, [r3, #4]
 207 0080 1B04     		lsl	r3, r3, #16
 208 0082 5B0F     		lsr	r3, r3, #29
 209              	.LVL22:
 263:Src/system_stm32l0xx.c ****       SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 210              		.loc 1 263 0
 211 0084 0133     		add	r3, r3, #1
 212              	.LVL23:
 213 0086 8022     		mov	r2, #128
 214 0088 1202     		lsl	r2, r2, #8
 215 008a 9A40     		lsl	r2, r2, r3
 216 008c 074B     		ldr	r3, .L13+4
 217              	.LVL24:
 218 008e 1A60     		str	r2, [r3]
 219              	.LVL25:
 220              	.L11:
 264:Src/system_stm32l0xx.c ****       break;
 265:Src/system_stm32l0xx.c ****   }
 266:Src/system_stm32l0xx.c ****   /* Compute HCLK clock frequency --------------------------------------------*/
 267:Src/system_stm32l0xx.c ****   /* Get HCLK prescaler */
 268:Src/system_stm32l0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 221              		.loc 1 268 0
 222 0090 054B     		ldr	r3, .L13
 223 0092 DB68     		ldr	r3, [r3, #12]
 224 0094 1B06     		lsl	r3, r3, #24
 225 0096 1B0F     		lsr	r3, r3, #28
 226 0098 084A     		ldr	r2, .L13+20
 227 009a D25C     		ldrb	r2, [r2, r3]
 228              	.LVL26:
 269:Src/system_stm32l0xx.c ****   /* HCLK clock frequency */
 270:Src/system_stm32l0xx.c ****   SystemCoreClock >>= tmp;
 229              		.loc 1 270 0
 230 009c 034B     		ldr	r3, .L13+4
 231 009e 1968     		ldr	r1, [r3]
 232 00a0 D140     		lsr	r1, r1, r2
 233 00a2 1960     		str	r1, [r3]
 271:Src/system_stm32l0xx.c **** }
 234              		.loc 1 271 0
 235              		@ sp needed
 236 00a4 08BD     		pop	{r3, pc}
 237              	.L14:
 238 00a6 C046     		.align	2
 239              	.L13:
 240 00a8 00100240 		.word	1073876992
 241 00ac 00000000 		.word	.LANCHOR0
 242 00b0 0024F400 		.word	16000000
 243 00b4 00127A00 		.word	8000000
 244 00b8 00000000 		.word	.LANCHOR1
 245 00bc 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccx21hwy.s 			page 10


 246              		.cfi_endproc
 247              	.LFE37:
 249              		.global	PLLMulTable
 250              		.global	APBPrescTable
 251              		.global	AHBPrescTable
 252              		.global	SystemCoreClock
 253              		.section	.rodata.AHBPrescTable,"a",%progbits
 254              		.align	2
 255              		.set	.LANCHOR2,. + 0
 258              	AHBPrescTable:
 259 0000 00       		.byte	0
 260 0001 00       		.byte	0
 261 0002 00       		.byte	0
 262 0003 00       		.byte	0
 263 0004 00       		.byte	0
 264 0005 00       		.byte	0
 265 0006 00       		.byte	0
 266 0007 00       		.byte	0
 267 0008 01       		.byte	1
 268 0009 02       		.byte	2
 269 000a 03       		.byte	3
 270 000b 04       		.byte	4
 271 000c 06       		.byte	6
 272 000d 07       		.byte	7
 273 000e 08       		.byte	8
 274 000f 09       		.byte	9
 275              		.section	.rodata.APBPrescTable,"a",%progbits
 276              		.align	2
 279              	APBPrescTable:
 280 0000 00       		.byte	0
 281 0001 00       		.byte	0
 282 0002 00       		.byte	0
 283 0003 00       		.byte	0
 284 0004 01       		.byte	1
 285 0005 02       		.byte	2
 286 0006 03       		.byte	3
 287 0007 04       		.byte	4
 288              		.section	.rodata.PLLMulTable,"a",%progbits
 289              		.align	2
 290              		.set	.LANCHOR1,. + 0
 293              	PLLMulTable:
 294 0000 03       		.byte	3
 295 0001 04       		.byte	4
 296 0002 06       		.byte	6
 297 0003 08       		.byte	8
 298 0004 0C       		.byte	12
 299 0005 10       		.byte	16
 300 0006 18       		.byte	24
 301 0007 20       		.byte	32
 302 0008 30       		.byte	48
 303 0009 000000   		.section	.data.SystemCoreClock,"aw",%progbits
 304              		.align	2
 305              		.set	.LANCHOR0,. + 0
 308              	SystemCoreClock:
 309 0000 80841E00 		.word	2000000
 310              		.text
 311              	.Letext0:
ARM GAS  /tmp/ccx21hwy.s 			page 11


 312              		.file 2 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 313              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 314              		.file 4 "Drivers/CMSIS/Include/core_cm0plus.h"
 315              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l072xx.h"
ARM GAS  /tmp/ccx21hwy.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32l0xx.c
     /tmp/ccx21hwy.s:18     .text.SystemInit:00000000 $t
     /tmp/ccx21hwy.s:23     .text.SystemInit:00000000 SystemInit
     /tmp/ccx21hwy.s:74     .text.SystemInit:00000044 $d
     /tmp/ccx21hwy.s:85     .text.SystemCoreClockUpdate:00000000 $t
     /tmp/ccx21hwy.s:90     .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
     /tmp/ccx21hwy.s:240    .text.SystemCoreClockUpdate:000000a8 $d
     /tmp/ccx21hwy.s:293    .rodata.PLLMulTable:00000000 PLLMulTable
     /tmp/ccx21hwy.s:279    .rodata.APBPrescTable:00000000 APBPrescTable
     /tmp/ccx21hwy.s:258    .rodata.AHBPrescTable:00000000 AHBPrescTable
     /tmp/ccx21hwy.s:308    .data.SystemCoreClock:00000000 SystemCoreClock
     /tmp/ccx21hwy.s:254    .rodata.AHBPrescTable:00000000 $d
     /tmp/ccx21hwy.s:276    .rodata.APBPrescTable:00000000 $d
     /tmp/ccx21hwy.s:289    .rodata.PLLMulTable:00000000 $d
     /tmp/ccx21hwy.s:304    .data.SystemCoreClock:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
