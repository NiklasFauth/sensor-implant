ARM GAS  /tmp/cciXydud.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	MX_GPIO_Init:
  23              	.LFB71:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
ARM GAS  /tmp/cciXydud.s 			page 2


  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32l0xx_hal.h"
  41:Src/main.c    **** #include <stdbool.h>
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** //#include "sx126x-hal.h"
  45:Src/main.c    **** #include "sx126x.h"
  46:Src/main.c    **** /* USER CODE END Includes */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** SPI_HandleTypeDef hspi1;
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE BEGIN PV */
  52:Src/main.c    **** 
  53:Src/main.c    **** #define SEND_PING_BEAT_US 500000
  54:Src/main.c    **** #define RX_TIMEOUT_US 500000
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Set this flag to '1' to display debug messages on the console */
  57:Src/main.c    **** #define DEBUG_MESSAGE   1
  58:Src/main.c    **** #define ADV_DEBUG 1
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Set this flag to '1' to use the LoRa modulation or to '0' to use FSK modulation */
  61:Src/main.c    **** #define USE_MODEM_LORA  1
  62:Src/main.c    **** #define USE_MODEM_FSK   !USE_MODEM_LORA
  63:Src/main.c    **** 
  64:Src/main.c    **** #define RF_FREQUENCY                                    868500000 // Hz
  65:Src/main.c    **** #define TX_OUTPUT_POWER                                 14        // 14 dBm
  66:Src/main.c    **** 
  67:Src/main.c    **** //#if USE_MODEM_LORA == 1
  68:Src/main.c    **** 
  69:Src/main.c    ****     #define LORA_BANDWIDTH                              LORA_BW_125         // [0: 125 kHz,
  70:Src/main.c    ****                                                                   //  1: 250 kHz,
  71:Src/main.c    ****                                                                   //  2: 500 kHz,
  72:Src/main.c    ****                                                                   //  3: Reserved]
  73:Src/main.c    ****     #define LORA_SPREADING_FACTOR                       LORA_SF7         // [SF7..SF12]
  74:Src/main.c    ****     #define LORA_LOWDATARATEOPTIMIZE                    0
  75:Src/main.c    ****     #define LORA_CODINGRATE                             LORA_CR_4_5         // [1: 4/5,
  76:Src/main.c    ****                                                                   //  2: 4/6,
  77:Src/main.c    ****                                                                   //  3: 4/7,
  78:Src/main.c    ****                                                                   //  4: 4/8]
  79:Src/main.c    ****     #define LORA_PREAMBLE_LENGTH                        8         // Same for Tx and Rx
  80:Src/main.c    ****     #define LORA_SYMBOL_TIMEOUT                         5         // Symbols
  81:Src/main.c    ****     #define LORA_HEADER_TYPE                            LORA_PACKET_VARIABLE_LENGTH
  82:Src/main.c    ****     #define LORA_FHSS_ENABLED                           false
  83:Src/main.c    ****     #define LORA_NB_SYMB_HOP                            4
  84:Src/main.c    ****     #define LORA_IQ                                     LORA_IQ_NORMAL
  85:Src/main.c    ****     #define LORA_CRC_MODE                               LORA_CRC_ON
  86:Src/main.c    **** 
  87:Src/main.c    **** /*#elif USE_MODEM_FSK == 1
  88:Src/main.c    **** 
  89:Src/main.c    ****     #define FSK_FDEV                                    25000     // Hz
  90:Src/main.c    ****     #define FSK_DATARATE                                19200     // bps
  91:Src/main.c    ****     #define FSK_BANDWIDTH                               RX_BW_93800     // Hz
ARM GAS  /tmp/cciXydud.s 			page 3


  92:Src/main.c    ****     #define FSK_MODULATION_SHAPPING                     MOD_SHAPING_G_BT_05
  93:Src/main.c    ****     #define FSK_PREAMBLE_LENGTH                         5         // Same for Tx and Rx
  94:Src/main.c    ****     #define FSK_HEADER_TYPE                             RADIO_PACKET_VARIABLE_LENGTH
  95:Src/main.c    ****     #define FSK_CRC_MODE                                RADIO_CRC_2_BYTES_CCIT
  96:Src/main.c    ****     #define FSK_ADDR_FILTERING                          RADIO_ADDRESSCOMP_FILT_NODE;
  97:Src/main.c    ****     #define FSK_WHITENING_MODE                          RADIO_DC_FREE_OFF
  98:Src/main.c    ****     #define FSK_PREAMBLE_DETECTOR_MODE                  RADIO_PREAMBLE_DETECTOR_OFF
  99:Src/main.c    ****     #define FSK_SYNCWORD_LENGTH                         8
 100:Src/main.c    **** #else
 101:Src/main.c    ****     #error "Please define a modem in the compiler options."
 102:Src/main.c    **** #endif*/
 103:Src/main.c    **** 
 104:Src/main.c    **** #define RX_TIMEOUT_VALUE                                3500      // in ms
 105:Src/main.c    **** #define BUFFER_SIZE                                     32        // Define the payload size here
 106:Src/main.c    **** 
 107:Src/main.c    ****  /*
 108:Src/main.c    ****  * Callback functions prototypes
 109:Src/main.c    ****  */
 110:Src/main.c    **** /*!
 111:Src/main.c    ****  * @brief Function to be executed on Radio Tx Done event
 112:Src/main.c    ****  */
 113:Src/main.c    **** void OnTxDone( void );
 114:Src/main.c    **** 
 115:Src/main.c    **** /*!
 116:Src/main.c    ****  * @brief Function to be executed on Radio Rx Done event
 117:Src/main.c    ****  */
 118:Src/main.c    **** void OnRxDone( void );
 119:Src/main.c    **** 
 120:Src/main.c    **** /*!
 121:Src/main.c    ****  * @brief Function executed on Radio Tx Timeout event
 122:Src/main.c    ****  */
 123:Src/main.c    **** void OnTxTimeout( void );
 124:Src/main.c    **** 
 125:Src/main.c    **** /*!
 126:Src/main.c    ****  * @brief Function executed on Radio Rx Timeout event
 127:Src/main.c    ****  */
 128:Src/main.c    **** void OnRxTimeout( void );
 129:Src/main.c    **** 
 130:Src/main.c    **** /*!
 131:Src/main.c    ****  * @brief Function executed on Radio Rx Error event
 132:Src/main.c    ****  */
 133:Src/main.c    **** void OnRxError( IrqErrorCode_t errCode );
 134:Src/main.c    **** 
 135:Src/main.c    **** /*!
 136:Src/main.c    ****  * @brief Function executed on Radio Fhss Change Channel event
 137:Src/main.c    ****  */
 138:Src/main.c    **** void OnFhssChangeChannel( uint8_t channelIndex );
 139:Src/main.c    **** 
 140:Src/main.c    **** typedef struct{
 141:Src/main.c    ****     RadioPacketTypes_t packetType;
 142:Src/main.c    ****     int8_t txPower;
 143:Src/main.c    ****     RadioRampTimes_t txRampTime;
 144:Src/main.c    ****     ModulationParams_t modParams;
 145:Src/main.c    ****     PacketParams_t packetParams;
 146:Src/main.c    ****     uint32_t rfFrequency;
 147:Src/main.c    ****     uint16_t irqTx;
 148:Src/main.c    ****     uint16_t irqRx;
ARM GAS  /tmp/cciXydud.s 			page 4


 149:Src/main.c    ****     uint32_t txTimeout;
 150:Src/main.c    ****     uint32_t rxTimeout;
 151:Src/main.c    **** }RadioConfigurations_t;
 152:Src/main.c    **** RadioConfigurations_t radioConfiguration;
 153:Src/main.c    **** 
 154:Src/main.c    **** /*
 155:Src/main.c    ****  *  Global variables declarations
 156:Src/main.c    ****  */
 157:Src/main.c    **** typedef enum
 158:Src/main.c    **** {
 159:Src/main.c    ****     SEND_PACKET,
 160:Src/main.c    ****     WAIT_SEND_DONE,
 161:Src/main.c    ****     RECEIVE_PACKET,
 162:Src/main.c    ****     WAIT_RECEIVE_DONE,
 163:Src/main.c    ****     PACKET_RECEIVED,
 164:Src/main.c    **** }AppStates_t;
 165:Src/main.c    **** volatile AppStates_t State = SEND_PACKET;
 166:Src/main.c    **** 
 167:Src/main.c    **** typedef struct{
 168:Src/main.c    ****     bool rxDone;
 169:Src/main.c    ****     bool rxError;
 170:Src/main.c    ****     bool txDone;
 171:Src/main.c    ****     bool rxTimeout;
 172:Src/main.c    ****     bool txTimeout;
 173:Src/main.c    **** }RadioFlags_t;
 174:Src/main.c    **** RadioFlags_t radioFlags = {
 175:Src/main.c    ****     .txDone = false,
 176:Src/main.c    ****     .rxDone = false,
 177:Src/main.c    ****     .rxError = false,
 178:Src/main.c    ****     .rxTimeout = false,
 179:Src/main.c    ****     .txTimeout = false,
 180:Src/main.c    **** };
 181:Src/main.c    **** 
 182:Src/main.c    **** /*!
 183:Src/main.c    ****  * Radio events function pointer
 184:Src/main.c    ****  */
 185:Src/main.c    **** static RadioCallbacks_t RadioEvents = {
 186:Src/main.c    ****     .txDone = &OnTxDone,
 187:Src/main.c    ****     .txTimeout = &OnTxTimeout,
 188:Src/main.c    ****     .rxDone = &OnRxDone,
 189:Src/main.c    ****     .rxPreambleDetect = NULL,
 190:Src/main.c    ****     .rxHeaderDone = NULL,
 191:Src/main.c    ****     .rxTimeout = &OnRxTimeout,
 192:Src/main.c    ****     .rxError = &OnRxError,
 193:Src/main.c    ****     .cadDone = NULL,
 194:Src/main.c    **** };
 195:Src/main.c    **** 
 196:Src/main.c    **** /*
 197:Src/main.c    ****  *  Global variables declarations
 198:Src/main.c    ****  */
 199:Src/main.c    **** //Radio Radio( NULL );
 200:Src/main.c    **** #define MESSAGE_SIZE 4
 201:Src/main.c    **** typedef uint8_t Messages_t[MESSAGE_SIZE];
 202:Src/main.c    **** const Messages_t PingMsg = {'P', 'I', 'N', 'G'};
 203:Src/main.c    **** const Messages_t PongMsg = {'P', 'O', 'N', 'G'};
 204:Src/main.c    **** const Messages_t *messageToReceive = &PongMsg;
 205:Src/main.c    **** const Messages_t *messageToSend = &PingMsg;
ARM GAS  /tmp/cciXydud.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    **** uint8_t BufferSize = BUFFER_SIZE;
 208:Src/main.c    **** uint8_t Buffer[BUFFER_SIZE];
 209:Src/main.c    **** 
 210:Src/main.c    **** int8_t RssiValue = 0;
 211:Src/main.c    **** int8_t SnrValue = 0;
 212:Src/main.c    **** 
 213:Src/main.c    **** static bool ImageCalibrated = false;
 214:Src/main.c    **** static uint8_t OPT = 1;
 215:Src/main.c    **** 
 216:Src/main.c    **** 
 217:Src/main.c    **** RadioOperatingModes_t OperatingMode;
 218:Src/main.c    **** 
 219:Src/main.c    **** void GetRssiSnr(int8_t *rssi, int8_t *snr);
 220:Src/main.c    **** //SX126xHal Radio( D11, D12, D13, D7, D3, D5, NC, NC, A0, A1, A2, D8, &RadioEvents );
 221:Src/main.c    **** 
 222:Src/main.c    **** void SetToMaster(void);
 223:Src/main.c    **** void SetToSlave(void);
 224:Src/main.c    **** void RunMasterStateMachine();
 225:Src/main.c    **** void RunSlaveStateMachine();
 226:Src/main.c    **** void SetConfiguration(RadioConfigurations_t *config);
 227:Src/main.c    **** //void ConfigureGeneralRadio(SX126xHal *radio, RadioConfigurations_t *config);
 228:Src/main.c    **** //void ConfigureRadioTx(SX126xHal *radio, RadioConfigurations_t *config);
 229:Src/main.c    **** //void ConfigureRadioRx(SX126xHal *radio, RadioConfigurations_t *config);
 230:Src/main.c    **** //void PrepareBuffer(SX126xHal *radio, const Messages_t *messageToSend);
 231:Src/main.c    **** bool isMaster = true;
 232:Src/main.c    **** bool masterCanSend = true;
 233:Src/main.c    **** void MasterSendNextEvent(void){masterCanSend = true;}
 234:Src/main.c    **** bool slaveCanListen = false;
 235:Src/main.c    **** void SlaveListenNextEvent(void){slaveCanListen = true;}
 236:Src/main.c    **** //Ticker masterSendNextTicker;
 237:Src/main.c    **** //Ticker slaveListenNextTicker;
 238:Src/main.c    **** 
 239:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 240:Src/main.c    **** 
 241:Src/main.c    **** /* USER CODE END PV */
 242:Src/main.c    **** 
 243:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 244:Src/main.c    **** void SystemClock_Config(void);
 245:Src/main.c    **** static void MX_GPIO_Init(void);
 246:Src/main.c    **** static void MX_SPI1_Init(void);
 247:Src/main.c    **** 
 248:Src/main.c    **** /* USER CODE BEGIN PFP */
 249:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 250:Src/main.c    **** 
 251:Src/main.c    **** /* USER CODE END PFP */
 252:Src/main.c    **** 
 253:Src/main.c    **** /* USER CODE BEGIN 0 */
 254:Src/main.c    **** 
 255:Src/main.c    **** /* USER CODE END 0 */
 256:Src/main.c    **** 
 257:Src/main.c    **** int main(void)
 258:Src/main.c    **** {
 259:Src/main.c    **** 
 260:Src/main.c    ****   /* USER CODE BEGIN 1 */
 261:Src/main.c    **** 
 262:Src/main.c    ****   /* USER CODE END 1 */
ARM GAS  /tmp/cciXydud.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 267:Src/main.c    ****   HAL_Init();
 268:Src/main.c    **** 
 269:Src/main.c    ****   /* USER CODE BEGIN Init */
 270:Src/main.c    **** 
 271:Src/main.c    ****   /* USER CODE END Init */
 272:Src/main.c    **** 
 273:Src/main.c    ****   /* Configure the system clock */
 274:Src/main.c    ****   SystemClock_Config();
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE END SysInit */
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* Initialize all configured peripherals */
 281:Src/main.c    ****   MX_GPIO_Init();
 282:Src/main.c    ****   MX_SPI1_Init();
 283:Src/main.c    **** 
 284:Src/main.c    **** 
 285:Src/main.c    ****   /* USER CODE BEGIN 2 */
 286:Src/main.c    ****   sx126x_Reset();
 287:Src/main.c    ****   sx126x_Init();
 288:Src/main.c    ****   //serial.baud(115200);
 289:Src/main.c    ****   SetToMaster();
 290:Src/main.c    ****   SetConfiguration(&radioConfiguration);
 291:Src/main.c    ****   ConfigureGeneralRadio(&radioConfiguration);
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* USER CODE END 2 */
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* Infinite loop */
 296:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 297:Src/main.c    ****   while (1)
 298:Src/main.c    ****   {
 299:Src/main.c    ****   /* USER CODE END WHILE */
 300:Src/main.c    **** 
 301:Src/main.c    **** 
 302:Src/main.c    ****   /* USER CODE BEGIN 3 */
 303:Src/main.c    ****     //if(isMaster){
 304:Src/main.c    ****      //RunMasterStateMachine();
 305:Src/main.c    ****     //}
 306:Src/main.c    **** 
 307:Src/main.c    ****     PrepareBuffer(messageToSend);
 308:Src/main.c    ****     ConfigureRadioTx(&radioConfiguration);
 309:Src/main.c    ****     sx126x_SetTx(radioConfiguration.txTimeout);
 310:Src/main.c    **** 
 311:Src/main.c    ****     HAL_Delay(500);
 312:Src/main.c    **** 
 313:Src/main.c    ****   }
 314:Src/main.c    ****   /* USER CODE END 3 */
 315:Src/main.c    **** 
 316:Src/main.c    **** }
 317:Src/main.c    **** 
 318:Src/main.c    **** void ConfigureRadioTx(RadioConfigurations_t *config){
 319:Src/main.c    ****     sx126x_SetDioIrqParams(config->irqTx, config->irqTx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
ARM GAS  /tmp/cciXydud.s 			page 7


 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** void PrepareBuffer(const Messages_t *messageToSend){
 323:Src/main.c    ****     sx126x_SetPayload((uint8_t*)messageToSend, MESSAGE_SIZE);
 324:Src/main.c    **** }
 325:Src/main.c    **** 
 326:Src/main.c    **** void sx126x_SetTx( uint32_t timeout )
 327:Src/main.c    **** {
 328:Src/main.c    ****     uint8_t buf[3];
 329:Src/main.c    **** 
 330:Src/main.c    ****     OperatingMode = MODE_TX;
 331:Src/main.c    **** 
 332:Src/main.c    ****     buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 333:Src/main.c    ****     buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 334:Src/main.c    ****     buf[2] = ( uint8_t )( timeout & 0xFF );
 335:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_TX, buf, 3 );
 336:Src/main.c    **** }
 337:Src/main.c    **** 
 338:Src/main.c    **** void sx126x_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3M
 339:Src/main.c    **** {
 340:Src/main.c    ****     uint8_t buf[8];
 341:Src/main.c    **** 
 342:Src/main.c    **** 
 343:Src/main.c    ****     buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 344:Src/main.c    ****     buf[1] = ( uint8_t )( irqMask & 0x00FF );
 345:Src/main.c    ****     buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 346:Src/main.c    ****     buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 347:Src/main.c    ****     buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 348:Src/main.c    ****     buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 349:Src/main.c    ****     buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 350:Src/main.c    ****     buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 351:Src/main.c    ****     sx126x_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 352:Src/main.c    **** }
 353:Src/main.c    **** 
 354:Src/main.c    **** void sx126x_SetPayload( uint8_t *payload, uint8_t size )
 355:Src/main.c    **** {
 356:Src/main.c    ****     sx126x_WriteBuffer( 0x00, payload, size );
 357:Src/main.c    **** }
 358:Src/main.c    **** 
 359:Src/main.c    **** 
 360:Src/main.c    **** void SetToMaster(){
 361:Src/main.c    ****     //printf("-->Master\n");
 362:Src/main.c    ****     isMaster = true;
 363:Src/main.c    ****     masterCanSend = true;
 364:Src/main.c    ****     State = SEND_PACKET;
 365:Src/main.c    ****     messageToReceive = &PongMsg;
 366:Src/main.c    ****     messageToSend = &PingMsg;
 367:Src/main.c    **** }
 368:Src/main.c    **** 
 369:Src/main.c    **** 
 370:Src/main.c    **** void ConfigureGeneralRadio(RadioConfigurations_t *config){
 371:Src/main.c    ****     sx126x_SetPacketType(config->packetType);
 372:Src/main.c    ****     sx126x_SetPacketParams(&config->packetParams);
 373:Src/main.c    ****     sx126x_SetModulationParams(&config->modParams);
 374:Src/main.c    ****     sx126x_SetRfFrequency(config->rfFrequency);
 375:Src/main.c    ****     sx126x_SetTxParams(config->txPower, config->txRampTime);
 376:Src/main.c    ****     //sx126x_SetInterruptMode();
ARM GAS  /tmp/cciXydud.s 			page 8


 377:Src/main.c    ****     if(config->packetType == PACKET_TYPE_GFSK){
 378:Src/main.c    ****         uint8_t syncword[8] = {0xF0, 0x0F, 0x55, 0xAA, 0xF0, 0x0F, 0x55, 0xAA};
 379:Src/main.c    ****         sx126x_SetSyncWord(syncword);
 380:Src/main.c    ****     }
 381:Src/main.c    **** }
 382:Src/main.c    **** 
 383:Src/main.c    **** void sx126x_SetTxParams( int8_t power, RadioRampTimes_t rampTime )
 384:Src/main.c    **** {
 385:Src/main.c    ****     uint8_t buf[2];
 386:Src/main.c    ****     //DigitalIn OPT( A3 );
 387:Src/main.c    **** 
 388:Src/main.c    ****     //if( GetDeviceType( ) == SX1261 )
 389:Src/main.c    ****     //{
 390:Src/main.c    ****         if( power == 15 )
 391:Src/main.c    ****         {
 392:Src/main.c    ****             sx126x_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 393:Src/main.c    ****         }
 394:Src/main.c    ****         else
 395:Src/main.c    ****         {
 396:Src/main.c    ****             sx126x_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 397:Src/main.c    ****         }
 398:Src/main.c    ****         if( power >= 14 )
 399:Src/main.c    ****         {
 400:Src/main.c    ****             power = 14;
 401:Src/main.c    ****         }
 402:Src/main.c    ****         else if( power < -3 )
 403:Src/main.c    ****         {
 404:Src/main.c    ****             power = -3;
 405:Src/main.c    ****         }
 406:Src/main.c    ****         sx126x_WriteReg( REG_OCP, 0x18, 1 ); // current max is 80 mA for the whole device
 407:Src/main.c    ****     //}
 408:Src/main.c    ****     /*else // sx1262 or sx1268
 409:Src/main.c    ****     {
 410:Src/main.c    ****         SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 411:Src/main.c    ****         if( power > 22 )
 412:Src/main.c    ****         {
 413:Src/main.c    ****             power = 22;
 414:Src/main.c    ****         }
 415:Src/main.c    ****         else if( power < -3 )
 416:Src/main.c    ****         {
 417:Src/main.c    ****             power = -3;
 418:Src/main.c    ****         }
 419:Src/main.c    ****         WriteReg( REG_OCP, 0x38 ); // current max 160mA for the whole device
 420:Src/main.c    ****     }*/
 421:Src/main.c    ****     buf[0] = power;
 422:Src/main.c    ****     if( OPT == 0 )
 423:Src/main.c    ****     {
 424:Src/main.c    ****         if( ( uint8_t )rampTime < RADIO_RAMP_200_US )
 425:Src/main.c    ****         {
 426:Src/main.c    ****             buf[1] = RADIO_RAMP_200_US;
 427:Src/main.c    ****         }
 428:Src/main.c    ****         else
 429:Src/main.c    ****         {
 430:Src/main.c    ****             buf[1] = ( uint8_t )rampTime;
 431:Src/main.c    ****         }
 432:Src/main.c    ****     }
 433:Src/main.c    ****     else
ARM GAS  /tmp/cciXydud.s 			page 9


 434:Src/main.c    ****     {
 435:Src/main.c    ****         buf[1] = ( uint8_t )rampTime;
 436:Src/main.c    ****     }
 437:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 438:Src/main.c    **** }
 439:Src/main.c    **** 
 440:Src/main.c    **** void sx126x_SetPaConfig( uint8_t paDutyCycle, uint8_t HpMax, uint8_t deviceSel, uint8_t paLUT )
 441:Src/main.c    **** {
 442:Src/main.c    ****     uint8_t buf[4];
 443:Src/main.c    **** 
 444:Src/main.c    **** 
 445:Src/main.c    ****     buf[0] = paDutyCycle;
 446:Src/main.c    ****     buf[1] = HpMax;
 447:Src/main.c    ****     buf[2] = deviceSel;
 448:Src/main.c    ****     buf[3] = paLUT;
 449:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 450:Src/main.c    **** }
 451:Src/main.c    **** 
 452:Src/main.c    **** void sx126x_SetRfFrequency( uint32_t frequency )
 453:Src/main.c    **** {
 454:Src/main.c    ****     uint8_t buf[4];
 455:Src/main.c    ****     uint32_t freq = 0;
 456:Src/main.c    **** 
 457:Src/main.c    **** 
 458:Src/main.c    ****     if( ImageCalibrated == false )
 459:Src/main.c    ****     {
 460:Src/main.c    ****         sx126x_CalibrateImage( frequency );
 461:Src/main.c    ****         ImageCalibrated = true;
 462:Src/main.c    ****     }
 463:Src/main.c    **** 
 464:Src/main.c    ****     freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 465:Src/main.c    ****     buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 466:Src/main.c    ****     buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 467:Src/main.c    ****     buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 468:Src/main.c    ****     buf[3] = ( uint8_t )( freq & 0xFF );
 469:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 470:Src/main.c    **** }
 471:Src/main.c    **** 
 472:Src/main.c    **** 
 473:Src/main.c    **** void sx126x_CalibrateImage( uint32_t freq )
 474:Src/main.c    **** {
 475:Src/main.c    ****     uint8_t calFreq[2];
 476:Src/main.c    **** 
 477:Src/main.c    ****     if( freq > 900000000 )
 478:Src/main.c    ****     {
 479:Src/main.c    ****         calFreq[0] = 0xE1;
 480:Src/main.c    ****         calFreq[1] = 0xE9;
 481:Src/main.c    ****     }
 482:Src/main.c    ****     else if( freq > 850000000 )
 483:Src/main.c    ****     {
 484:Src/main.c    ****         calFreq[0] = 0xD7;
 485:Src/main.c    ****         calFreq[1] = 0xD8;
 486:Src/main.c    ****     }
 487:Src/main.c    ****     else if( freq > 770000000 )
 488:Src/main.c    ****     {
 489:Src/main.c    ****         calFreq[0] = 0xC1;
 490:Src/main.c    ****         calFreq[1] = 0xC5;
ARM GAS  /tmp/cciXydud.s 			page 10


 491:Src/main.c    ****     }
 492:Src/main.c    ****     else if( freq > 460000000 )
 493:Src/main.c    ****     {
 494:Src/main.c    ****         calFreq[0] = 0x75;
 495:Src/main.c    ****         calFreq[1] = 0x81;
 496:Src/main.c    ****     }
 497:Src/main.c    ****     else if( freq > 425000000 )
 498:Src/main.c    ****     {
 499:Src/main.c    ****         calFreq[0] = 0x6B;
 500:Src/main.c    ****         calFreq[1] = 0x6F;
 501:Src/main.c    ****     }
 502:Src/main.c    ****     sx126x_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 503:Src/main.c    **** }
 504:Src/main.c    **** 
 505:Src/main.c    **** void sx126x_SetModulationParams( ModulationParams_t *modulationParams )
 506:Src/main.c    **** {
 507:Src/main.c    ****     uint8_t n;
 508:Src/main.c    ****     uint32_t tempVal = 0;
 509:Src/main.c    ****     uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 510:Src/main.c    **** 
 511:Src/main.c    **** 
 512:Src/main.c    ****     // Check if required configuration corresponds to the stored packet type
 513:Src/main.c    ****     // If not, silently update radio packet type
 514:Src/main.c    ****     /*if( this->PacketType != modulationParams->PacketType )
 515:Src/main.c    ****     {
 516:Src/main.c    ****         this->SetPacketType( modulationParams->PacketType );
 517:Src/main.c    ****     }*/
 518:Src/main.c    **** 
 519:Src/main.c    ****     switch( modulationParams->PacketType )
 520:Src/main.c    ****     {
 521:Src/main.c    ****     case PACKET_TYPE_GFSK:
 522:Src/main.c    ****         n = 8;
 523:Src/main.c    ****         tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfs
 524:Src/main.c    ****         buf[0] = ( tempVal >> 16 ) & 0xFF;
 525:Src/main.c    ****         buf[1] = ( tempVal >> 8 ) & 0xFF;
 526:Src/main.c    ****         buf[2] = tempVal & 0xFF;
 527:Src/main.c    ****         buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 528:Src/main.c    ****         buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 529:Src/main.c    ****         tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP 
 530:Src/main.c    ****         buf[5] = ( tempVal >> 16 ) & 0xFF;
 531:Src/main.c    ****         buf[6] = ( tempVal >> 8 ) & 0xFF;
 532:Src/main.c    ****         buf[7] = ( tempVal& 0xFF );
 533:Src/main.c    ****         break;
 534:Src/main.c    ****     case PACKET_TYPE_LORA:
 535:Src/main.c    ****         n = 4;
 536:Src/main.c    ****         switch( modulationParams->Params.LoRa.Bandwidth )
 537:Src/main.c    ****         {
 538:Src/main.c    ****             case LORA_BW_500:
 539:Src/main.c    ****                  modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 540:Src/main.c    ****                 break;
 541:Src/main.c    ****             case LORA_BW_250:
 542:Src/main.c    ****                 if( modulationParams->Params.LoRa.SpreadingFactor == 12 )
 543:Src/main.c    ****                 {
 544:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 545:Src/main.c    ****                 }
 546:Src/main.c    ****                 else
 547:Src/main.c    ****                 {
ARM GAS  /tmp/cciXydud.s 			page 11


 548:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 549:Src/main.c    ****                 }
 550:Src/main.c    ****                 break;
 551:Src/main.c    ****             case LORA_BW_125:
 552:Src/main.c    ****                 if( modulationParams->Params.LoRa.SpreadingFactor >= 11 )
 553:Src/main.c    ****                 {
 554:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 555:Src/main.c    ****                 }
 556:Src/main.c    ****                 else
 557:Src/main.c    ****                 {
 558:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 559:Src/main.c    ****                 }
 560:Src/main.c    ****                 break;
 561:Src/main.c    ****             case LORA_BW_062:
 562:Src/main.c    ****                 if( modulationParams->Params.LoRa.SpreadingFactor >= 10 )
 563:Src/main.c    ****                 {
 564:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 565:Src/main.c    ****                 }
 566:Src/main.c    ****                 else
 567:Src/main.c    ****                 {
 568:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 569:Src/main.c    ****                 }
 570:Src/main.c    ****                 break;
 571:Src/main.c    ****             case LORA_BW_041:
 572:Src/main.c    ****                 if( modulationParams->Params.LoRa.SpreadingFactor >= 9 )
 573:Src/main.c    ****                 {
 574:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 575:Src/main.c    ****                 }
 576:Src/main.c    ****                 else
 577:Src/main.c    ****                 {
 578:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 579:Src/main.c    ****                 }
 580:Src/main.c    ****                 break;
 581:Src/main.c    ****             case LORA_BW_031:
 582:Src/main.c    ****             case LORA_BW_020:
 583:Src/main.c    ****             case LORA_BW_015:
 584:Src/main.c    ****             case LORA_BW_010:
 585:Src/main.c    ****             case LORA_BW_007:
 586:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 587:Src/main.c    ****                 break;
 588:Src/main.c    ****             default:
 589:Src/main.c    ****                 break;
 590:Src/main.c    ****         }
 591:Src/main.c    ****         buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 592:Src/main.c    ****         buf[1] = modulationParams->Params.LoRa.Bandwidth;
 593:Src/main.c    ****         buf[2] = modulationParams->Params.LoRa.CodingRate;
 594:Src/main.c    ****         buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 595:Src/main.c    ****         break;
 596:Src/main.c    ****     default:
 597:Src/main.c    ****     case PACKET_TYPE_NONE:
 598:Src/main.c    ****         return;
 599:Src/main.c    ****     }
 600:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 601:Src/main.c    **** }
 602:Src/main.c    **** 
 603:Src/main.c    **** void sx126x_SetSyncWord( uint8_t *syncWord )
 604:Src/main.c    **** {
ARM GAS  /tmp/cciXydud.s 			page 12


 605:Src/main.c    ****     sx126x_WriteReg( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 606:Src/main.c    ****     //return 0;
 607:Src/main.c    **** }
 608:Src/main.c    **** 
 609:Src/main.c    **** 
 610:Src/main.c    **** void sx126x_SetPacketParams( PacketParams_t *packetParams )
 611:Src/main.c    **** {
 612:Src/main.c    ****     uint8_t n;
 613:Src/main.c    ****     uint8_t crcVal = 0;
 614:Src/main.c    ****     uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 615:Src/main.c    **** 
 616:Src/main.c    **** 
 617:Src/main.c    ****     // Check if required configuration corresponds to the stored packet type
 618:Src/main.c    ****     // If not, silently update radio packet type
 619:Src/main.c    ****     /*if( this->PacketType != packetParams->PacketType )
 620:Src/main.c    ****     {
 621:Src/main.c    ****         this->SetPacketType( packetParams->PacketType );
 622:Src/main.c    ****     }*/
 623:Src/main.c    **** 
 624:Src/main.c    ****     //sx126x_SetPacketType( packetParams->PacketType );
 625:Src/main.c    **** 
 626:Src/main.c    ****     switch( packetParams->PacketType )
 627:Src/main.c    ****     {
 628:Src/main.c    ****     case PACKET_TYPE_GFSK:
 629:Src/main.c    ****         if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 630:Src/main.c    ****         {
 631:Src/main.c    ****             sx126x_SetCrcSeed( CRC_IBM_SEED );
 632:Src/main.c    ****             sx126x_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 633:Src/main.c    ****             crcVal = RADIO_CRC_2_BYTES;
 634:Src/main.c    ****         }
 635:Src/main.c    ****         else if(  packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 636:Src/main.c    ****         {
 637:Src/main.c    ****             sx126x_SetCrcSeed( CRC_CCITT_SEED );
 638:Src/main.c    ****             sx126x_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 639:Src/main.c    ****             crcVal = RADIO_CRC_2_BYTES_INV;
 640:Src/main.c    ****         }
 641:Src/main.c    ****         else
 642:Src/main.c    ****         {
 643:Src/main.c    ****             crcVal = packetParams->Params.Gfsk.CrcLength;
 644:Src/main.c    ****         }
 645:Src/main.c    ****         n = 9;
 646:Src/main.c    ****         // convert preamble length from byte to bit
 647:Src/main.c    ****         packetParams->Params.Gfsk.PreambleLength = packetParams->Params.Gfsk.PreambleLength << 3;
 648:Src/main.c    **** 
 649:Src/main.c    ****         buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 650:Src/main.c    ****         buf[1] = packetParams->Params.Gfsk.PreambleLength;
 651:Src/main.c    ****         buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 652:Src/main.c    ****         buf[3] = ( packetParams->Params.Gfsk.SyncWordLength << 3 ); // convert from byte to bit
 653:Src/main.c    ****         buf[4] = packetParams->Params.Gfsk.AddrComp;
 654:Src/main.c    ****         buf[5] = packetParams->Params.Gfsk.HeaderType;
 655:Src/main.c    ****         buf[6] = packetParams->Params.Gfsk.PayloadLength;
 656:Src/main.c    ****         buf[7] = crcVal;
 657:Src/main.c    ****         buf[8] = packetParams->Params.Gfsk.DcFree;
 658:Src/main.c    ****         break;
 659:Src/main.c    ****     case PACKET_TYPE_LORA:
 660:Src/main.c    ****         n = 6;
 661:Src/main.c    ****         buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
ARM GAS  /tmp/cciXydud.s 			page 13


 662:Src/main.c    ****         buf[1] = packetParams->Params.LoRa.PreambleLength;
 663:Src/main.c    ****         buf[2] = packetParams->Params.LoRa.HeaderType;
 664:Src/main.c    ****         buf[3] = packetParams->Params.LoRa.PayloadLength;
 665:Src/main.c    ****         buf[4] = packetParams->Params.LoRa.CrcMode;
 666:Src/main.c    ****         buf[5] = packetParams->Params.LoRa.InvertIQ;
 667:Src/main.c    ****         break;
 668:Src/main.c    ****     default:
 669:Src/main.c    ****     case PACKET_TYPE_NONE:
 670:Src/main.c    ****         return;
 671:Src/main.c    ****     }
 672:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 673:Src/main.c    **** }
 674:Src/main.c    **** 
 675:Src/main.c    **** 
 676:Src/main.c    **** void sx126x_SetCrcSeed( uint16_t seed )
 677:Src/main.c    **** {
 678:Src/main.c    ****     uint8_t buf[2];
 679:Src/main.c    **** 
 680:Src/main.c    ****     buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 681:Src/main.c    ****     buf[1] = ( uint8_t )( seed & 0xFF );
 682:Src/main.c    **** 
 683:Src/main.c    ****     if (USE_MODEM_LORA == 0)
 684:Src/main.c    ****     {
 685:Src/main.c    ****         sx126x_WriteRegister( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 686:Src/main.c    ****         return;
 687:Src/main.c    ****     } else {
 688:Src/main.c    ****         return;
 689:Src/main.c    ****     }
 690:Src/main.c    **** }
 691:Src/main.c    **** 
 692:Src/main.c    **** void sx126x_SetCrcPolynomial( uint16_t polynomial )
 693:Src/main.c    **** {
 694:Src/main.c    ****     uint8_t buf[2];
 695:Src/main.c    **** 
 696:Src/main.c    ****     buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 697:Src/main.c    ****     buf[1] = ( uint8_t )( polynomial & 0xFF );
 698:Src/main.c    **** 
 699:Src/main.c    ****     if (USE_MODEM_LORA == 0)
 700:Src/main.c    ****     {
 701:Src/main.c    ****         sx126x_WriteRegister( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 702:Src/main.c    ****         return;
 703:Src/main.c    ****     } else {
 704:Src/main.c    ****         return;
 705:Src/main.c    ****     }
 706:Src/main.c    **** }
 707:Src/main.c    **** 
 708:Src/main.c    **** void sx126x_SetPacketType( RadioPacketTypes_t packetType )
 709:Src/main.c    **** {
 710:Src/main.c    ****     // Save packet type internally to avoid questioning the radio
 711:Src/main.c    ****     //this->PacketType = packetType;
 712:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 713:Src/main.c    **** }
 714:Src/main.c    **** 
 715:Src/main.c    **** 
 716:Src/main.c    **** void SetConfiguration(RadioConfigurations_t *config){
 717:Src/main.c    ****     config->irqRx = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 718:Src/main.c    ****     config->irqTx = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
ARM GAS  /tmp/cciXydud.s 			page 14


 719:Src/main.c    ****     config->rfFrequency = RF_FREQUENCY;
 720:Src/main.c    ****     config->txTimeout = 0;
 721:Src/main.c    ****     config->rxTimeout = (uint32_t)(RX_TIMEOUT_US / 15.625);
 722:Src/main.c    ****     config->txPower = TX_OUTPUT_POWER;
 723:Src/main.c    ****     config->txRampTime = RADIO_RAMP_200_US;
 724:Src/main.c    ****     #if USE_MODEM_LORA == 1
 725:Src/main.c    ****         config->packetType = PACKET_TYPE_LORA;
 726:Src/main.c    ****         config->modParams.PacketType = PACKET_TYPE_LORA;
 727:Src/main.c    ****         config->modParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 728:Src/main.c    ****         config->modParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 729:Src/main.c    ****         config->modParams.Params.LoRa.LowDatarateOptimize = LORA_LOWDATARATEOPTIMIZE;
 730:Src/main.c    ****         config->modParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 731:Src/main.c    ****         config->packetParams.PacketType = PACKET_TYPE_LORA;
 732:Src/main.c    ****         config->packetParams.Params.LoRa.CrcMode = LORA_CRC_MODE;
 733:Src/main.c    ****         config->packetParams.Params.LoRa.HeaderType = LORA_HEADER_TYPE;
 734:Src/main.c    ****         config->packetParams.Params.LoRa.InvertIQ = LORA_IQ;
 735:Src/main.c    ****         config->packetParams.Params.LoRa.PayloadLength = BUFFER_SIZE;
 736:Src/main.c    ****         config->packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 737:Src/main.c    ****     #elif USE_MODEM_FSK == 1
 738:Src/main.c    ****         config->packetType = PACKET_TYPE_GFSK;
 739:Src/main.c    ****         config->modParams.PacketType = PACKET_TYPE_GFSK;
 740:Src/main.c    ****         config->modParams.Params.Gfsk.Bandwidth = FSK_BANDWIDTH;
 741:Src/main.c    ****         config->modParams.Params.Gfsk.BitRate = 1024000000 / FSK_DATARATE;
 742:Src/main.c    ****         config->modParams.Params.Gfsk.Fdev = FSK_FDEV * 1.048576;
 743:Src/main.c    ****         config->modParams.Params.Gfsk.ModulationShaping = FSK_MODULATION_SHAPPING;
 744:Src/main.c    ****         config->packetParams.PacketType = PACKET_TYPE_GFSK;
 745:Src/main.c    ****         config->packetParams.Params.Gfsk.AddrComp = FSK_ADDR_FILTERING;
 746:Src/main.c    ****         config->packetParams.Params.Gfsk.CrcLength = FSK_CRC_MODE;
 747:Src/main.c    ****         config->packetParams.Params.Gfsk.DcFree = FSK_WHITENING_MODE;
 748:Src/main.c    ****         config->packetParams.Params.Gfsk.HeaderType = FSK_HEADER_TYPE;
 749:Src/main.c    ****         config->packetParams.Params.Gfsk.PayloadLength = BUFFER_SIZE;
 750:Src/main.c    ****         config->packetParams.Params.Gfsk.PreambleLength = FSK_PREAMBLE_LENGTH;
 751:Src/main.c    ****         config->packetParams.Params.Gfsk.PreambleMinDetect = FSK_PREAMBLE_DETECTOR_MODE;
 752:Src/main.c    ****         config->packetParams.Params.Gfsk.SyncWordLength = FSK_SYNCWORD_LENGTH;
 753:Src/main.c    ****     #endif
 754:Src/main.c    **** }
 755:Src/main.c    **** 
 756:Src/main.c    **** void sx126x_Reset() {
 757:Src/main.c    ****       //__disable_irq( );
 758:Src/main.c    ****       HAL_Delay(20);
 759:Src/main.c    ****       HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, 0);
 760:Src/main.c    ****       HAL_Delay(50);
 761:Src/main.c    ****       HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, 1);
 762:Src/main.c    ****       //RadioReset.input( ); // Using the internal pull-up
 763:Src/main.c    ****       HAL_Delay(20);
 764:Src/main.c    ****       //__enable_irq( );
 765:Src/main.c    **** 
 766:Src/main.c    **** }
 767:Src/main.c    **** 
 768:Src/main.c    **** void sx126x_SetStandby( RadioStandbyModes_t standbyConfig )
 769:Src/main.c    **** {
 770:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 771:Src/main.c    ****     if( standbyConfig == STDBY_RC )
 772:Src/main.c    ****     {
 773:Src/main.c    ****         OperatingMode = MODE_STDBY_RC;
 774:Src/main.c    ****     }
 775:Src/main.c    ****     else
ARM GAS  /tmp/cciXydud.s 			page 15


 776:Src/main.c    ****     {
 777:Src/main.c    ****         OperatingMode = MODE_STDBY_XOSC;
 778:Src/main.c    ****     }
 779:Src/main.c    **** }
 780:Src/main.c    **** 
 781:Src/main.c    **** void sx126x_Init() {
 782:Src/main.c    ****   sx126x_Reset();
 783:Src/main.c    ****   sx126x_Wakeup();
 784:Src/main.c    ****   sx126x_SetStandby( STDBY_RC );
 785:Src/main.c    **** 
 786:Src/main.c    ****   //SetPollingMode( );
 787:Src/main.c    **** 
 788:Src/main.c    ****   sx126x_AntSwOn( );
 789:Src/main.c    ****   sx126x_SetDio2AsRfSwitchCtrl( true );
 790:Src/main.c    **** 
 791:Src/main.c    **** 
 792:Src/main.c    ****   OperatingMode = MODE_STDBY_RC;
 793:Src/main.c    **** 
 794:Src/main.c    ****   sx126x_SetPacketType( PACKET_TYPE_LORA );
 795:Src/main.c    **** 
 796:Src/main.c    ****   #ifdef USE_CONFIG_PUBLIC_NETOWRK
 797:Src/main.c    ****     // Change LoRa modem Sync Word for Public Networks
 798:Src/main.c    ****     sx126x_WriteReg( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF , 1);
 799:Src/main.c    ****     sx126x_WriteReg( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF , 1);
 800:Src/main.c    ****   #else
 801:Src/main.c    ****     // Change LoRa modem SyncWord for Private Networks
 802:Src/main.c    ****     sx126x_WriteReg( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF , 1);
 803:Src/main.c    ****     sx126x_WriteReg( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF , 1);
 804:Src/main.c    ****   #endif
 805:Src/main.c    **** }
 806:Src/main.c    **** 
 807:Src/main.c    **** 
 808:Src/main.c    **** void sx126x_WriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
 809:Src/main.c    **** {
 810:Src/main.c    ****     sx126x_WaitOnBusy( );
 811:Src/main.c    **** 
 812:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 813:Src/main.c    ****     uint8_t buf = (uint8_t)command;
 814:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
 815:Src/main.c    ****     //for( uint16_t i = 0; i < size; i++ )
 816:Src/main.c    ****     //{
 817:Src/main.c    ****         HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 818:Src/main.c    ****     //}
 819:Src/main.c    **** 
 820:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 821:Src/main.c    **** 
 822:Src/main.c    **** 
 823:Src/main.c    ****     sx126x_WaitOnCounter( );
 824:Src/main.c    **** }
 825:Src/main.c    **** 
 826:Src/main.c    **** void sx126x_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
 827:Src/main.c    **** {
 828:Src/main.c    ****     sx126x_WaitOnBusy( );
 829:Src/main.c    **** 
 830:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 831:Src/main.c    ****     uint8_t buf = RADIO_WRITE_BUFFER;
 832:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
ARM GAS  /tmp/cciXydud.s 			page 16


 833:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &offset, 1, HAL_MAX_DELAY);
 834:Src/main.c    ****     //for( uint16_t i = 0; i < size; i++ )
 835:Src/main.c    ****     //{
 836:Src/main.c    ****       HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 837:Src/main.c    ****     //}
 838:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 839:Src/main.c    **** 
 840:Src/main.c    **** }
 841:Src/main.c    **** 
 842:Src/main.c    **** void sx126x_WriteReg( uint16_t address, uint8_t *buffer, uint16_t size )
 843:Src/main.c    **** {
 844:Src/main.c    ****     sx126x_WaitOnBusy( );
 845:Src/main.c    **** 
 846:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 847:Src/main.c    ****     uint8_t buf[3];
 848:Src/main.c    **** 
 849:Src/main.c    ****     buf[0] = ( uint8_t )RADIO_WRITE_REGISTER;
 850:Src/main.c    ****     buf[1] = ( uint8_t )( address & 0xFF00 ) >> 8;
 851:Src/main.c    ****     buf[2] = ( uint8_t )( address & 0x00FF );
 852:Src/main.c    **** 
 853:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, buf, 3, HAL_MAX_DELAY);
 854:Src/main.c    **** 
 855:Src/main.c    ****     //for( uint16_t i = 0; i < size; i++ )
 856:Src/main.c    ****     //{
 857:Src/main.c    ****         HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 858:Src/main.c    ****     //}
 859:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 860:Src/main.c    **** }
 861:Src/main.c    **** 
 862:Src/main.c    **** void sx126x_WaitOnCounter( ) {
 863:Src/main.c    ****   for( uint8_t counter = 0; counter < 15; counter++ )
 864:Src/main.c    ****     {  __NOP( ); }
 865:Src/main.c    **** }
 866:Src/main.c    **** 
 867:Src/main.c    **** void sx126x_SetDio2AsRfSwitchCtrl( uint8_t enable ){
 868:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 869:Src/main.c    **** }
 870:Src/main.c    **** 
 871:Src/main.c    **** 
 872:Src/main.c    **** void sx126x_Wakeup( void )
 873:Src/main.c    **** {
 874:Src/main.c    ****     //__disable_irq( );
 875:Src/main.c    **** 
 876:Src/main.c    ****     //Don't wait for BUSY here
 877:Src/main.c    **** 
 878:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 879:Src/main.c    ****     uint8_t buf = RADIO_GET_STATUS;
 880:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
 881:Src/main.c    ****     buf = 0;
 882:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
 883:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 884:Src/main.c    **** 
 885:Src/main.c    **** 
 886:Src/main.c    ****     // Wait for chip to be ready.
 887:Src/main.c    ****     sx126x_WaitOnBusy( );
 888:Src/main.c    **** 
 889:Src/main.c    ****     //__enable_irq( );
ARM GAS  /tmp/cciXydud.s 			page 17


 890:Src/main.c    **** 
 891:Src/main.c    ****     sx126x_AntSwOn( );
 892:Src/main.c    **** }
 893:Src/main.c    **** 
 894:Src/main.c    **** void sx126x_AntSwOn()
 895:Src/main.c    **** {
 896:Src/main.c    ****     HAL_GPIO_WritePin(ANTSW_GPIO_Port, ANTSW_Pin, 1);
 897:Src/main.c    **** }
 898:Src/main.c    **** 
 899:Src/main.c    **** void sx126x_AntSwOff()
 900:Src/main.c    **** {
 901:Src/main.c    ****     HAL_GPIO_WritePin(ANTSW_GPIO_Port, ANTSW_Pin, 0);
 902:Src/main.c    **** }
 903:Src/main.c    **** 
 904:Src/main.c    **** void sx126x_WaitOnBusy() {
 905:Src/main.c    ****   while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin) == 1) {}
 906:Src/main.c    **** }
 907:Src/main.c    **** 
 908:Src/main.c    **** /** System Clock Configuration
 909:Src/main.c    **** */
 910:Src/main.c    **** void SystemClock_Config(void)
 911:Src/main.c    **** {
 912:Src/main.c    **** 
 913:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 914:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 915:Src/main.c    **** 
 916:Src/main.c    ****     /**Configure the main internal regulator output voltage
 917:Src/main.c    ****     */
 918:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 919:Src/main.c    **** 
 920:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 921:Src/main.c    ****     */
 922:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 923:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 924:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 925:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 926:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 927:Src/main.c    ****   {
 928:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 929:Src/main.c    ****   }
 930:Src/main.c    **** 
 931:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 932:Src/main.c    ****     */
 933:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 934:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 935:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 936:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 937:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 938:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 939:Src/main.c    **** 
 940:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 941:Src/main.c    ****   {
 942:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 943:Src/main.c    ****   }
 944:Src/main.c    **** 
 945:Src/main.c    ****     /**Configure the Systick interrupt time
 946:Src/main.c    ****     */
ARM GAS  /tmp/cciXydud.s 			page 18


 947:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 948:Src/main.c    **** 
 949:Src/main.c    ****     /**Configure the Systick
 950:Src/main.c    ****     */
 951:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 952:Src/main.c    **** 
 953:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 954:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 955:Src/main.c    **** }
 956:Src/main.c    **** 
 957:Src/main.c    **** /* SPI1 init function */
 958:Src/main.c    **** static void MX_SPI1_Init(void)
 959:Src/main.c    **** {
 960:Src/main.c    **** 
 961:Src/main.c    ****   hspi1.Instance = SPI1;
 962:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 963:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 964:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 965:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 966:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 967:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 968:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 969:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 970:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 971:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 972:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 973:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 974:Src/main.c    ****   {
 975:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 976:Src/main.c    ****   }
 977:Src/main.c    **** 
 978:Src/main.c    **** }
 979:Src/main.c    **** 
 980:Src/main.c    **** /** Configure pins as
 981:Src/main.c    ****         * Analog
 982:Src/main.c    ****         * Input
 983:Src/main.c    ****         * Output
 984:Src/main.c    ****         * EVENT_OUT
 985:Src/main.c    ****         * EXTI
 986:Src/main.c    **** */
 987:Src/main.c    **** static void MX_GPIO_Init(void)
 988:Src/main.c    **** {
  25              		.loc 1 988 0
  26              		.cfi_startproc
  27 0000 70B5     		push	{r4, r5, r6, lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 16
  30              		.cfi_offset 4, -16
  31              		.cfi_offset 5, -12
  32              		.cfi_offset 6, -8
  33              		.cfi_offset 14, -4
  34 0002 88B0     		sub	sp, sp, #32
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 48
  37              	.LBB5:
 989:Src/main.c    **** 
 990:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
ARM GAS  /tmp/cciXydud.s 			page 19


 991:Src/main.c    **** 
 992:Src/main.c    ****   /* GPIO Ports Clock Enable */
 993:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  38              		.loc 1 993 0
  39 0004 234B     		ldr	r3, .L2
  40 0006 DA6A     		ldr	r2, [r3, #44]
  41 0008 0124     		mov	r4, #1
  42 000a 2243     		orr	r2, r4
  43 000c DA62     		str	r2, [r3, #44]
  44 000e DA6A     		ldr	r2, [r3, #44]
  45 0010 2240     		and	r2, r4
  46 0012 0192     		str	r2, [sp, #4]
  47 0014 019A     		ldr	r2, [sp, #4]
  48              	.LBE5:
  49              	.LBB6:
 994:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  50              		.loc 1 994 0
  51 0016 D96A     		ldr	r1, [r3, #44]
  52 0018 0222     		mov	r2, #2
  53 001a 1143     		orr	r1, r2
  54 001c D962     		str	r1, [r3, #44]
  55 001e DB6A     		ldr	r3, [r3, #44]
  56 0020 1A40     		and	r2, r3
  57 0022 0292     		str	r2, [sp, #8]
  58 0024 029B     		ldr	r3, [sp, #8]
  59              	.LBE6:
 995:Src/main.c    **** 
 996:Src/main.c    ****   /*Configure GPIO pin Output Level */
 997:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|ANTSW_Pin, GPIO_PIN_RESET);
  60              		.loc 1 997 0
  61 0026 A026     		mov	r6, #160
  62 0028 F605     		lsl	r6, r6, #23
  63 002a 301C     		mov	r0, r6
  64 002c 1A49     		ldr	r1, .L2+4
  65 002e 0022     		mov	r2, #0
  66 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
  67              	.LVL0:
 998:Src/main.c    **** 
 999:Src/main.c    ****   /*Configure GPIO pin : RESET_Pin */
1000:Src/main.c    ****   GPIO_InitStruct.Pin = RESET_Pin;
  68              		.loc 1 1000 0
  69 0034 0394     		str	r4, [sp, #12]
1001:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  70              		.loc 1 1001 0
  71 0036 0494     		str	r4, [sp, #16]
1002:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  72              		.loc 1 1002 0
  73 0038 0025     		mov	r5, #0
  74 003a 0595     		str	r5, [sp, #20]
1003:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  75              		.loc 1 1003 0
  76 003c 0695     		str	r5, [sp, #24]
1004:Src/main.c    ****   HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
  77              		.loc 1 1004 0
  78 003e 301C     		mov	r0, r6
  79 0040 03A9     		add	r1, sp, #12
  80 0042 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cciXydud.s 			page 20


  81              	.LVL1:
1005:Src/main.c    **** 
1006:Src/main.c    ****   /*Configure GPIO pins : NSS_Pin ANTSW_Pin */
1007:Src/main.c    ****   GPIO_InitStruct.Pin = NSS_Pin|ANTSW_Pin;
  82              		.loc 1 1007 0
  83 0046 C023     		mov	r3, #192
  84 0048 9B00     		lsl	r3, r3, #2
  85 004a 0393     		str	r3, [sp, #12]
1008:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  86              		.loc 1 1008 0
  87 004c 0494     		str	r4, [sp, #16]
1009:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 1009 0
  89 004e 0595     		str	r5, [sp, #20]
1010:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  90              		.loc 1 1010 0
  91 0050 0323     		mov	r3, #3
  92 0052 0693     		str	r3, [sp, #24]
1011:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 1011 0
  94 0054 301C     		mov	r0, r6
  95 0056 03A9     		add	r1, sp, #12
  96 0058 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
1012:Src/main.c    **** 
1013:Src/main.c    ****   /*Configure GPIO pin : BUSY_Pin */
1014:Src/main.c    ****   GPIO_InitStruct.Pin = BUSY_Pin;
  98              		.loc 1 1014 0
  99 005c 0823     		mov	r3, #8
 100 005e 0393     		str	r3, [sp, #12]
1015:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 101              		.loc 1 1015 0
 102 0060 0495     		str	r5, [sp, #16]
1016:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 1016 0
 104 0062 0595     		str	r5, [sp, #20]
1017:Src/main.c    ****   HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 105              		.loc 1 1017 0
 106 0064 0D4D     		ldr	r5, .L2+8
 107 0066 281C     		mov	r0, r5
 108 0068 03A9     		add	r1, sp, #12
 109 006a FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL3:
1018:Src/main.c    **** 
1019:Src/main.c    ****   /*Configure GPIO pin : DIO1_Pin */
1020:Src/main.c    ****   GPIO_InitStruct.Pin = DIO1_Pin;
 111              		.loc 1 1020 0
 112 006e 1023     		mov	r3, #16
 113 0070 0393     		str	r3, [sp, #12]
1021:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 114              		.loc 1 1021 0
 115 0072 0B4B     		ldr	r3, .L2+12
 116 0074 0493     		str	r3, [sp, #16]
1022:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 117              		.loc 1 1022 0
 118 0076 0594     		str	r4, [sp, #20]
1023:Src/main.c    ****   HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
ARM GAS  /tmp/cciXydud.s 			page 21


 119              		.loc 1 1023 0
 120 0078 281C     		mov	r0, r5
 121 007a 03A9     		add	r1, sp, #12
 122 007c FFF7FEFF 		bl	HAL_GPIO_Init
 123              	.LVL4:
1024:Src/main.c    **** 
1025:Src/main.c    ****   /* EXTI interrupt init*/
1026:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 124              		.loc 1 1026 0
 125 0080 0720     		mov	r0, #7
 126 0082 0021     		mov	r1, #0
 127 0084 0022     		mov	r2, #0
 128 0086 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 129              	.LVL5:
1027:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 130              		.loc 1 1027 0
 131 008a 0720     		mov	r0, #7
 132 008c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 133              	.LVL6:
1028:Src/main.c    **** 
1029:Src/main.c    **** }
 134              		.loc 1 1029 0
 135 0090 08B0     		add	sp, sp, #32
 136              		@ sp needed
 137 0092 70BD     		pop	{r4, r5, r6, pc}
 138              	.L3:
 139              		.align	2
 140              	.L2:
 141 0094 00100240 		.word	1073876992
 142 0098 01030000 		.word	769
 143 009c 00040050 		.word	1342178304
 144 00a0 00002110 		.word	270598144
 145              		.cfi_endproc
 146              	.LFE71:
 148              		.section	.text.MasterSendNextEvent,"ax",%progbits
 149              		.align	2
 150              		.global	MasterSendNextEvent
 151              		.code	16
 152              		.thumb_func
 154              	MasterSendNextEvent:
 155              	.LFB36:
 233:Src/main.c    **** void MasterSendNextEvent(void){masterCanSend = true;}
 156              		.loc 1 233 0
 157              		.cfi_startproc
 233:Src/main.c    **** void MasterSendNextEvent(void){masterCanSend = true;}
 158              		.loc 1 233 0
 159 0000 0122     		mov	r2, #1
 160 0002 014B     		ldr	r3, .L5
 161 0004 1A70     		strb	r2, [r3]
 162              		@ sp needed
 163 0006 7047     		bx	lr
 164              	.L6:
 165              		.align	2
 166              	.L5:
 167 0008 00000000 		.word	.LANCHOR0
 168              		.cfi_endproc
 169              	.LFE36:
ARM GAS  /tmp/cciXydud.s 			page 22


 171              		.section	.text.SlaveListenNextEvent,"ax",%progbits
 172              		.align	2
 173              		.global	SlaveListenNextEvent
 174              		.code	16
 175              		.thumb_func
 177              	SlaveListenNextEvent:
 178              	.LFB37:
 235:Src/main.c    **** void SlaveListenNextEvent(void){slaveCanListen = true;}
 179              		.loc 1 235 0
 180              		.cfi_startproc
 235:Src/main.c    **** void SlaveListenNextEvent(void){slaveCanListen = true;}
 181              		.loc 1 235 0
 182 0000 0122     		mov	r2, #1
 183 0002 014B     		ldr	r3, .L8
 184 0004 1A70     		strb	r2, [r3]
 185              		@ sp needed
 186 0006 7047     		bx	lr
 187              	.L9:
 188              		.align	2
 189              	.L8:
 190 0008 00000000 		.word	.LANCHOR1
 191              		.cfi_endproc
 192              	.LFE37:
 194              		.section	.text.SetToMaster,"ax",%progbits
 195              		.align	2
 196              		.global	SetToMaster
 197              		.code	16
 198              		.thumb_func
 200              	SetToMaster:
 201              	.LFB44:
 360:Src/main.c    **** void SetToMaster(){
 202              		.loc 1 360 0
 203              		.cfi_startproc
 362:Src/main.c    ****     isMaster = true;
 204              		.loc 1 362 0
 205 0000 0123     		mov	r3, #1
 206 0002 074A     		ldr	r2, .L11
 207 0004 1370     		strb	r3, [r2]
 363:Src/main.c    ****     masterCanSend = true;
 208              		.loc 1 363 0
 209 0006 074A     		ldr	r2, .L11+4
 210 0008 1370     		strb	r3, [r2]
 364:Src/main.c    ****     State = SEND_PACKET;
 211              		.loc 1 364 0
 212 000a 0022     		mov	r2, #0
 213 000c 064B     		ldr	r3, .L11+8
 214 000e 1A70     		strb	r2, [r3]
 365:Src/main.c    ****     messageToReceive = &PongMsg;
 215              		.loc 1 365 0
 216 0010 064A     		ldr	r2, .L11+12
 217 0012 074B     		ldr	r3, .L11+16
 218 0014 1A60     		str	r2, [r3]
 366:Src/main.c    ****     messageToSend = &PingMsg;
 219              		.loc 1 366 0
 220 0016 074A     		ldr	r2, .L11+20
 221 0018 074B     		ldr	r3, .L11+24
 222 001a 1A60     		str	r2, [r3]
ARM GAS  /tmp/cciXydud.s 			page 23


 367:Src/main.c    **** }
 223              		.loc 1 367 0
 224              		@ sp needed
 225 001c 7047     		bx	lr
 226              	.L12:
 227 001e C046     		.align	2
 228              	.L11:
 229 0020 00000000 		.word	.LANCHOR2
 230 0024 00000000 		.word	.LANCHOR0
 231 0028 00000000 		.word	.LANCHOR3
 232 002c 00000000 		.word	.LANCHOR5
 233 0030 00000000 		.word	.LANCHOR4
 234 0034 00000000 		.word	.LANCHOR7
 235 0038 00000000 		.word	.LANCHOR6
 236              		.cfi_endproc
 237              	.LFE44:
 239              		.section	.text.sx126x_SetCrcSeed,"ax",%progbits
 240              		.align	2
 241              		.global	sx126x_SetCrcSeed
 242              		.code	16
 243              		.thumb_func
 245              	sx126x_SetCrcSeed:
 246              	.LFB53:
 677:Src/main.c    **** {
 247              		.loc 1 677 0
 248              		.cfi_startproc
 249              	.LVL7:
 690:Src/main.c    **** }
 250              		.loc 1 690 0
 251              		@ sp needed
 252 0000 7047     		bx	lr
 253              		.cfi_endproc
 254              	.LFE53:
 256 0002 C046     		.section	.text.sx126x_SetCrcPolynomial,"ax",%progbits
 257              		.align	2
 258              		.global	sx126x_SetCrcPolynomial
 259              		.code	16
 260              		.thumb_func
 262              	sx126x_SetCrcPolynomial:
 263              	.LFB54:
 693:Src/main.c    **** {
 264              		.loc 1 693 0
 265              		.cfi_startproc
 266              	.LVL8:
 706:Src/main.c    **** }
 267              		.loc 1 706 0
 268              		@ sp needed
 269 0000 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE54:
 273 0002 C046     		.section	.text.SetConfiguration,"ax",%progbits
 274              		.align	2
 275              		.global	SetConfiguration
 276              		.code	16
 277              		.thumb_func
 279              	SetConfiguration:
 280              	.LFB56:
ARM GAS  /tmp/cciXydud.s 			page 24


 716:Src/main.c    **** void SetConfiguration(RadioConfigurations_t *config){
 281              		.loc 1 716 0
 282              		.cfi_startproc
 283              	.LVL9:
 717:Src/main.c    ****     config->irqRx = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 284              		.loc 1 717 0
 285 0000 114B     		ldr	r3, .L16
 286 0002 4386     		strh	r3, [r0, #50]
 718:Src/main.c    ****     config->irqTx = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 287              		.loc 1 718 0
 288 0004 114B     		ldr	r3, .L16+4
 289 0006 0386     		strh	r3, [r0, #48]
 719:Src/main.c    ****     config->rfFrequency = RF_FREQUENCY;
 290              		.loc 1 719 0
 291 0008 114B     		ldr	r3, .L16+8
 292 000a C362     		str	r3, [r0, #44]
 720:Src/main.c    ****     config->txTimeout = 0;
 293              		.loc 1 720 0
 294 000c 0022     		mov	r2, #0
 295 000e 4263     		str	r2, [r0, #52]
 721:Src/main.c    ****     config->rxTimeout = (uint32_t)(RX_TIMEOUT_US / 15.625);
 296              		.loc 1 721 0
 297 0010 FA23     		mov	r3, #250
 298 0012 DB01     		lsl	r3, r3, #7
 299 0014 8363     		str	r3, [r0, #56]
 722:Src/main.c    ****     config->txPower = TX_OUTPUT_POWER;
 300              		.loc 1 722 0
 301 0016 0E23     		mov	r3, #14
 302 0018 4370     		strb	r3, [r0, #1]
 723:Src/main.c    ****     config->txRampTime = RADIO_RAMP_200_US;
 303              		.loc 1 723 0
 304 001a 0421     		mov	r1, #4
 305 001c 8170     		strb	r1, [r0, #2]
 725:Src/main.c    ****         config->packetType = PACKET_TYPE_LORA;
 306              		.loc 1 725 0
 307 001e 0123     		mov	r3, #1
 308 0020 0370     		strb	r3, [r0]
 726:Src/main.c    ****         config->modParams.PacketType = PACKET_TYPE_LORA;
 309              		.loc 1 726 0
 310 0022 0371     		strb	r3, [r0, #4]
 727:Src/main.c    ****         config->modParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 311              		.loc 1 727 0
 312 0024 4175     		strb	r1, [r0, #21]
 728:Src/main.c    ****         config->modParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 313              		.loc 1 728 0
 314 0026 8375     		strb	r3, [r0, #22]
 729:Src/main.c    ****         config->modParams.Params.LoRa.LowDatarateOptimize = LORA_LOWDATARATEOPTIMIZE;
 315              		.loc 1 729 0
 316 0028 C275     		strb	r2, [r0, #23]
 730:Src/main.c    ****         config->modParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 317              		.loc 1 730 0
 318 002a 0721     		mov	r1, #7
 319 002c 0175     		strb	r1, [r0, #20]
 731:Src/main.c    ****         config->packetParams.PacketType = PACKET_TYPE_LORA;
 320              		.loc 1 731 0
 321 002e 0376     		strb	r3, [r0, #24]
 732:Src/main.c    ****         config->packetParams.Params.LoRa.CrcMode = LORA_CRC_MODE;
ARM GAS  /tmp/cciXydud.s 			page 25


 322              		.loc 1 732 0
 323 0030 2821     		mov	r1, #40
 324 0032 4354     		strb	r3, [r0, r1]
 733:Src/main.c    ****         config->packetParams.Params.LoRa.HeaderType = LORA_HEADER_TYPE;
 325              		.loc 1 733 0
 326 0034 2623     		mov	r3, #38
 327 0036 C254     		strb	r2, [r0, r3]
 734:Src/main.c    ****         config->packetParams.Params.LoRa.InvertIQ = LORA_IQ;
 328              		.loc 1 734 0
 329 0038 2923     		mov	r3, #41
 330 003a C254     		strb	r2, [r0, r3]
 735:Src/main.c    ****         config->packetParams.Params.LoRa.PayloadLength = BUFFER_SIZE;
 331              		.loc 1 735 0
 332 003c 2022     		mov	r2, #32
 333 003e 2723     		mov	r3, #39
 334 0040 C254     		strb	r2, [r0, r3]
 736:Src/main.c    ****         config->packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 335              		.loc 1 736 0
 336 0042 0823     		mov	r3, #8
 337 0044 8384     		strh	r3, [r0, #36]
 754:Src/main.c    **** }
 338              		.loc 1 754 0
 339              		@ sp needed
 340 0046 7047     		bx	lr
 341              	.L17:
 342              		.align	2
 343              	.L16:
 344 0048 02020000 		.word	514
 345 004c 01020000 		.word	513
 346 0050 2042C433 		.word	868500000
 347              		.cfi_endproc
 348              	.LFE56:
 350              		.section	.text.sx126x_Reset,"ax",%progbits
 351              		.align	2
 352              		.global	sx126x_Reset
 353              		.code	16
 354              		.thumb_func
 356              	sx126x_Reset:
 357              	.LFB57:
 756:Src/main.c    **** void sx126x_Reset() {
 358              		.loc 1 756 0
 359              		.cfi_startproc
 360 0000 10B5     		push	{r4, lr}
 361              	.LCFI2:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 4, -8
 364              		.cfi_offset 14, -4
 758:Src/main.c    ****       HAL_Delay(20);
 365              		.loc 1 758 0
 366 0002 1420     		mov	r0, #20
 367 0004 FFF7FEFF 		bl	HAL_Delay
 368              	.LVL10:
 759:Src/main.c    ****       HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, 0);
 369              		.loc 1 759 0
 370 0008 A024     		mov	r4, #160
 371 000a E405     		lsl	r4, r4, #23
 372 000c 201C     		mov	r0, r4
ARM GAS  /tmp/cciXydud.s 			page 26


 373 000e 0121     		mov	r1, #1
 374 0010 0022     		mov	r2, #0
 375 0012 FFF7FEFF 		bl	HAL_GPIO_WritePin
 376              	.LVL11:
 760:Src/main.c    ****       HAL_Delay(50);
 377              		.loc 1 760 0
 378 0016 3220     		mov	r0, #50
 379 0018 FFF7FEFF 		bl	HAL_Delay
 380              	.LVL12:
 761:Src/main.c    ****       HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, 1);
 381              		.loc 1 761 0
 382 001c 201C     		mov	r0, r4
 383 001e 0121     		mov	r1, #1
 384 0020 0122     		mov	r2, #1
 385 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 386              	.LVL13:
 763:Src/main.c    ****       HAL_Delay(20);
 387              		.loc 1 763 0
 388 0026 1420     		mov	r0, #20
 389 0028 FFF7FEFF 		bl	HAL_Delay
 390              	.LVL14:
 766:Src/main.c    **** }
 391              		.loc 1 766 0
 392              		@ sp needed
 393 002c 10BD     		pop	{r4, pc}
 394              		.cfi_endproc
 395              	.LFE57:
 397 002e C046     		.section	.text.sx126x_WaitOnCounter,"ax",%progbits
 398              		.align	2
 399              		.global	sx126x_WaitOnCounter
 400              		.code	16
 401              		.thumb_func
 403              	sx126x_WaitOnCounter:
 404              	.LFB63:
 862:Src/main.c    **** void sx126x_WaitOnCounter( ) {
 405              		.loc 1 862 0
 406              		.cfi_startproc
 407              	.LVL15:
 408              	.LBB7:
 863:Src/main.c    ****   for( uint8_t counter = 0; counter < 15; counter++ )
 409              		.loc 1 863 0
 410 0000 0023     		mov	r3, #0
 411 0002 02E0     		b	.L20
 412              	.LVL16:
 413              	.L21:
 414              	.LBB8:
 415              	.LBB9:
 416              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
ARM GAS  /tmp/cciXydud.s 			page 27


  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
ARM GAS  /tmp/cciXydud.s 			page 28


  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
ARM GAS  /tmp/cciXydud.s 			page 29


 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cciXydud.s 			page 30


 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
ARM GAS  /tmp/cciXydud.s 			page 31


 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cciXydud.s 			page 32


 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cciXydud.s 			page 33


 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 417              		.loc 2 375 0
 418              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 419 0004 C046     		nop
 420              	@ 0 "" 2
 421              		.code	16
 422              	.LBE9:
 423              	.LBE8:
 863:Src/main.c    ****   for( uint8_t counter = 0; counter < 15; counter++ )
 424              		.loc 1 863 0
 425 0006 0133     		add	r3, r3, #1
 426              	.LVL17:
 427 0008 DBB2     		uxtb	r3, r3
 428              	.LVL18:
 429              	.L20:
 863:Src/main.c    ****   for( uint8_t counter = 0; counter < 15; counter++ )
 430              		.loc 1 863 0 is_stmt 0 discriminator 1
 431 000a 0E2B     		cmp	r3, #14
 432 000c FAD9     		bls	.L21
 433              	.LBE7:
 865:Src/main.c    **** }
 434              		.loc 1 865 0 is_stmt 1
 435              		@ sp needed
 436 000e 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE63:
 440              		.section	.text.sx126x_AntSwOn,"ax",%progbits
 441              		.align	2
 442              		.global	sx126x_AntSwOn
 443              		.code	16
 444              		.thumb_func
 446              	sx126x_AntSwOn:
 447              	.LFB66:
 895:Src/main.c    **** {
ARM GAS  /tmp/cciXydud.s 			page 34


 448              		.loc 1 895 0
 449              		.cfi_startproc
 450 0000 08B5     		push	{r3, lr}
 451              	.LCFI3:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 3, -8
 454              		.cfi_offset 14, -4
 896:Src/main.c    ****     HAL_GPIO_WritePin(ANTSW_GPIO_Port, ANTSW_Pin, 1);
 455              		.loc 1 896 0
 456 0002 A020     		mov	r0, #160
 457 0004 C005     		lsl	r0, r0, #23
 458 0006 8021     		mov	r1, #128
 459 0008 8900     		lsl	r1, r1, #2
 460 000a 0122     		mov	r2, #1
 461 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 462              	.LVL19:
 897:Src/main.c    **** }
 463              		.loc 1 897 0
 464              		@ sp needed
 465 0010 08BD     		pop	{r3, pc}
 466              		.cfi_endproc
 467              	.LFE66:
 469 0012 C046     		.section	.text.sx126x_AntSwOff,"ax",%progbits
 470              		.align	2
 471              		.global	sx126x_AntSwOff
 472              		.code	16
 473              		.thumb_func
 475              	sx126x_AntSwOff:
 476              	.LFB67:
 900:Src/main.c    **** {
 477              		.loc 1 900 0
 478              		.cfi_startproc
 479 0000 08B5     		push	{r3, lr}
 480              	.LCFI4:
 481              		.cfi_def_cfa_offset 8
 482              		.cfi_offset 3, -8
 483              		.cfi_offset 14, -4
 901:Src/main.c    ****     HAL_GPIO_WritePin(ANTSW_GPIO_Port, ANTSW_Pin, 0);
 484              		.loc 1 901 0
 485 0002 A020     		mov	r0, #160
 486 0004 C005     		lsl	r0, r0, #23
 487 0006 8021     		mov	r1, #128
 488 0008 8900     		lsl	r1, r1, #2
 489 000a 0022     		mov	r2, #0
 490 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 491              	.LVL20:
 902:Src/main.c    **** }
 492              		.loc 1 902 0
 493              		@ sp needed
 494 0010 08BD     		pop	{r3, pc}
 495              		.cfi_endproc
 496              	.LFE67:
 498 0012 C046     		.section	.text.sx126x_WaitOnBusy,"ax",%progbits
 499              		.align	2
 500              		.global	sx126x_WaitOnBusy
 501              		.code	16
 502              		.thumb_func
ARM GAS  /tmp/cciXydud.s 			page 35


 504              	sx126x_WaitOnBusy:
 505              	.LFB68:
 904:Src/main.c    **** void sx126x_WaitOnBusy() {
 506              		.loc 1 904 0
 507              		.cfi_startproc
 508 0000 10B5     		push	{r4, lr}
 509              	.LCFI5:
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 4, -8
 512              		.cfi_offset 14, -4
 905:Src/main.c    ****   while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin) == 1) {}
 513              		.loc 1 905 0
 514 0002 044C     		ldr	r4, .L27
 515              	.L25:
 905:Src/main.c    ****   while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin) == 1) {}
 516              		.loc 1 905 0 is_stmt 0 discriminator 1
 517 0004 201C     		mov	r0, r4
 518 0006 0821     		mov	r1, #8
 519 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 520              	.LVL21:
 521 000c 0128     		cmp	r0, #1
 522 000e F9D0     		beq	.L25
 906:Src/main.c    **** }
 523              		.loc 1 906 0 is_stmt 1
 524              		@ sp needed
 525 0010 10BD     		pop	{r4, pc}
 526              	.L28:
 527 0012 C046     		.align	2
 528              	.L27:
 529 0014 00040050 		.word	1342178304
 530              		.cfi_endproc
 531              	.LFE68:
 533              		.section	.text.sx126x_WriteCommand,"ax",%progbits
 534              		.align	2
 535              		.global	sx126x_WriteCommand
 536              		.code	16
 537              		.thumb_func
 539              	sx126x_WriteCommand:
 540              	.LFB60:
 809:Src/main.c    **** {
 541              		.loc 1 809 0
 542              		.cfi_startproc
 543              	.LVL22:
 544 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 545              	.LCFI6:
 546              		.cfi_def_cfa_offset 20
 547              		.cfi_offset 4, -20
 548              		.cfi_offset 5, -16
 549              		.cfi_offset 6, -12
 550              		.cfi_offset 7, -8
 551              		.cfi_offset 14, -4
 552 0002 4F46     		mov	r7, r9
 553 0004 4646     		mov	r6, r8
 554 0006 C0B4     		push	{r6, r7}
 555              	.LCFI7:
 556              		.cfi_def_cfa_offset 28
 557              		.cfi_offset 8, -28
ARM GAS  /tmp/cciXydud.s 			page 36


 558              		.cfi_offset 9, -24
 559 0008 83B0     		sub	sp, sp, #12
 560              	.LCFI8:
 561              		.cfi_def_cfa_offset 40
 562 000a 061C     		mov	r6, r0
 563 000c 8946     		mov	r9, r1
 564 000e 9046     		mov	r8, r2
 810:Src/main.c    ****     sx126x_WaitOnBusy( );
 565              		.loc 1 810 0
 566 0010 FFF7FEFF 		bl	sx126x_WaitOnBusy
 567              	.LVL23:
 812:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 568              		.loc 1 812 0
 569 0014 A025     		mov	r5, #160
 570 0016 ED05     		lsl	r5, r5, #23
 571 0018 8024     		mov	r4, #128
 572 001a 6400     		lsl	r4, r4, #1
 573 001c 281C     		mov	r0, r5
 574 001e 211C     		mov	r1, r4
 575 0020 0022     		mov	r2, #0
 576 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 577              	.LVL24:
 813:Src/main.c    ****     uint8_t buf = (uint8_t)command;
 578              		.loc 1 813 0
 579 0026 6946     		mov	r1, sp
 580 0028 0731     		add	r1, r1, #7
 581 002a 0E70     		strb	r6, [r1]
 814:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
 582              		.loc 1 814 0
 583 002c 0C4F     		ldr	r7, .L30
 584 002e 0126     		mov	r6, #1
 585              	.LVL25:
 586 0030 7642     		neg	r6, r6
 587 0032 381C     		mov	r0, r7
 588 0034 0122     		mov	r2, #1
 589 0036 331C     		mov	r3, r6
 590 0038 FFF7FEFF 		bl	HAL_SPI_Transmit
 591              	.LVL26:
 817:Src/main.c    ****         HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 592              		.loc 1 817 0
 593 003c 381C     		mov	r0, r7
 594 003e 4946     		mov	r1, r9
 595 0040 4246     		mov	r2, r8
 596 0042 331C     		mov	r3, r6
 597 0044 FFF7FEFF 		bl	HAL_SPI_Transmit
 598              	.LVL27:
 820:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 599              		.loc 1 820 0
 600 0048 281C     		mov	r0, r5
 601 004a 211C     		mov	r1, r4
 602 004c 0122     		mov	r2, #1
 603 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 604              	.LVL28:
 823:Src/main.c    ****     sx126x_WaitOnCounter( );
 605              		.loc 1 823 0
 606 0052 FFF7FEFF 		bl	sx126x_WaitOnCounter
 607              	.LVL29:
ARM GAS  /tmp/cciXydud.s 			page 37


 824:Src/main.c    **** }
 608              		.loc 1 824 0
 609 0056 03B0     		add	sp, sp, #12
 610              		@ sp needed
 611              	.LVL30:
 612 0058 0CBC     		pop	{r2, r3}
 613 005a 9046     		mov	r8, r2
 614 005c 9946     		mov	r9, r3
 615 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 616              	.L31:
 617              		.align	2
 618              	.L30:
 619 0060 00000000 		.word	hspi1
 620              		.cfi_endproc
 621              	.LFE60:
 623              		.section	.text.sx126x_SetTx,"ax",%progbits
 624              		.align	2
 625              		.global	sx126x_SetTx
 626              		.code	16
 627              		.thumb_func
 629              	sx126x_SetTx:
 630              	.LFB41:
 327:Src/main.c    **** {
 631              		.loc 1 327 0
 632              		.cfi_startproc
 633              	.LVL31:
 634 0000 00B5     		push	{lr}
 635              	.LCFI9:
 636              		.cfi_def_cfa_offset 4
 637              		.cfi_offset 14, -4
 638 0002 83B0     		sub	sp, sp, #12
 639              	.LCFI10:
 640              		.cfi_def_cfa_offset 16
 330:Src/main.c    ****     OperatingMode = MODE_TX;
 641              		.loc 1 330 0
 642 0004 0422     		mov	r2, #4
 643 0006 074B     		ldr	r3, .L33
 644 0008 1A70     		strb	r2, [r3]
 332:Src/main.c    ****     buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 645              		.loc 1 332 0
 646 000a 030C     		lsr	r3, r0, #16
 647 000c 01A9     		add	r1, sp, #4
 648 000e 0B70     		strb	r3, [r1]
 333:Src/main.c    ****     buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 649              		.loc 1 333 0
 650 0010 030A     		lsr	r3, r0, #8
 651 0012 4B70     		strb	r3, [r1, #1]
 334:Src/main.c    ****     buf[2] = ( uint8_t )( timeout & 0xFF );
 652              		.loc 1 334 0
 653 0014 8870     		strb	r0, [r1, #2]
 335:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_TX, buf, 3 );
 654              		.loc 1 335 0
 655 0016 8320     		mov	r0, #131
 656              	.LVL32:
 657 0018 0322     		mov	r2, #3
 658 001a FFF7FEFF 		bl	sx126x_WriteCommand
 659              	.LVL33:
ARM GAS  /tmp/cciXydud.s 			page 38


 336:Src/main.c    **** }
 660              		.loc 1 336 0
 661 001e 03B0     		add	sp, sp, #12
 662              		@ sp needed
 663 0020 00BD     		pop	{pc}
 664              	.L34:
 665 0022 C046     		.align	2
 666              	.L33:
 667 0024 00000000 		.word	OperatingMode
 668              		.cfi_endproc
 669              	.LFE41:
 671              		.section	.text.sx126x_SetDioIrqParams,"ax",%progbits
 672              		.align	2
 673              		.global	sx126x_SetDioIrqParams
 674              		.code	16
 675              		.thumb_func
 677              	sx126x_SetDioIrqParams:
 678              	.LFB42:
 339:Src/main.c    **** {
 679              		.loc 1 339 0
 680              		.cfi_startproc
 681              	.LVL34:
 682 0000 30B5     		push	{r4, r5, lr}
 683              	.LCFI11:
 684              		.cfi_def_cfa_offset 12
 685              		.cfi_offset 4, -12
 686              		.cfi_offset 5, -8
 687              		.cfi_offset 14, -4
 688 0002 83B0     		sub	sp, sp, #12
 689              	.LCFI12:
 690              		.cfi_def_cfa_offset 24
 343:Src/main.c    ****     buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 691              		.loc 1 343 0
 692 0004 040A     		lsr	r4, r0, #8
 693 0006 6D46     		mov	r5, sp
 694 0008 2C70     		strb	r4, [r5]
 344:Src/main.c    ****     buf[1] = ( uint8_t )( irqMask & 0x00FF );
 695              		.loc 1 344 0
 696 000a 6870     		strb	r0, [r5, #1]
 345:Src/main.c    ****     buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 697              		.loc 1 345 0
 698 000c 080A     		lsr	r0, r1, #8
 699              	.LVL35:
 700 000e A870     		strb	r0, [r5, #2]
 346:Src/main.c    ****     buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 701              		.loc 1 346 0
 702 0010 E970     		strb	r1, [r5, #3]
 347:Src/main.c    ****     buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 703              		.loc 1 347 0
 704 0012 110A     		lsr	r1, r2, #8
 705              	.LVL36:
 706 0014 2971     		strb	r1, [r5, #4]
 348:Src/main.c    ****     buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 707              		.loc 1 348 0
 708 0016 6A71     		strb	r2, [r5, #5]
 349:Src/main.c    ****     buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 709              		.loc 1 349 0
ARM GAS  /tmp/cciXydud.s 			page 39


 710 0018 1A0A     		lsr	r2, r3, #8
 711              	.LVL37:
 712 001a AA71     		strb	r2, [r5, #6]
 350:Src/main.c    ****     buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 713              		.loc 1 350 0
 714 001c EB71     		strb	r3, [r5, #7]
 351:Src/main.c    ****     sx126x_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 715              		.loc 1 351 0
 716 001e 0820     		mov	r0, #8
 717 0020 6946     		mov	r1, sp
 718 0022 0822     		mov	r2, #8
 719 0024 FFF7FEFF 		bl	sx126x_WriteCommand
 720              	.LVL38:
 352:Src/main.c    **** }
 721              		.loc 1 352 0
 722 0028 03B0     		add	sp, sp, #12
 723              		@ sp needed
 724 002a 30BD     		pop	{r4, r5, pc}
 725              		.cfi_endproc
 726              	.LFE42:
 728              		.section	.text.ConfigureRadioTx,"ax",%progbits
 729              		.align	2
 730              		.global	ConfigureRadioTx
 731              		.code	16
 732              		.thumb_func
 734              	ConfigureRadioTx:
 735              	.LFB39:
 318:Src/main.c    **** void ConfigureRadioTx(RadioConfigurations_t *config){
 736              		.loc 1 318 0
 737              		.cfi_startproc
 738              	.LVL39:
 739 0000 08B5     		push	{r3, lr}
 740              	.LCFI13:
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 3, -8
 743              		.cfi_offset 14, -4
 319:Src/main.c    ****     sx126x_SetDioIrqParams(config->irqTx, config->irqTx, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 744              		.loc 1 319 0
 745 0002 018E     		ldrh	r1, [r0, #48]
 746 0004 081C     		mov	r0, r1
 747              	.LVL40:
 748 0006 0022     		mov	r2, #0
 749 0008 0023     		mov	r3, #0
 750 000a FFF7FEFF 		bl	sx126x_SetDioIrqParams
 751              	.LVL41:
 320:Src/main.c    **** }
 752              		.loc 1 320 0
 753              		@ sp needed
 754 000e 08BD     		pop	{r3, pc}
 755              		.cfi_endproc
 756              	.LFE39:
 758              		.section	.text.sx126x_SetPaConfig,"ax",%progbits
 759              		.align	2
 760              		.global	sx126x_SetPaConfig
 761              		.code	16
 762              		.thumb_func
 764              	sx126x_SetPaConfig:
ARM GAS  /tmp/cciXydud.s 			page 40


 765              	.LFB47:
 441:Src/main.c    **** {
 766              		.loc 1 441 0
 767              		.cfi_startproc
 768              	.LVL42:
 769 0000 10B5     		push	{r4, lr}
 770              	.LCFI14:
 771              		.cfi_def_cfa_offset 8
 772              		.cfi_offset 4, -8
 773              		.cfi_offset 14, -4
 774 0002 82B0     		sub	sp, sp, #8
 775              	.LCFI15:
 776              		.cfi_def_cfa_offset 16
 445:Src/main.c    ****     buf[0] = paDutyCycle;
 777              		.loc 1 445 0
 778 0004 01AC     		add	r4, sp, #4
 779 0006 2070     		strb	r0, [r4]
 446:Src/main.c    ****     buf[1] = HpMax;
 780              		.loc 1 446 0
 781 0008 6170     		strb	r1, [r4, #1]
 447:Src/main.c    ****     buf[2] = deviceSel;
 782              		.loc 1 447 0
 783 000a A270     		strb	r2, [r4, #2]
 448:Src/main.c    ****     buf[3] = paLUT;
 784              		.loc 1 448 0
 785 000c E370     		strb	r3, [r4, #3]
 449:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 786              		.loc 1 449 0
 787 000e 9520     		mov	r0, #149
 788              	.LVL43:
 789 0010 211C     		mov	r1, r4
 790              	.LVL44:
 791 0012 0422     		mov	r2, #4
 792              	.LVL45:
 793 0014 FFF7FEFF 		bl	sx126x_WriteCommand
 794              	.LVL46:
 450:Src/main.c    **** }
 795              		.loc 1 450 0
 796 0018 02B0     		add	sp, sp, #8
 797              		@ sp needed
 798 001a 10BD     		pop	{r4, pc}
 799              		.cfi_endproc
 800              	.LFE47:
 802              		.section	.text.sx126x_CalibrateImage,"ax",%progbits
 803              		.align	2
 804              		.global	sx126x_CalibrateImage
 805              		.code	16
 806              		.thumb_func
 808              	sx126x_CalibrateImage:
 809              	.LFB49:
 474:Src/main.c    **** {
 810              		.loc 1 474 0
 811              		.cfi_startproc
 812              	.LVL47:
 813 0000 00B5     		push	{lr}
 814              	.LCFI16:
 815              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cciXydud.s 			page 41


 816              		.cfi_offset 14, -4
 817 0002 83B0     		sub	sp, sp, #12
 818              	.LCFI17:
 819              		.cfi_def_cfa_offset 16
 477:Src/main.c    ****     if( freq > 900000000 )
 820              		.loc 1 477 0
 821 0004 194B     		ldr	r3, .L44
 822 0006 9842     		cmp	r0, r3
 823 0008 05D9     		bls	.L39
 479:Src/main.c    ****         calFreq[0] = 0xE1;
 824              		.loc 1 479 0
 825 000a 01AB     		add	r3, sp, #4
 826 000c E122     		mov	r2, #225
 827 000e 1A70     		strb	r2, [r3]
 480:Src/main.c    ****         calFreq[1] = 0xE9;
 828              		.loc 1 480 0
 829 0010 E922     		mov	r2, #233
 830 0012 5A70     		strb	r2, [r3, #1]
 831 0014 22E0     		b	.L40
 832              	.L39:
 482:Src/main.c    ****     else if( freq > 850000000 )
 833              		.loc 1 482 0
 834 0016 164B     		ldr	r3, .L44+4
 835 0018 9842     		cmp	r0, r3
 836 001a 05D9     		bls	.L41
 484:Src/main.c    ****         calFreq[0] = 0xD7;
 837              		.loc 1 484 0
 838 001c 01AB     		add	r3, sp, #4
 839 001e D722     		mov	r2, #215
 840 0020 1A70     		strb	r2, [r3]
 485:Src/main.c    ****         calFreq[1] = 0xD8;
 841              		.loc 1 485 0
 842 0022 D822     		mov	r2, #216
 843 0024 5A70     		strb	r2, [r3, #1]
 844 0026 19E0     		b	.L40
 845              	.L41:
 487:Src/main.c    ****     else if( freq > 770000000 )
 846              		.loc 1 487 0
 847 0028 124B     		ldr	r3, .L44+8
 848 002a 9842     		cmp	r0, r3
 849 002c 05D9     		bls	.L42
 489:Src/main.c    ****         calFreq[0] = 0xC1;
 850              		.loc 1 489 0
 851 002e 01AB     		add	r3, sp, #4
 852 0030 C122     		mov	r2, #193
 853 0032 1A70     		strb	r2, [r3]
 490:Src/main.c    ****         calFreq[1] = 0xC5;
 854              		.loc 1 490 0
 855 0034 C522     		mov	r2, #197
 856 0036 5A70     		strb	r2, [r3, #1]
 857 0038 10E0     		b	.L40
 858              	.L42:
 492:Src/main.c    ****     else if( freq > 460000000 )
 859              		.loc 1 492 0
 860 003a 0F4B     		ldr	r3, .L44+12
 861 003c 9842     		cmp	r0, r3
 862 003e 05D9     		bls	.L43
ARM GAS  /tmp/cciXydud.s 			page 42


 494:Src/main.c    ****         calFreq[0] = 0x75;
 863              		.loc 1 494 0
 864 0040 01AB     		add	r3, sp, #4
 865 0042 7522     		mov	r2, #117
 866 0044 1A70     		strb	r2, [r3]
 495:Src/main.c    ****         calFreq[1] = 0x81;
 867              		.loc 1 495 0
 868 0046 8122     		mov	r2, #129
 869 0048 5A70     		strb	r2, [r3, #1]
 870 004a 07E0     		b	.L40
 871              	.L43:
 497:Src/main.c    ****     else if( freq > 425000000 )
 872              		.loc 1 497 0
 873 004c 0B4B     		ldr	r3, .L44+16
 874 004e 9842     		cmp	r0, r3
 875 0050 04D9     		bls	.L40
 499:Src/main.c    ****         calFreq[0] = 0x6B;
 876              		.loc 1 499 0
 877 0052 01AB     		add	r3, sp, #4
 878 0054 6B22     		mov	r2, #107
 879 0056 1A70     		strb	r2, [r3]
 500:Src/main.c    ****         calFreq[1] = 0x6F;
 880              		.loc 1 500 0
 881 0058 6F22     		mov	r2, #111
 882 005a 5A70     		strb	r2, [r3, #1]
 883              	.L40:
 502:Src/main.c    ****     sx126x_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 884              		.loc 1 502 0
 885 005c 9820     		mov	r0, #152
 886              	.LVL48:
 887 005e 01A9     		add	r1, sp, #4
 888 0060 0222     		mov	r2, #2
 889 0062 FFF7FEFF 		bl	sx126x_WriteCommand
 890              	.LVL49:
 503:Src/main.c    **** }
 891              		.loc 1 503 0
 892 0066 03B0     		add	sp, sp, #12
 893              		@ sp needed
 894 0068 00BD     		pop	{pc}
 895              	.L45:
 896 006a C046     		.align	2
 897              	.L44:
 898 006c 00E9A435 		.word	900000000
 899 0070 80F8A932 		.word	850000000
 900 0074 8044E52D 		.word	770000000
 901 0078 000B6B1B 		.word	460000000
 902 007c 40FC5419 		.word	425000000
 903              		.cfi_endproc
 904              	.LFE49:
 906              		.global	__aeabi_ui2d
 907              		.global	__aeabi_ddiv
 908              		.global	__aeabi_d2uiz
 909              		.section	.text.sx126x_SetRfFrequency,"ax",%progbits
 910              		.align	2
 911              		.global	sx126x_SetRfFrequency
 912              		.code	16
 913              		.thumb_func
ARM GAS  /tmp/cciXydud.s 			page 43


 915              	sx126x_SetRfFrequency:
 916              	.LFB48:
 453:Src/main.c    **** {
 917              		.loc 1 453 0
 918              		.cfi_startproc
 919              	.LVL50:
 920 0000 10B5     		push	{r4, lr}
 921              	.LCFI18:
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 4, -8
 924              		.cfi_offset 14, -4
 925 0002 82B0     		sub	sp, sp, #8
 926              	.LCFI19:
 927              		.cfi_def_cfa_offset 16
 928 0004 041C     		mov	r4, r0
 929              	.LVL51:
 458:Src/main.c    ****     if( ImageCalibrated == false )
 930              		.loc 1 458 0
 931 0006 124B     		ldr	r3, .L48+8
 932 0008 1B78     		ldrb	r3, [r3]
 933 000a 002B     		cmp	r3, #0
 934 000c 04D1     		bne	.L47
 935              	.LBB10:
 460:Src/main.c    ****         sx126x_CalibrateImage( frequency );
 936              		.loc 1 460 0
 937 000e FFF7FEFF 		bl	sx126x_CalibrateImage
 938              	.LVL52:
 461:Src/main.c    ****         ImageCalibrated = true;
 939              		.loc 1 461 0
 940 0012 0122     		mov	r2, #1
 941 0014 0E4B     		ldr	r3, .L48+8
 942 0016 1A70     		strb	r2, [r3]
 943              	.L47:
 944              	.LBE10:
 464:Src/main.c    ****     freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 945              		.loc 1 464 0
 946 0018 201C     		mov	r0, r4
 947 001a FFF7FEFF 		bl	__aeabi_ui2d
 948              	.LVL53:
 949 001e 0B4B     		ldr	r3, .L48+4
 950 0020 094A     		ldr	r2, .L48
 951 0022 FFF7FEFF 		bl	__aeabi_ddiv
 952              	.LVL54:
 953 0026 FFF7FEFF 		bl	__aeabi_d2uiz
 954              	.LVL55:
 465:Src/main.c    ****     buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 955              		.loc 1 465 0
 956 002a 030E     		lsr	r3, r0, #24
 957 002c 01A9     		add	r1, sp, #4
 958 002e 0B70     		strb	r3, [r1]
 466:Src/main.c    ****     buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 959              		.loc 1 466 0
 960 0030 030C     		lsr	r3, r0, #16
 961 0032 4B70     		strb	r3, [r1, #1]
 467:Src/main.c    ****     buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 962              		.loc 1 467 0
 963 0034 030A     		lsr	r3, r0, #8
ARM GAS  /tmp/cciXydud.s 			page 44


 964 0036 8B70     		strb	r3, [r1, #2]
 468:Src/main.c    ****     buf[3] = ( uint8_t )( freq & 0xFF );
 965              		.loc 1 468 0
 966 0038 C870     		strb	r0, [r1, #3]
 469:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 967              		.loc 1 469 0
 968 003a 8620     		mov	r0, #134
 969              	.LVL56:
 970 003c 0422     		mov	r2, #4
 971 003e FFF7FEFF 		bl	sx126x_WriteCommand
 972              	.LVL57:
 470:Src/main.c    **** }
 973              		.loc 1 470 0
 974 0042 02B0     		add	sp, sp, #8
 975              		@ sp needed
 976              	.LVL58:
 977 0044 10BD     		pop	{r4, pc}
 978              	.L49:
 979 0046 C046     		.align	3
 980              	.L48:
 981 0048 00000000 		.word	0
 982 004c 8084EE3F 		.word	1072596096
 983 0050 00000000 		.word	.LANCHOR8
 984              		.cfi_endproc
 985              	.LFE48:
 987              		.global	__aeabi_dmul
 988 0054 C046C046 		.section	.text.sx126x_SetModulationParams,"ax",%progbits
 989              		.align	2
 990              		.global	sx126x_SetModulationParams
 991              		.code	16
 992              		.thumb_func
 994              	sx126x_SetModulationParams:
 995              	.LFB50:
 506:Src/main.c    **** {
 996              		.loc 1 506 0
 997              		.cfi_startproc
 998              	.LVL59:
 999 0000 10B5     		push	{r4, lr}
 1000              	.LCFI20:
 1001              		.cfi_def_cfa_offset 8
 1002              		.cfi_offset 4, -8
 1003              		.cfi_offset 14, -4
 1004 0002 82B0     		sub	sp, sp, #8
 1005              	.LCFI21:
 1006              		.cfi_def_cfa_offset 16
 1007 0004 041C     		mov	r4, r0
 1008              	.LVL60:
 509:Src/main.c    ****     uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 1009              		.loc 1 509 0
 1010 0006 0023     		mov	r3, #0
 1011 0008 6946     		mov	r1, sp
 1012 000a 0B71     		strb	r3, [r1, #4]
 1013 000c 4B71     		strb	r3, [r1, #5]
 1014 000e 8B71     		strb	r3, [r1, #6]
 1015 0010 CB71     		strb	r3, [r1, #7]
 519:Src/main.c    ****     switch( modulationParams->PacketType )
 1016              		.loc 1 519 0
ARM GAS  /tmp/cciXydud.s 			page 45


 1017 0012 0378     		ldrb	r3, [r0]
 1018 0014 002B     		cmp	r3, #0
 1019 0016 02D0     		beq	.L52
 1020 0018 012B     		cmp	r3, #1
 1021 001a 2AD0     		beq	.L53
 1022 001c 66E0     		b	.L50
 1023              	.L52:
 1024              	.LVL61:
 523:Src/main.c    ****         tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfs
 1025              		.loc 1 523 0
 1026 001e 4068     		ldr	r0, [r0, #4]
 1027              	.LVL62:
 1028 0020 FFF7FEFF 		bl	__aeabi_ui2d
 1029              	.LVL63:
 1030 0024 021C     		mov	r2, r0
 1031 0026 0B1C     		mov	r3, r1
 1032 0028 3249     		ldr	r1, .L68+4
 1033 002a 3148     		ldr	r0, .L68
 1034 002c FFF7FEFF 		bl	__aeabi_ddiv
 1035              	.LVL64:
 1036 0030 314A     		ldr	r2, .L68+8
 1037 0032 324B     		ldr	r3, .L68+12
 1038 0034 FFF7FEFF 		bl	__aeabi_dmul
 1039              	.LVL65:
 1040 0038 FFF7FEFF 		bl	__aeabi_d2uiz
 1041              	.LVL66:
 524:Src/main.c    ****         buf[0] = ( tempVal >> 16 ) & 0xFF;
 1042              		.loc 1 524 0
 1043 003c 030C     		lsr	r3, r0, #16
 1044 003e 6A46     		mov	r2, sp
 1045 0040 1370     		strb	r3, [r2]
 525:Src/main.c    ****         buf[1] = ( tempVal >> 8 ) & 0xFF;
 1046              		.loc 1 525 0
 1047 0042 030A     		lsr	r3, r0, #8
 1048 0044 5370     		strb	r3, [r2, #1]
 526:Src/main.c    ****         buf[2] = tempVal & 0xFF;
 1049              		.loc 1 526 0
 1050 0046 9070     		strb	r0, [r2, #2]
 527:Src/main.c    ****         buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 1051              		.loc 1 527 0
 1052 0048 237B     		ldrb	r3, [r4, #12]
 1053 004a D370     		strb	r3, [r2, #3]
 528:Src/main.c    ****         buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 1054              		.loc 1 528 0
 1055 004c 637B     		ldrb	r3, [r4, #13]
 1056 004e 1371     		strb	r3, [r2, #4]
 529:Src/main.c    ****         tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP 
 1057              		.loc 1 529 0
 1058 0050 A068     		ldr	r0, [r4, #8]
 1059              	.LVL67:
 1060 0052 FFF7FEFF 		bl	__aeabi_ui2d
 1061              	.LVL68:
 1062 0056 2A4A     		ldr	r2, .L68+16
 1063 0058 2A4B     		ldr	r3, .L68+20
 1064 005a FFF7FEFF 		bl	__aeabi_ddiv
 1065              	.LVL69:
 1066 005e FFF7FEFF 		bl	__aeabi_d2uiz
ARM GAS  /tmp/cciXydud.s 			page 46


 1067              	.LVL70:
 530:Src/main.c    ****         buf[5] = ( tempVal >> 16 ) & 0xFF;
 1068              		.loc 1 530 0
 1069 0062 030C     		lsr	r3, r0, #16
 1070 0064 6946     		mov	r1, sp
 1071 0066 4B71     		strb	r3, [r1, #5]
 531:Src/main.c    ****         buf[6] = ( tempVal >> 8 ) & 0xFF;
 1072              		.loc 1 531 0
 1073 0068 030A     		lsr	r3, r0, #8
 1074 006a 8B71     		strb	r3, [r1, #6]
 532:Src/main.c    ****         buf[7] = ( tempVal& 0xFF );
 1075              		.loc 1 532 0
 1076 006c C871     		strb	r0, [r1, #7]
 522:Src/main.c    ****         n = 8;
 1077              		.loc 1 522 0
 1078 006e 0822     		mov	r2, #8
 533:Src/main.c    ****         break;
 1079              		.loc 1 533 0
 1080 0070 38E0     		b	.L54
 1081              	.LVL71:
 1082              	.L53:
 536:Src/main.c    ****         switch( modulationParams->Params.LoRa.Bandwidth )
 1083              		.loc 1 536 0
 1084 0072 437C     		ldrb	r3, [r0, #17]
 1085 0074 0A2B     		cmp	r3, #10
 1086 0076 2CD8     		bhi	.L55
 1087 0078 9A00     		lsl	r2, r3, #2
 1088 007a 2349     		ldr	r1, .L68+24
 1089 007c 8A58     		ldr	r2, [r1, r2]
 1090 007e 9746     		mov	pc, r2
 1091              		.section	.rodata.sx126x_SetModulationParams,"a",%progbits
 1092              		.align	2
 1093              	.L57:
 1094 0000 CE000000 		.word	.L56
 1095 0004 CE000000 		.word	.L56
 1096 0008 CE000000 		.word	.L56
 1097 000c AA000000 		.word	.L58
 1098 0010 98000000 		.word	.L59
 1099 0014 86000000 		.word	.L60
 1100 0018 80000000 		.word	.L61
 1101 001c D2000000 		.word	.L55
 1102 0020 CE000000 		.word	.L56
 1103 0024 CE000000 		.word	.L56
 1104 0028 BC000000 		.word	.L62
 1105              		.section	.text.sx126x_SetModulationParams
 1106              	.L61:
 539:Src/main.c    ****                  modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 1107              		.loc 1 539 0
 1108 0080 0022     		mov	r2, #0
 1109 0082 C274     		strb	r2, [r0, #19]
 540:Src/main.c    ****                 break;
 1110              		.loc 1 540 0
 1111 0084 25E0     		b	.L55
 1112              	.L60:
 542:Src/main.c    ****                 if( modulationParams->Params.LoRa.SpreadingFactor == 12 )
 1113              		.loc 1 542 0
 1114 0086 027C     		ldrb	r2, [r0, #16]
ARM GAS  /tmp/cciXydud.s 			page 47


 1115 0088 0C2A     		cmp	r2, #12
 1116 008a 02D1     		bne	.L63
 544:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 1117              		.loc 1 544 0
 1118 008c 0122     		mov	r2, #1
 1119 008e C274     		strb	r2, [r0, #19]
 1120 0090 1FE0     		b	.L55
 1121              	.L63:
 548:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 1122              		.loc 1 548 0
 1123 0092 0022     		mov	r2, #0
 1124 0094 C274     		strb	r2, [r0, #19]
 1125 0096 1CE0     		b	.L55
 1126              	.L59:
 552:Src/main.c    ****                 if( modulationParams->Params.LoRa.SpreadingFactor >= 11 )
 1127              		.loc 1 552 0
 1128 0098 027C     		ldrb	r2, [r0, #16]
 1129 009a 0A2A     		cmp	r2, #10
 1130 009c 02D9     		bls	.L64
 554:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 1131              		.loc 1 554 0
 1132 009e 0122     		mov	r2, #1
 1133 00a0 C274     		strb	r2, [r0, #19]
 1134 00a2 16E0     		b	.L55
 1135              	.L64:
 558:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 1136              		.loc 1 558 0
 1137 00a4 0022     		mov	r2, #0
 1138 00a6 C274     		strb	r2, [r0, #19]
 1139 00a8 13E0     		b	.L55
 1140              	.L58:
 562:Src/main.c    ****                 if( modulationParams->Params.LoRa.SpreadingFactor >= 10 )
 1141              		.loc 1 562 0
 1142 00aa 027C     		ldrb	r2, [r0, #16]
 1143 00ac 092A     		cmp	r2, #9
 1144 00ae 02D9     		bls	.L65
 564:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 1145              		.loc 1 564 0
 1146 00b0 0122     		mov	r2, #1
 1147 00b2 C274     		strb	r2, [r0, #19]
 1148 00b4 0DE0     		b	.L55
 1149              	.L65:
 568:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 1150              		.loc 1 568 0
 1151 00b6 0022     		mov	r2, #0
 1152 00b8 C274     		strb	r2, [r0, #19]
 1153 00ba 0AE0     		b	.L55
 1154              	.L62:
 572:Src/main.c    ****                 if( modulationParams->Params.LoRa.SpreadingFactor >= 9 )
 1155              		.loc 1 572 0
 1156 00bc 027C     		ldrb	r2, [r0, #16]
 1157 00be 082A     		cmp	r2, #8
 1158 00c0 02D9     		bls	.L66
 574:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 1159              		.loc 1 574 0
 1160 00c2 0122     		mov	r2, #1
 1161 00c4 C274     		strb	r2, [r0, #19]
ARM GAS  /tmp/cciXydud.s 			page 48


 1162 00c6 04E0     		b	.L55
 1163              	.L66:
 578:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
 1164              		.loc 1 578 0
 1165 00c8 0022     		mov	r2, #0
 1166 00ca C274     		strb	r2, [r0, #19]
 1167 00cc 01E0     		b	.L55
 1168              	.L56:
 586:Src/main.c    ****                     modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
 1169              		.loc 1 586 0
 1170 00ce 0122     		mov	r2, #1
 1171 00d0 C274     		strb	r2, [r0, #19]
 1172              	.L55:
 591:Src/main.c    ****         buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 1173              		.loc 1 591 0
 1174 00d2 227C     		ldrb	r2, [r4, #16]
 1175 00d4 6946     		mov	r1, sp
 1176 00d6 0A70     		strb	r2, [r1]
 592:Src/main.c    ****         buf[1] = modulationParams->Params.LoRa.Bandwidth;
 1177              		.loc 1 592 0
 1178 00d8 4B70     		strb	r3, [r1, #1]
 593:Src/main.c    ****         buf[2] = modulationParams->Params.LoRa.CodingRate;
 1179              		.loc 1 593 0
 1180 00da A37C     		ldrb	r3, [r4, #18]
 1181 00dc 8B70     		strb	r3, [r1, #2]
 594:Src/main.c    ****         buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 1182              		.loc 1 594 0
 1183 00de E37C     		ldrb	r3, [r4, #19]
 1184 00e0 CB70     		strb	r3, [r1, #3]
 535:Src/main.c    ****         n = 4;
 1185              		.loc 1 535 0
 1186 00e2 0422     		mov	r2, #4
 1187              	.LVL72:
 1188              	.L54:
 600:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 1189              		.loc 1 600 0
 1190 00e4 8B20     		mov	r0, #139
 1191 00e6 6946     		mov	r1, sp
 1192 00e8 FFF7FEFF 		bl	sx126x_WriteCommand
 1193              	.LVL73:
 1194              	.L50:
 601:Src/main.c    **** }
 1195              		.loc 1 601 0
 1196 00ec 02B0     		add	sp, sp, #8
 1197              		@ sp needed
 1198              	.LVL74:
 1199 00ee 10BD     		pop	{r4, pc}
 1200              	.L69:
 1201              		.align	3
 1202              	.L68:
 1203 00f0 00000000 		.word	0
 1204 00f4 80847E41 		.word	1098810496
 1205 00f8 00000000 		.word	0
 1206 00fc 00004040 		.word	1077936128
 1207 0100 00000000 		.word	0
 1208 0104 8084EE3F 		.word	1072596096
 1209 0108 00000000 		.word	.L57
ARM GAS  /tmp/cciXydud.s 			page 49


 1210              		.cfi_endproc
 1211              	.LFE50:
 1213 010c C046C046 		.section	.text.sx126x_SetPacketParams,"ax",%progbits
 1214              		.align	2
 1215              		.global	sx126x_SetPacketParams
 1216              		.code	16
 1217              		.thumb_func
 1219              	sx126x_SetPacketParams:
 1220              	.LFB52:
 611:Src/main.c    **** {
 1221              		.loc 1 611 0
 1222              		.cfi_startproc
 1223              	.LVL75:
 1224 0000 10B5     		push	{r4, lr}
 1225              	.LCFI22:
 1226              		.cfi_def_cfa_offset 8
 1227              		.cfi_offset 4, -8
 1228              		.cfi_offset 14, -4
 1229 0002 84B0     		sub	sp, sp, #16
 1230              	.LCFI23:
 1231              		.cfi_def_cfa_offset 24
 1232              	.LVL76:
 614:Src/main.c    ****     uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 1233              		.loc 1 614 0
 1234 0004 01AB     		add	r3, sp, #4
 1235 0006 0022     		mov	r2, #0
 1236 0008 9A71     		strb	r2, [r3, #6]
 1237 000a DA71     		strb	r2, [r3, #7]
 1238 000c 1A72     		strb	r2, [r3, #8]
 626:Src/main.c    ****     switch( packetParams->PacketType )
 1239              		.loc 1 626 0
 1240 000e 0378     		ldrb	r3, [r0]
 1241 0010 002B     		cmp	r3, #0
 1242 0012 02D0     		beq	.L72
 1243 0014 012B     		cmp	r3, #1
 1244 0016 22D0     		beq	.L73
 1245 0018 33E0     		b	.L70
 1246              	.L72:
 629:Src/main.c    ****         if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 1247              		.loc 1 629 0
 1248 001a 437A     		ldrb	r3, [r0, #9]
 1249 001c F12B     		cmp	r3, #241
 1250 001e 03D0     		beq	.L77
 635:Src/main.c    ****         else if(  packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 1251              		.loc 1 635 0
 1252 0020 F22B     		cmp	r3, #242
 1253 0022 03D1     		bne	.L78
 1254              	.LBB11:
 639:Src/main.c    ****             crcVal = RADIO_CRC_2_BYTES_INV;
 1255              		.loc 1 639 0
 1256 0024 0624     		mov	r4, #6
 1257 0026 02E0     		b	.L74
 1258              	.L77:
 1259              	.LBE11:
 1260              	.LBB12:
 633:Src/main.c    ****             crcVal = RADIO_CRC_2_BYTES;
 1261              		.loc 1 633 0
ARM GAS  /tmp/cciXydud.s 			page 50


 1262 0028 0224     		mov	r4, #2
 1263 002a 00E0     		b	.L74
 1264              	.L78:
 1265              	.LBE12:
 643:Src/main.c    ****             crcVal = packetParams->Params.Gfsk.CrcLength;
 1266              		.loc 1 643 0
 1267 002c 1C1C     		mov	r4, r3
 1268              	.L74:
 1269              	.LVL77:
 647:Src/main.c    ****         packetParams->Params.Gfsk.PreambleLength = packetParams->Params.Gfsk.PreambleLength << 3;
 1270              		.loc 1 647 0
 1271 002e 4288     		ldrh	r2, [r0, #2]
 1272 0030 D200     		lsl	r2, r2, #3
 1273 0032 92B2     		uxth	r2, r2
 1274 0034 4280     		strh	r2, [r0, #2]
 649:Src/main.c    ****         buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 1275              		.loc 1 649 0
 1276 0036 01AB     		add	r3, sp, #4
 1277 0038 110A     		lsr	r1, r2, #8
 1278 003a 1970     		strb	r1, [r3]
 650:Src/main.c    ****         buf[1] = packetParams->Params.Gfsk.PreambleLength;
 1279              		.loc 1 650 0
 1280 003c 5A70     		strb	r2, [r3, #1]
 651:Src/main.c    ****         buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 1281              		.loc 1 651 0
 1282 003e 0279     		ldrb	r2, [r0, #4]
 1283 0040 9A70     		strb	r2, [r3, #2]
 652:Src/main.c    ****         buf[3] = ( packetParams->Params.Gfsk.SyncWordLength << 3 ); // convert from byte to bit
 1284              		.loc 1 652 0
 1285 0042 4279     		ldrb	r2, [r0, #5]
 1286 0044 D200     		lsl	r2, r2, #3
 1287 0046 DA70     		strb	r2, [r3, #3]
 653:Src/main.c    ****         buf[4] = packetParams->Params.Gfsk.AddrComp;
 1288              		.loc 1 653 0
 1289 0048 8279     		ldrb	r2, [r0, #6]
 1290 004a 1A71     		strb	r2, [r3, #4]
 654:Src/main.c    ****         buf[5] = packetParams->Params.Gfsk.HeaderType;
 1291              		.loc 1 654 0
 1292 004c C279     		ldrb	r2, [r0, #7]
 1293 004e 5A71     		strb	r2, [r3, #5]
 655:Src/main.c    ****         buf[6] = packetParams->Params.Gfsk.PayloadLength;
 1294              		.loc 1 655 0
 1295 0050 027A     		ldrb	r2, [r0, #8]
 1296 0052 9A71     		strb	r2, [r3, #6]
 656:Src/main.c    ****         buf[7] = crcVal;
 1297              		.loc 1 656 0
 1298 0054 DC71     		strb	r4, [r3, #7]
 657:Src/main.c    ****         buf[8] = packetParams->Params.Gfsk.DcFree;
 1299              		.loc 1 657 0
 1300 0056 827A     		ldrb	r2, [r0, #10]
 1301 0058 1A72     		strb	r2, [r3, #8]
 645:Src/main.c    ****         n = 9;
 1302              		.loc 1 645 0
 1303 005a 0922     		mov	r2, #9
 658:Src/main.c    ****         break;
 1304              		.loc 1 658 0
 1305 005c 0DE0     		b	.L75
ARM GAS  /tmp/cciXydud.s 			page 51


 1306              	.LVL78:
 1307              	.L73:
 661:Src/main.c    ****         buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 1308              		.loc 1 661 0
 1309 005e 8289     		ldrh	r2, [r0, #12]
 1310 0060 01AB     		add	r3, sp, #4
 1311 0062 110A     		lsr	r1, r2, #8
 1312 0064 1970     		strb	r1, [r3]
 662:Src/main.c    ****         buf[1] = packetParams->Params.LoRa.PreambleLength;
 1313              		.loc 1 662 0
 1314 0066 5A70     		strb	r2, [r3, #1]
 663:Src/main.c    ****         buf[2] = packetParams->Params.LoRa.HeaderType;
 1315              		.loc 1 663 0
 1316 0068 827B     		ldrb	r2, [r0, #14]
 1317 006a 9A70     		strb	r2, [r3, #2]
 664:Src/main.c    ****         buf[3] = packetParams->Params.LoRa.PayloadLength;
 1318              		.loc 1 664 0
 1319 006c C27B     		ldrb	r2, [r0, #15]
 1320 006e DA70     		strb	r2, [r3, #3]
 665:Src/main.c    ****         buf[4] = packetParams->Params.LoRa.CrcMode;
 1321              		.loc 1 665 0
 1322 0070 027C     		ldrb	r2, [r0, #16]
 1323 0072 1A71     		strb	r2, [r3, #4]
 666:Src/main.c    ****         buf[5] = packetParams->Params.LoRa.InvertIQ;
 1324              		.loc 1 666 0
 1325 0074 427C     		ldrb	r2, [r0, #17]
 1326 0076 5A71     		strb	r2, [r3, #5]
 660:Src/main.c    ****         n = 6;
 1327              		.loc 1 660 0
 1328 0078 0622     		mov	r2, #6
 1329              	.LVL79:
 1330              	.L75:
 672:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 1331              		.loc 1 672 0
 1332 007a 8C20     		mov	r0, #140
 1333              	.LVL80:
 1334 007c 01A9     		add	r1, sp, #4
 1335 007e FFF7FEFF 		bl	sx126x_WriteCommand
 1336              	.LVL81:
 1337              	.L70:
 673:Src/main.c    **** }
 1338              		.loc 1 673 0
 1339 0082 04B0     		add	sp, sp, #16
 1340              		@ sp needed
 1341 0084 10BD     		pop	{r4, pc}
 1342              		.cfi_endproc
 1343              	.LFE52:
 1345 0086 C046     		.section	.text.sx126x_SetPacketType,"ax",%progbits
 1346              		.align	2
 1347              		.global	sx126x_SetPacketType
 1348              		.code	16
 1349              		.thumb_func
 1351              	sx126x_SetPacketType:
 1352              	.LFB55:
 709:Src/main.c    **** {
 1353              		.loc 1 709 0
 1354              		.cfi_startproc
ARM GAS  /tmp/cciXydud.s 			page 52


 1355              	.LVL82:
 1356 0000 00B5     		push	{lr}
 1357              	.LCFI24:
 1358              		.cfi_def_cfa_offset 4
 1359              		.cfi_offset 14, -4
 1360 0002 83B0     		sub	sp, sp, #12
 1361              	.LCFI25:
 1362              		.cfi_def_cfa_offset 16
 1363 0004 6946     		mov	r1, sp
 1364 0006 0731     		add	r1, r1, #7
 1365 0008 0870     		strb	r0, [r1]
 712:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 1366              		.loc 1 712 0
 1367 000a 8A20     		mov	r0, #138
 1368              	.LVL83:
 1369 000c 0122     		mov	r2, #1
 1370 000e FFF7FEFF 		bl	sx126x_WriteCommand
 1371              	.LVL84:
 713:Src/main.c    **** }
 1372              		.loc 1 713 0
 1373 0012 03B0     		add	sp, sp, #12
 1374              	.LVL85:
 1375              		@ sp needed
 1376 0014 00BD     		pop	{pc}
 1377              		.cfi_endproc
 1378              	.LFE55:
 1380 0016 C046     		.section	.text.sx126x_SetStandby,"ax",%progbits
 1381              		.align	2
 1382              		.global	sx126x_SetStandby
 1383              		.code	16
 1384              		.thumb_func
 1386              	sx126x_SetStandby:
 1387              	.LFB58:
 769:Src/main.c    **** {
 1388              		.loc 1 769 0
 1389              		.cfi_startproc
 1390              	.LVL86:
 1391 0000 10B5     		push	{r4, lr}
 1392              	.LCFI26:
 1393              		.cfi_def_cfa_offset 8
 1394              		.cfi_offset 4, -8
 1395              		.cfi_offset 14, -4
 1396 0002 82B0     		sub	sp, sp, #8
 1397              	.LCFI27:
 1398              		.cfi_def_cfa_offset 16
 1399 0004 6C46     		mov	r4, sp
 1400 0006 E071     		strb	r0, [r4, #7]
 1401 0008 0734     		add	r4, r4, #7
 770:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 1402              		.loc 1 770 0
 1403 000a 8020     		mov	r0, #128
 1404              	.LVL87:
 1405 000c 211C     		mov	r1, r4
 1406 000e 0122     		mov	r2, #1
 1407 0010 FFF7FEFF 		bl	sx126x_WriteCommand
 1408              	.LVL88:
 771:Src/main.c    ****     if( standbyConfig == STDBY_RC )
ARM GAS  /tmp/cciXydud.s 			page 53


 1409              		.loc 1 771 0
 1410 0014 2378     		ldrb	r3, [r4]
 1411 0016 002B     		cmp	r3, #0
 1412 0018 03D1     		bne	.L81
 773:Src/main.c    ****         OperatingMode = MODE_STDBY_RC;
 1413              		.loc 1 773 0
 1414 001a 0122     		mov	r2, #1
 1415 001c 034B     		ldr	r3, .L83
 1416 001e 1A70     		strb	r2, [r3]
 1417 0020 02E0     		b	.L80
 1418              	.L81:
 777:Src/main.c    ****         OperatingMode = MODE_STDBY_XOSC;
 1419              		.loc 1 777 0
 1420 0022 0222     		mov	r2, #2
 1421 0024 014B     		ldr	r3, .L83
 1422 0026 1A70     		strb	r2, [r3]
 1423              	.L80:
 779:Src/main.c    **** }
 1424              		.loc 1 779 0
 1425 0028 02B0     		add	sp, sp, #8
 1426              		@ sp needed
 1427              	.LVL89:
 1428 002a 10BD     		pop	{r4, pc}
 1429              	.L84:
 1430              		.align	2
 1431              	.L83:
 1432 002c 00000000 		.word	OperatingMode
 1433              		.cfi_endproc
 1434              	.LFE58:
 1436              		.section	.text.sx126x_SetDio2AsRfSwitchCtrl,"ax",%progbits
 1437              		.align	2
 1438              		.global	sx126x_SetDio2AsRfSwitchCtrl
 1439              		.code	16
 1440              		.thumb_func
 1442              	sx126x_SetDio2AsRfSwitchCtrl:
 1443              	.LFB64:
 867:Src/main.c    **** void sx126x_SetDio2AsRfSwitchCtrl( uint8_t enable ){
 1444              		.loc 1 867 0
 1445              		.cfi_startproc
 1446              	.LVL90:
 1447 0000 00B5     		push	{lr}
 1448              	.LCFI28:
 1449              		.cfi_def_cfa_offset 4
 1450              		.cfi_offset 14, -4
 1451 0002 83B0     		sub	sp, sp, #12
 1452              	.LCFI29:
 1453              		.cfi_def_cfa_offset 16
 1454 0004 6946     		mov	r1, sp
 1455 0006 0731     		add	r1, r1, #7
 1456 0008 0870     		strb	r0, [r1]
 868:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 1457              		.loc 1 868 0
 1458 000a 9D20     		mov	r0, #157
 1459              	.LVL91:
 1460 000c 0122     		mov	r2, #1
 1461 000e FFF7FEFF 		bl	sx126x_WriteCommand
 1462              	.LVL92:
ARM GAS  /tmp/cciXydud.s 			page 54


 869:Src/main.c    **** }
 1463              		.loc 1 869 0
 1464 0012 03B0     		add	sp, sp, #12
 1465              	.LVL93:
 1466              		@ sp needed
 1467 0014 00BD     		pop	{pc}
 1468              		.cfi_endproc
 1469              	.LFE64:
 1471 0016 C046     		.section	.text.sx126x_WriteBuffer,"ax",%progbits
 1472              		.align	2
 1473              		.global	sx126x_WriteBuffer
 1474              		.code	16
 1475              		.thumb_func
 1477              	sx126x_WriteBuffer:
 1478              	.LFB61:
 827:Src/main.c    **** {
 1479              		.loc 1 827 0
 1480              		.cfi_startproc
 1481              	.LVL94:
 1482 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1483              	.LCFI30:
 1484              		.cfi_def_cfa_offset 20
 1485              		.cfi_offset 4, -20
 1486              		.cfi_offset 5, -16
 1487              		.cfi_offset 6, -12
 1488              		.cfi_offset 7, -8
 1489              		.cfi_offset 14, -4
 1490 0002 5746     		mov	r7, r10
 1491 0004 4E46     		mov	r6, r9
 1492 0006 4546     		mov	r5, r8
 1493 0008 E0B4     		push	{r5, r6, r7}
 1494              	.LCFI31:
 1495              		.cfi_def_cfa_offset 32
 1496              		.cfi_offset 8, -32
 1497              		.cfi_offset 9, -28
 1498              		.cfi_offset 10, -24
 1499 000a 84B0     		sub	sp, sp, #16
 1500              	.LCFI32:
 1501              		.cfi_def_cfa_offset 48
 1502 000c 8A46     		mov	r10, r1
 1503 000e 9146     		mov	r9, r2
 1504 0010 0723     		mov	r3, #7
 1505 0012 6B44     		add	r3, r3, sp
 1506 0014 9846     		mov	r8, r3
 1507 0016 1870     		strb	r0, [r3]
 828:Src/main.c    ****     sx126x_WaitOnBusy( );
 1508              		.loc 1 828 0
 1509 0018 FFF7FEFF 		bl	sx126x_WaitOnBusy
 1510              	.LVL95:
 830:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 1511              		.loc 1 830 0
 1512 001c A027     		mov	r7, #160
 1513 001e FF05     		lsl	r7, r7, #23
 1514 0020 8026     		mov	r6, #128
 1515 0022 7600     		lsl	r6, r6, #1
 1516 0024 381C     		mov	r0, r7
 1517 0026 311C     		mov	r1, r6
ARM GAS  /tmp/cciXydud.s 			page 55


 1518 0028 0022     		mov	r2, #0
 1519 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1520              	.LVL96:
 831:Src/main.c    ****     uint8_t buf = RADIO_WRITE_BUFFER;
 1521              		.loc 1 831 0
 1522 002e 6946     		mov	r1, sp
 1523 0030 0F31     		add	r1, r1, #15
 1524 0032 0E22     		mov	r2, #14
 1525 0034 0A70     		strb	r2, [r1]
 832:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
 1526              		.loc 1 832 0
 1527 0036 0F4D     		ldr	r5, .L87
 1528 0038 0124     		mov	r4, #1
 1529 003a 6442     		neg	r4, r4
 1530 003c 281C     		mov	r0, r5
 1531 003e 0122     		mov	r2, #1
 1532 0040 231C     		mov	r3, r4
 1533 0042 FFF7FEFF 		bl	HAL_SPI_Transmit
 1534              	.LVL97:
 833:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &offset, 1, HAL_MAX_DELAY);
 1535              		.loc 1 833 0
 1536 0046 281C     		mov	r0, r5
 1537 0048 4146     		mov	r1, r8
 1538 004a 0122     		mov	r2, #1
 1539 004c 231C     		mov	r3, r4
 1540 004e FFF7FEFF 		bl	HAL_SPI_Transmit
 1541              	.LVL98:
 836:Src/main.c    ****       HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 1542              		.loc 1 836 0
 1543 0052 281C     		mov	r0, r5
 1544 0054 5146     		mov	r1, r10
 1545 0056 4A46     		mov	r2, r9
 1546 0058 231C     		mov	r3, r4
 1547 005a FFF7FEFF 		bl	HAL_SPI_Transmit
 1548              	.LVL99:
 838:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 1549              		.loc 1 838 0
 1550 005e 381C     		mov	r0, r7
 1551 0060 311C     		mov	r1, r6
 1552 0062 0022     		mov	r2, #0
 1553 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1554              	.LVL100:
 840:Src/main.c    **** }
 1555              		.loc 1 840 0
 1556 0068 04B0     		add	sp, sp, #16
 1557              		@ sp needed
 1558              	.LVL101:
 1559              	.LVL102:
 1560 006a 1CBC     		pop	{r2, r3, r4}
 1561 006c 9046     		mov	r8, r2
 1562 006e 9946     		mov	r9, r3
 1563 0070 A246     		mov	r10, r4
 1564 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 1565              	.L88:
 1566              		.align	2
 1567              	.L87:
 1568 0074 00000000 		.word	hspi1
ARM GAS  /tmp/cciXydud.s 			page 56


 1569              		.cfi_endproc
 1570              	.LFE61:
 1572              		.section	.text.sx126x_SetPayload,"ax",%progbits
 1573              		.align	2
 1574              		.global	sx126x_SetPayload
 1575              		.code	16
 1576              		.thumb_func
 1578              	sx126x_SetPayload:
 1579              	.LFB43:
 355:Src/main.c    **** {
 1580              		.loc 1 355 0
 1581              		.cfi_startproc
 1582              	.LVL103:
 1583 0000 08B5     		push	{r3, lr}
 1584              	.LCFI33:
 1585              		.cfi_def_cfa_offset 8
 1586              		.cfi_offset 3, -8
 1587              		.cfi_offset 14, -4
 1588 0002 031C     		mov	r3, r0
 1589 0004 0A1C     		mov	r2, r1
 356:Src/main.c    ****     sx126x_WriteBuffer( 0x00, payload, size );
 1590              		.loc 1 356 0
 1591 0006 0020     		mov	r0, #0
 1592              	.LVL104:
 1593 0008 191C     		mov	r1, r3
 1594              	.LVL105:
 1595 000a FFF7FEFF 		bl	sx126x_WriteBuffer
 1596              	.LVL106:
 357:Src/main.c    **** }
 1597              		.loc 1 357 0
 1598              		@ sp needed
 1599 000e 08BD     		pop	{r3, pc}
 1600              		.cfi_endproc
 1601              	.LFE43:
 1603              		.section	.text.PrepareBuffer,"ax",%progbits
 1604              		.align	2
 1605              		.global	PrepareBuffer
 1606              		.code	16
 1607              		.thumb_func
 1609              	PrepareBuffer:
 1610              	.LFB40:
 322:Src/main.c    **** void PrepareBuffer(const Messages_t *messageToSend){
 1611              		.loc 1 322 0
 1612              		.cfi_startproc
 1613              	.LVL107:
 1614 0000 08B5     		push	{r3, lr}
 1615              	.LCFI34:
 1616              		.cfi_def_cfa_offset 8
 1617              		.cfi_offset 3, -8
 1618              		.cfi_offset 14, -4
 323:Src/main.c    ****     sx126x_SetPayload((uint8_t*)messageToSend, MESSAGE_SIZE);
 1619              		.loc 1 323 0
 1620 0002 0421     		mov	r1, #4
 1621 0004 FFF7FEFF 		bl	sx126x_SetPayload
 1622              	.LVL108:
 324:Src/main.c    **** }
 1623              		.loc 1 324 0
ARM GAS  /tmp/cciXydud.s 			page 57


 1624              		@ sp needed
 1625 0008 08BD     		pop	{r3, pc}
 1626              		.cfi_endproc
 1627              	.LFE40:
 1629 000a C046     		.section	.text.sx126x_WriteReg,"ax",%progbits
 1630              		.align	2
 1631              		.global	sx126x_WriteReg
 1632              		.code	16
 1633              		.thumb_func
 1635              	sx126x_WriteReg:
 1636              	.LFB62:
 843:Src/main.c    **** {
 1637              		.loc 1 843 0
 1638              		.cfi_startproc
 1639              	.LVL109:
 1640 0000 E0B5     		push	{r5, r6, r7, lr}
 1641              	.LCFI35:
 1642              		.cfi_def_cfa_offset 16
 1643              		.cfi_offset 5, -16
 1644              		.cfi_offset 6, -12
 1645              		.cfi_offset 7, -8
 1646              		.cfi_offset 14, -4
 1647 0002 5746     		mov	r7, r10
 1648 0004 4E46     		mov	r6, r9
 1649 0006 4546     		mov	r5, r8
 1650 0008 E0B4     		push	{r5, r6, r7}
 1651              	.LCFI36:
 1652              		.cfi_def_cfa_offset 28
 1653              		.cfi_offset 8, -28
 1654              		.cfi_offset 9, -24
 1655              		.cfi_offset 10, -20
 1656 000a 83B0     		sub	sp, sp, #12
 1657              	.LCFI37:
 1658              		.cfi_def_cfa_offset 40
 1659 000c 071C     		mov	r7, r0
 1660 000e 8A46     		mov	r10, r1
 1661 0010 9146     		mov	r9, r2
 844:Src/main.c    ****     sx126x_WaitOnBusy( );
 1662              		.loc 1 844 0
 1663 0012 FFF7FEFF 		bl	sx126x_WaitOnBusy
 1664              	.LVL110:
 846:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 1665              		.loc 1 846 0
 1666 0016 A026     		mov	r6, #160
 1667 0018 F605     		lsl	r6, r6, #23
 1668 001a 8025     		mov	r5, #128
 1669 001c 6D00     		lsl	r5, r5, #1
 1670 001e 301C     		mov	r0, r6
 1671 0020 291C     		mov	r1, r5
 1672 0022 0022     		mov	r2, #0
 1673 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1674              	.LVL111:
 849:Src/main.c    ****     buf[0] = ( uint8_t )RADIO_WRITE_REGISTER;
 1675              		.loc 1 849 0
 1676 0028 01A9     		add	r1, sp, #4
 1677 002a 0D23     		mov	r3, #13
 1678 002c 0B70     		strb	r3, [r1]
ARM GAS  /tmp/cciXydud.s 			page 58


 850:Src/main.c    ****     buf[1] = ( uint8_t )( address & 0xFF00 ) >> 8;
 1679              		.loc 1 850 0
 1680 002e 0023     		mov	r3, #0
 1681 0030 4B70     		strb	r3, [r1, #1]
 851:Src/main.c    ****     buf[2] = ( uint8_t )( address & 0x00FF );
 1682              		.loc 1 851 0
 1683 0032 8F70     		strb	r7, [r1, #2]
 853:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, buf, 3, HAL_MAX_DELAY);
 1684              		.loc 1 853 0
 1685 0034 0C4B     		ldr	r3, .L92
 1686 0036 9846     		mov	r8, r3
 1687 0038 0127     		mov	r7, #1
 1688 003a 7F42     		neg	r7, r7
 1689 003c 181C     		mov	r0, r3
 1690 003e 0322     		mov	r2, #3
 1691 0040 3B1C     		mov	r3, r7
 1692 0042 FFF7FEFF 		bl	HAL_SPI_Transmit
 1693              	.LVL112:
 857:Src/main.c    ****         HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 1694              		.loc 1 857 0
 1695 0046 4046     		mov	r0, r8
 1696 0048 5146     		mov	r1, r10
 1697 004a 4A46     		mov	r2, r9
 1698 004c 3B1C     		mov	r3, r7
 1699 004e FFF7FEFF 		bl	HAL_SPI_Transmit
 1700              	.LVL113:
 859:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 1701              		.loc 1 859 0
 1702 0052 301C     		mov	r0, r6
 1703 0054 291C     		mov	r1, r5
 1704 0056 0122     		mov	r2, #1
 1705 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1706              	.LVL114:
 860:Src/main.c    **** }
 1707              		.loc 1 860 0
 1708 005c 03B0     		add	sp, sp, #12
 1709              		@ sp needed
 1710              	.LVL115:
 1711 005e 2CBC     		pop	{r2, r3, r5}
 1712 0060 9046     		mov	r8, r2
 1713 0062 9946     		mov	r9, r3
 1714 0064 AA46     		mov	r10, r5
 1715 0066 E0BD     		pop	{r5, r6, r7, pc}
 1716              	.L93:
 1717              		.align	2
 1718              	.L92:
 1719 0068 00000000 		.word	hspi1
 1720              		.cfi_endproc
 1721              	.LFE62:
 1723              		.section	.text.sx126x_SetTxParams,"ax",%progbits
 1724              		.align	2
 1725              		.global	sx126x_SetTxParams
 1726              		.code	16
 1727              		.thumb_func
 1729              	sx126x_SetTxParams:
 1730              	.LFB46:
 384:Src/main.c    **** {
ARM GAS  /tmp/cciXydud.s 			page 59


 1731              		.loc 1 384 0
 1732              		.cfi_startproc
 1733              	.LVL116:
 1734 0000 30B5     		push	{r4, r5, lr}
 1735              	.LCFI38:
 1736              		.cfi_def_cfa_offset 12
 1737              		.cfi_offset 4, -12
 1738              		.cfi_offset 5, -8
 1739              		.cfi_offset 14, -4
 1740 0002 83B0     		sub	sp, sp, #12
 1741              	.LCFI39:
 1742              		.cfi_def_cfa_offset 24
 1743 0004 041C     		mov	r4, r0
 1744 0006 0D1C     		mov	r5, r1
 390:Src/main.c    ****         if( power == 15 )
 1745              		.loc 1 390 0
 1746 0008 0F28     		cmp	r0, #15
 1747 000a 06D1     		bne	.L95
 1748              	.LBB13:
 392:Src/main.c    ****             sx126x_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 1749              		.loc 1 392 0
 1750 000c 0620     		mov	r0, #6
 1751              	.LVL117:
 1752 000e 0021     		mov	r1, #0
 1753              	.LVL118:
 1754 0010 0122     		mov	r2, #1
 1755 0012 0123     		mov	r3, #1
 1756 0014 FFF7FEFF 		bl	sx126x_SetPaConfig
 1757              	.LVL119:
 1758              	.LBE13:
 1759 0018 05E0     		b	.L96
 1760              	.LVL120:
 1761              	.L95:
 1762              	.LBB14:
 396:Src/main.c    ****             sx126x_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 1763              		.loc 1 396 0
 1764 001a 0420     		mov	r0, #4
 1765              	.LVL121:
 1766 001c 0021     		mov	r1, #0
 1767              	.LVL122:
 1768 001e 0122     		mov	r2, #1
 1769 0020 0123     		mov	r3, #1
 1770 0022 FFF7FEFF 		bl	sx126x_SetPaConfig
 1771              	.LVL123:
 1772              	.L96:
 1773              	.LBE14:
 398:Src/main.c    ****         if( power >= 14 )
 1774              		.loc 1 398 0
 1775 0026 0D2C     		cmp	r4, #13
 1776 0028 02DC     		bgt	.L98
 402:Src/main.c    ****         else if( power < -3 )
 1777              		.loc 1 402 0
 1778 002a E31C     		add	r3, r4, #3
 1779 002c 02DB     		blt	.L99
 1780 002e 03E0     		b	.L97
 1781              	.L98:
 400:Src/main.c    ****             power = 14;
ARM GAS  /tmp/cciXydud.s 			page 60


 1782              		.loc 1 400 0
 1783 0030 0E24     		mov	r4, #14
 1784 0032 01E0     		b	.L97
 1785              	.L99:
 404:Src/main.c    ****             power = -3;
 1786              		.loc 1 404 0
 1787 0034 0324     		mov	r4, #3
 1788 0036 6442     		neg	r4, r4
 1789              	.L97:
 1790              	.LVL124:
 406:Src/main.c    ****         sx126x_WriteReg( REG_OCP, 0x18, 1 ); // current max is 80 mA for the whole device
 1791              		.loc 1 406 0
 1792 0038 0648     		ldr	r0, .L100
 1793 003a 1821     		mov	r1, #24
 1794 003c 0122     		mov	r2, #1
 1795 003e FFF7FEFF 		bl	sx126x_WriteReg
 1796              	.LVL125:
 421:Src/main.c    ****     buf[0] = power;
 1797              		.loc 1 421 0
 1798 0042 01A9     		add	r1, sp, #4
 1799 0044 0C70     		strb	r4, [r1]
 435:Src/main.c    ****         buf[1] = ( uint8_t )rampTime;
 1800              		.loc 1 435 0
 1801 0046 4D70     		strb	r5, [r1, #1]
 437:Src/main.c    ****     sx126x_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 1802              		.loc 1 437 0
 1803 0048 8E20     		mov	r0, #142
 1804 004a 0222     		mov	r2, #2
 1805 004c FFF7FEFF 		bl	sx126x_WriteCommand
 1806              	.LVL126:
 438:Src/main.c    **** }
 1807              		.loc 1 438 0
 1808 0050 03B0     		add	sp, sp, #12
 1809              		@ sp needed
 1810              	.LVL127:
 1811 0052 30BD     		pop	{r4, r5, pc}
 1812              	.L101:
 1813              		.align	2
 1814              	.L100:
 1815 0054 E7080000 		.word	2279
 1816              		.cfi_endproc
 1817              	.LFE46:
 1819              		.section	.text.sx126x_SetSyncWord,"ax",%progbits
 1820              		.align	2
 1821              		.global	sx126x_SetSyncWord
 1822              		.code	16
 1823              		.thumb_func
 1825              	sx126x_SetSyncWord:
 1826              	.LFB51:
 604:Src/main.c    **** {
 1827              		.loc 1 604 0
 1828              		.cfi_startproc
 1829              	.LVL128:
 1830 0000 08B5     		push	{r3, lr}
 1831              	.LCFI40:
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 3, -8
ARM GAS  /tmp/cciXydud.s 			page 61


 1834              		.cfi_offset 14, -4
 1835 0002 011C     		mov	r1, r0
 605:Src/main.c    ****     sx126x_WriteReg( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 1836              		.loc 1 605 0
 1837 0004 D820     		mov	r0, #216
 1838              	.LVL129:
 1839 0006 C000     		lsl	r0, r0, #3
 1840 0008 0822     		mov	r2, #8
 1841 000a FFF7FEFF 		bl	sx126x_WriteReg
 1842              	.LVL130:
 607:Src/main.c    **** }
 1843              		.loc 1 607 0
 1844              		@ sp needed
 1845 000e 08BD     		pop	{r3, pc}
 1846              		.cfi_endproc
 1847              	.LFE51:
 1849              		.section	.text.ConfigureGeneralRadio,"ax",%progbits
 1850              		.align	2
 1851              		.global	ConfigureGeneralRadio
 1852              		.code	16
 1853              		.thumb_func
 1855              	ConfigureGeneralRadio:
 1856              	.LFB45:
 370:Src/main.c    **** void ConfigureGeneralRadio(RadioConfigurations_t *config){
 1857              		.loc 1 370 0
 1858              		.cfi_startproc
 1859              	.LVL131:
 1860 0000 10B5     		push	{r4, lr}
 1861              	.LCFI41:
 1862              		.cfi_def_cfa_offset 8
 1863              		.cfi_offset 4, -8
 1864              		.cfi_offset 14, -4
 1865 0002 82B0     		sub	sp, sp, #8
 1866              	.LCFI42:
 1867              		.cfi_def_cfa_offset 16
 1868 0004 041C     		mov	r4, r0
 371:Src/main.c    ****     sx126x_SetPacketType(config->packetType);
 1869              		.loc 1 371 0
 1870 0006 0078     		ldrb	r0, [r0]
 1871              	.LVL132:
 1872 0008 FFF7FEFF 		bl	sx126x_SetPacketType
 1873              	.LVL133:
 372:Src/main.c    ****     sx126x_SetPacketParams(&config->packetParams);
 1874              		.loc 1 372 0
 1875 000c 201C     		mov	r0, r4
 1876 000e 1830     		add	r0, r0, #24
 1877 0010 FFF7FEFF 		bl	sx126x_SetPacketParams
 1878              	.LVL134:
 373:Src/main.c    ****     sx126x_SetModulationParams(&config->modParams);
 1879              		.loc 1 373 0
 1880 0014 201D     		add	r0, r4, #4
 1881 0016 FFF7FEFF 		bl	sx126x_SetModulationParams
 1882              	.LVL135:
 374:Src/main.c    ****     sx126x_SetRfFrequency(config->rfFrequency);
 1883              		.loc 1 374 0
 1884 001a E06A     		ldr	r0, [r4, #44]
 1885 001c FFF7FEFF 		bl	sx126x_SetRfFrequency
ARM GAS  /tmp/cciXydud.s 			page 62


 1886              	.LVL136:
 375:Src/main.c    ****     sx126x_SetTxParams(config->txPower, config->txRampTime);
 1887              		.loc 1 375 0
 1888 0020 A178     		ldrb	r1, [r4, #2]
 1889 0022 0120     		mov	r0, #1
 1890 0024 2056     		ldrsb	r0, [r4, r0]
 1891 0026 FFF7FEFF 		bl	sx126x_SetTxParams
 1892              	.LVL137:
 377:Src/main.c    ****     if(config->packetType == PACKET_TYPE_GFSK){
 1893              		.loc 1 377 0
 1894 002a 2378     		ldrb	r3, [r4]
 1895 002c 002B     		cmp	r3, #0
 1896 002e 07D1     		bne	.L103
 1897              	.LBB15:
 378:Src/main.c    ****         uint8_t syncword[8] = {0xF0, 0x0F, 0x55, 0xAA, 0xF0, 0x0F, 0x55, 0xAA};
 1898              		.loc 1 378 0
 1899 0030 6846     		mov	r0, sp
 1900 0032 0449     		ldr	r1, .L105
 1901 0034 0822     		mov	r2, #8
 1902 0036 FFF7FEFF 		bl	memcpy
 1903              	.LVL138:
 379:Src/main.c    ****         sx126x_SetSyncWord(syncword);
 1904              		.loc 1 379 0
 1905 003a 6846     		mov	r0, sp
 1906 003c FFF7FEFF 		bl	sx126x_SetSyncWord
 1907              	.LVL139:
 1908              	.L103:
 1909              	.LBE15:
 381:Src/main.c    **** }
 1910              		.loc 1 381 0
 1911 0040 02B0     		add	sp, sp, #8
 1912              		@ sp needed
 1913              	.LVL140:
 1914 0042 10BD     		pop	{r4, pc}
 1915              	.L106:
 1916              		.align	2
 1917              	.L105:
 1918 0044 00000000 		.word	.LANCHOR9
 1919              		.cfi_endproc
 1920              	.LFE45:
 1922              		.section	.text.sx126x_Wakeup,"ax",%progbits
 1923              		.align	2
 1924              		.global	sx126x_Wakeup
 1925              		.code	16
 1926              		.thumb_func
 1928              	sx126x_Wakeup:
 1929              	.LFB65:
 873:Src/main.c    **** {
 1930              		.loc 1 873 0
 1931              		.cfi_startproc
 1932 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1933              	.LCFI43:
 1934              		.cfi_def_cfa_offset 20
 1935              		.cfi_offset 4, -20
 1936              		.cfi_offset 5, -16
 1937              		.cfi_offset 6, -12
 1938              		.cfi_offset 7, -8
ARM GAS  /tmp/cciXydud.s 			page 63


 1939              		.cfi_offset 14, -4
 1940 0002 4746     		mov	r7, r8
 1941 0004 80B4     		push	{r7}
 1942              	.LCFI44:
 1943              		.cfi_def_cfa_offset 24
 1944              		.cfi_offset 8, -24
 1945 0006 82B0     		sub	sp, sp, #8
 1946              	.LCFI45:
 1947              		.cfi_def_cfa_offset 32
 878:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 1948              		.loc 1 878 0
 1949 0008 A026     		mov	r6, #160
 1950 000a F605     		lsl	r6, r6, #23
 1951 000c 8025     		mov	r5, #128
 1952 000e 6D00     		lsl	r5, r5, #1
 1953 0010 301C     		mov	r0, r6
 1954 0012 291C     		mov	r1, r5
 1955 0014 0022     		mov	r2, #0
 1956 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1957              	.LVL141:
 879:Src/main.c    ****     uint8_t buf = RADIO_GET_STATUS;
 1958              		.loc 1 879 0
 1959 001a 6C46     		mov	r4, sp
 1960 001c C023     		mov	r3, #192
 1961 001e E371     		strb	r3, [r4, #7]
 1962 0020 0734     		add	r4, r4, #7
 880:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
 1963              		.loc 1 880 0
 1964 0022 0F4B     		ldr	r3, .L108
 1965 0024 9846     		mov	r8, r3
 1966 0026 0127     		mov	r7, #1
 1967 0028 7F42     		neg	r7, r7
 1968 002a 181C     		mov	r0, r3
 1969 002c 211C     		mov	r1, r4
 1970 002e 0122     		mov	r2, #1
 1971 0030 3B1C     		mov	r3, r7
 1972 0032 FFF7FEFF 		bl	HAL_SPI_Transmit
 1973              	.LVL142:
 881:Src/main.c    ****     buf = 0;
 1974              		.loc 1 881 0
 1975 0036 0023     		mov	r3, #0
 1976 0038 2370     		strb	r3, [r4]
 882:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &buf, 1, HAL_MAX_DELAY);
 1977              		.loc 1 882 0
 1978 003a 4046     		mov	r0, r8
 1979 003c 211C     		mov	r1, r4
 1980 003e 0122     		mov	r2, #1
 1981 0040 3B1C     		mov	r3, r7
 1982 0042 FFF7FEFF 		bl	HAL_SPI_Transmit
 1983              	.LVL143:
 883:Src/main.c    ****     HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 1984              		.loc 1 883 0
 1985 0046 301C     		mov	r0, r6
 1986 0048 291C     		mov	r1, r5
 1987 004a 0122     		mov	r2, #1
 1988 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1989              	.LVL144:
ARM GAS  /tmp/cciXydud.s 			page 64


 887:Src/main.c    ****     sx126x_WaitOnBusy( );
 1990              		.loc 1 887 0
 1991 0050 FFF7FEFF 		bl	sx126x_WaitOnBusy
 1992              	.LVL145:
 891:Src/main.c    ****     sx126x_AntSwOn( );
 1993              		.loc 1 891 0
 1994 0054 FFF7FEFF 		bl	sx126x_AntSwOn
 1995              	.LVL146:
 892:Src/main.c    **** }
 1996              		.loc 1 892 0
 1997 0058 02B0     		add	sp, sp, #8
 1998              		@ sp needed
 1999 005a 04BC     		pop	{r2}
 2000 005c 9046     		mov	r8, r2
 2001 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 2002              	.L109:
 2003              		.align	2
 2004              	.L108:
 2005 0060 00000000 		.word	hspi1
 2006              		.cfi_endproc
 2007              	.LFE65:
 2009              		.section	.text.sx126x_Init,"ax",%progbits
 2010              		.align	2
 2011              		.global	sx126x_Init
 2012              		.code	16
 2013              		.thumb_func
 2015              	sx126x_Init:
 2016              	.LFB59:
 781:Src/main.c    **** void sx126x_Init() {
 2017              		.loc 1 781 0
 2018              		.cfi_startproc
 2019 0000 08B5     		push	{r3, lr}
 2020              	.LCFI46:
 2021              		.cfi_def_cfa_offset 8
 2022              		.cfi_offset 3, -8
 2023              		.cfi_offset 14, -4
 782:Src/main.c    ****   sx126x_Reset();
 2024              		.loc 1 782 0
 2025 0002 FFF7FEFF 		bl	sx126x_Reset
 2026              	.LVL147:
 783:Src/main.c    ****   sx126x_Wakeup();
 2027              		.loc 1 783 0
 2028 0006 FFF7FEFF 		bl	sx126x_Wakeup
 2029              	.LVL148:
 784:Src/main.c    ****   sx126x_SetStandby( STDBY_RC );
 2030              		.loc 1 784 0
 2031 000a 0020     		mov	r0, #0
 2032 000c FFF7FEFF 		bl	sx126x_SetStandby
 2033              	.LVL149:
 788:Src/main.c    ****   sx126x_AntSwOn( );
 2034              		.loc 1 788 0
 2035 0010 FFF7FEFF 		bl	sx126x_AntSwOn
 2036              	.LVL150:
 789:Src/main.c    ****   sx126x_SetDio2AsRfSwitchCtrl( true );
 2037              		.loc 1 789 0
 2038 0014 0120     		mov	r0, #1
 2039 0016 FFF7FEFF 		bl	sx126x_SetDio2AsRfSwitchCtrl
ARM GAS  /tmp/cciXydud.s 			page 65


 2040              	.LVL151:
 792:Src/main.c    ****   OperatingMode = MODE_STDBY_RC;
 2041              		.loc 1 792 0
 2042 001a 0122     		mov	r2, #1
 2043 001c 084B     		ldr	r3, .L111
 2044 001e 1A70     		strb	r2, [r3]
 794:Src/main.c    ****   sx126x_SetPacketType( PACKET_TYPE_LORA );
 2045              		.loc 1 794 0
 2046 0020 0120     		mov	r0, #1
 2047 0022 FFF7FEFF 		bl	sx126x_SetPacketType
 2048              	.LVL152:
 802:Src/main.c    ****     sx126x_WriteReg( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF , 1);
 2049              		.loc 1 802 0
 2050 0026 E820     		mov	r0, #232
 2051 0028 C000     		lsl	r0, r0, #3
 2052 002a 1421     		mov	r1, #20
 2053 002c 0122     		mov	r2, #1
 2054 002e FFF7FEFF 		bl	sx126x_WriteReg
 2055              	.LVL153:
 803:Src/main.c    ****     sx126x_WriteReg( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF , 1);
 2056              		.loc 1 803 0
 2057 0032 0448     		ldr	r0, .L111+4
 2058 0034 2421     		mov	r1, #36
 2059 0036 0122     		mov	r2, #1
 2060 0038 FFF7FEFF 		bl	sx126x_WriteReg
 2061              	.LVL154:
 805:Src/main.c    **** }
 2062              		.loc 1 805 0
 2063              		@ sp needed
 2064 003c 08BD     		pop	{r3, pc}
 2065              	.L112:
 2066 003e C046     		.align	2
 2067              	.L111:
 2068 0040 00000000 		.word	OperatingMode
 2069 0044 41070000 		.word	1857
 2070              		.cfi_endproc
 2071              	.LFE59:
 2073              		.section	.text._Error_Handler,"ax",%progbits
 2074              		.align	2
 2075              		.global	_Error_Handler
 2076              		.code	16
 2077              		.thumb_func
 2079              	_Error_Handler:
 2080              	.LFB72:
1030:Src/main.c    **** 
1031:Src/main.c    **** /* USER CODE BEGIN 4 */
1032:Src/main.c    **** 
1033:Src/main.c    **** /* USER CODE END 4 */
1034:Src/main.c    **** 
1035:Src/main.c    **** /**
1036:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1037:Src/main.c    ****   * @param  None
1038:Src/main.c    ****   * @retval None
1039:Src/main.c    ****   */
1040:Src/main.c    **** void _Error_Handler(char * file, int line)
1041:Src/main.c    **** {
 2081              		.loc 1 1041 0
ARM GAS  /tmp/cciXydud.s 			page 66


 2082              		.cfi_startproc
 2083              	.LVL155:
 2084              	.L114:
 2085 0000 FEE7     		b	.L114
 2086              		.cfi_endproc
 2087              	.LFE72:
 2089 0002 C046     		.section	.text.MX_SPI1_Init,"ax",%progbits
 2090              		.align	2
 2091              		.code	16
 2092              		.thumb_func
 2094              	MX_SPI1_Init:
 2095              	.LFB70:
 959:Src/main.c    **** {
 2096              		.loc 1 959 0
 2097              		.cfi_startproc
 959:Src/main.c    **** {
 2098              		.loc 1 959 0
 2099 0000 08B5     		push	{r3, lr}
 2100              	.LCFI47:
 2101              		.cfi_def_cfa_offset 8
 2102              		.cfi_offset 3, -8
 2103              		.cfi_offset 14, -4
 961:Src/main.c    ****   hspi1.Instance = SPI1;
 2104              		.loc 1 961 0
 2105 0002 0E48     		ldr	r0, .L117
 2106 0004 0E4B     		ldr	r3, .L117+4
 2107 0006 0360     		str	r3, [r0]
 962:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 2108              		.loc 1 962 0
 2109 0008 8223     		mov	r3, #130
 2110 000a 5B00     		lsl	r3, r3, #1
 2111 000c 4360     		str	r3, [r0, #4]
 963:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 2112              		.loc 1 963 0
 2113 000e 0023     		mov	r3, #0
 2114 0010 8360     		str	r3, [r0, #8]
 964:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 2115              		.loc 1 964 0
 2116 0012 C360     		str	r3, [r0, #12]
 965:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 2117              		.loc 1 965 0
 2118 0014 0361     		str	r3, [r0, #16]
 966:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 2119              		.loc 1 966 0
 2120 0016 4361     		str	r3, [r0, #20]
 967:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 2121              		.loc 1 967 0
 2122 0018 8022     		mov	r2, #128
 2123 001a 9200     		lsl	r2, r2, #2
 2124 001c 8261     		str	r2, [r0, #24]
 968:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 2125              		.loc 1 968 0
 2126 001e C361     		str	r3, [r0, #28]
 969:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 2127              		.loc 1 969 0
 2128 0020 0362     		str	r3, [r0, #32]
 970:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
ARM GAS  /tmp/cciXydud.s 			page 67


 2129              		.loc 1 970 0
 2130 0022 4362     		str	r3, [r0, #36]
 971:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 2131              		.loc 1 971 0
 2132 0024 8362     		str	r3, [r0, #40]
 972:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 2133              		.loc 1 972 0
 2134 0026 0723     		mov	r3, #7
 2135 0028 C362     		str	r3, [r0, #44]
 973:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 2136              		.loc 1 973 0
 2137 002a FFF7FEFF 		bl	HAL_SPI_Init
 2138              	.LVL156:
 2139 002e 0028     		cmp	r0, #0
 2140 0030 03D0     		beq	.L115
 975:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 2141              		.loc 1 975 0
 2142 0032 0448     		ldr	r0, .L117+8
 2143 0034 0449     		ldr	r1, .L117+12
 2144 0036 FFF7FEFF 		bl	_Error_Handler
 2145              	.LVL157:
 2146              	.L115:
 978:Src/main.c    **** }
 2147              		.loc 1 978 0
 2148              		@ sp needed
 2149 003a 08BD     		pop	{r3, pc}
 2150              	.L118:
 2151              		.align	2
 2152              	.L117:
 2153 003c 00000000 		.word	hspi1
 2154 0040 00300140 		.word	1073819648
 2155 0044 00000000 		.word	.LC21
 2156 0048 CF030000 		.word	975
 2157              		.cfi_endproc
 2158              	.LFE70:
 2160              		.global	__aeabi_uidiv
 2161              		.section	.text.SystemClock_Config,"ax",%progbits
 2162              		.align	2
 2163              		.global	SystemClock_Config
 2164              		.code	16
 2165              		.thumb_func
 2167              	SystemClock_Config:
 2168              	.LFB69:
 911:Src/main.c    **** {
 2169              		.loc 1 911 0
 2170              		.cfi_startproc
 2171 0000 00B5     		push	{lr}
 2172              	.LCFI48:
 2173              		.cfi_def_cfa_offset 4
 2174              		.cfi_offset 14, -4
 2175 0002 95B0     		sub	sp, sp, #84
 2176              	.LCFI49:
 2177              		.cfi_def_cfa_offset 88
 918:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2178              		.loc 1 918 0
 2179 0004 1F4B     		ldr	r3, .L122
 2180 0006 1968     		ldr	r1, [r3]
ARM GAS  /tmp/cciXydud.s 			page 68


 2181 0008 1F4A     		ldr	r2, .L122+4
 2182 000a 0A40     		and	r2, r1
 2183 000c 8021     		mov	r1, #128
 2184 000e 0901     		lsl	r1, r1, #4
 2185 0010 0A43     		orr	r2, r1
 2186 0012 1A60     		str	r2, [r3]
 922:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 2187              		.loc 1 922 0
 2188 0014 0223     		mov	r3, #2
 2189 0016 0693     		str	r3, [sp, #24]
 923:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 2190              		.loc 1 923 0
 2191 0018 0923     		mov	r3, #9
 2192 001a 0993     		str	r3, [sp, #36]
 924:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 2193              		.loc 1 924 0
 2194 001c 1023     		mov	r3, #16
 2195 001e 0A93     		str	r3, [sp, #40]
 925:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 2196              		.loc 1 925 0
 2197 0020 0023     		mov	r3, #0
 2198 0022 1093     		str	r3, [sp, #64]
 926:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2199              		.loc 1 926 0
 2200 0024 06A8     		add	r0, sp, #24
 2201 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2202              	.LVL158:
 2203 002a 0028     		cmp	r0, #0
 2204 002c 04D0     		beq	.L120
 928:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 2205              		.loc 1 928 0
 2206 002e 1748     		ldr	r0, .L122+8
 2207 0030 E821     		mov	r1, #232
 2208 0032 8900     		lsl	r1, r1, #2
 2209 0034 FFF7FEFF 		bl	_Error_Handler
 2210              	.LVL159:
 2211              	.L120:
 933:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 2212              		.loc 1 933 0
 2213 0038 0F23     		mov	r3, #15
 2214 003a 0193     		str	r3, [sp, #4]
 935:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 2215              		.loc 1 935 0
 2216 003c 0123     		mov	r3, #1
 2217 003e 0293     		str	r3, [sp, #8]
 936:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2218              		.loc 1 936 0
 2219 0040 0023     		mov	r3, #0
 2220 0042 0393     		str	r3, [sp, #12]
 937:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2221              		.loc 1 937 0
 2222 0044 0493     		str	r3, [sp, #16]
 938:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2223              		.loc 1 938 0
 2224 0046 0593     		str	r3, [sp, #20]
 940:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 2225              		.loc 1 940 0
ARM GAS  /tmp/cciXydud.s 			page 69


 2226 0048 01A8     		add	r0, sp, #4
 2227 004a 0021     		mov	r1, #0
 2228 004c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2229              	.LVL160:
 2230 0050 0028     		cmp	r0, #0
 2231 0052 03D0     		beq	.L121
 942:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 2232              		.loc 1 942 0
 2233 0054 0D48     		ldr	r0, .L122+8
 2234 0056 0E49     		ldr	r1, .L122+12
 2235 0058 FFF7FEFF 		bl	_Error_Handler
 2236              	.LVL161:
 2237              	.L121:
 947:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 2238              		.loc 1 947 0
 2239 005c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2240              	.LVL162:
 2241 0060 FA21     		mov	r1, #250
 2242 0062 8900     		lsl	r1, r1, #2
 2243 0064 FFF7FEFF 		bl	__aeabi_uidiv
 2244              	.LVL163:
 2245 0068 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2246              	.LVL164:
 951:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 2247              		.loc 1 951 0
 2248 006c 0420     		mov	r0, #4
 2249 006e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2250              	.LVL165:
 954:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 2251              		.loc 1 954 0
 2252 0072 0120     		mov	r0, #1
 2253 0074 4042     		neg	r0, r0
 2254 0076 0021     		mov	r1, #0
 2255 0078 0022     		mov	r2, #0
 2256 007a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2257              	.LVL166:
 955:Src/main.c    **** }
 2258              		.loc 1 955 0
 2259 007e 15B0     		add	sp, sp, #84
 2260              		@ sp needed
 2261 0080 00BD     		pop	{pc}
 2262              	.L123:
 2263 0082 C046     		.align	2
 2264              	.L122:
 2265 0084 00700040 		.word	1073770496
 2266 0088 FFE7FFFF 		.word	-6145
 2267 008c 00000000 		.word	.LC21
 2268 0090 AE030000 		.word	942
 2269              		.cfi_endproc
 2270              	.LFE69:
 2272              		.section	.text.main,"ax",%progbits
 2273              		.align	2
 2274              		.global	main
 2275              		.code	16
 2276              		.thumb_func
 2278              	main:
 2279              	.LFB38:
ARM GAS  /tmp/cciXydud.s 			page 70


 258:Src/main.c    **** {
 2280              		.loc 1 258 0
 2281              		.cfi_startproc
 2282 0000 70B5     		push	{r4, r5, r6, lr}
 2283              	.LCFI50:
 2284              		.cfi_def_cfa_offset 16
 2285              		.cfi_offset 4, -16
 2286              		.cfi_offset 5, -12
 2287              		.cfi_offset 6, -8
 2288              		.cfi_offset 14, -4
 267:Src/main.c    ****   HAL_Init();
 2289              		.loc 1 267 0
 2290 0002 FFF7FEFF 		bl	HAL_Init
 2291              	.LVL167:
 274:Src/main.c    ****   SystemClock_Config();
 2292              		.loc 1 274 0
 2293 0006 FFF7FEFF 		bl	SystemClock_Config
 2294              	.LVL168:
 281:Src/main.c    ****   MX_GPIO_Init();
 2295              		.loc 1 281 0
 2296 000a FFF7FEFF 		bl	MX_GPIO_Init
 2297              	.LVL169:
 282:Src/main.c    ****   MX_SPI1_Init();
 2298              		.loc 1 282 0
 2299 000e FFF7FEFF 		bl	MX_SPI1_Init
 2300              	.LVL170:
 286:Src/main.c    ****   sx126x_Reset();
 2301              		.loc 1 286 0
 2302 0012 FFF7FEFF 		bl	sx126x_Reset
 2303              	.LVL171:
 287:Src/main.c    ****   sx126x_Init();
 2304              		.loc 1 287 0
 2305 0016 FFF7FEFF 		bl	sx126x_Init
 2306              	.LVL172:
 289:Src/main.c    ****   SetToMaster();
 2307              		.loc 1 289 0
 2308 001a FFF7FEFF 		bl	SetToMaster
 2309              	.LVL173:
 290:Src/main.c    ****   SetConfiguration(&radioConfiguration);
 2310              		.loc 1 290 0
 2311 001e 0C4C     		ldr	r4, .L126
 2312 0020 201C     		mov	r0, r4
 2313 0022 FFF7FEFF 		bl	SetConfiguration
 2314              	.LVL174:
 291:Src/main.c    ****   ConfigureGeneralRadio(&radioConfiguration);
 2315              		.loc 1 291 0
 2316 0026 201C     		mov	r0, r4
 2317 0028 FFF7FEFF 		bl	ConfigureGeneralRadio
 2318              	.LVL175:
 2319              	.LBB16:
 307:Src/main.c    ****     PrepareBuffer(messageToSend);
 2320              		.loc 1 307 0
 2321 002c 094E     		ldr	r6, .L126+4
 308:Src/main.c    ****     ConfigureRadioTx(&radioConfiguration);
 2322              		.loc 1 308 0
 2323 002e 084C     		ldr	r4, .L126
 311:Src/main.c    ****     HAL_Delay(500);
ARM GAS  /tmp/cciXydud.s 			page 71


 2324              		.loc 1 311 0
 2325 0030 FA25     		mov	r5, #250
 2326 0032 6D00     		lsl	r5, r5, #1
 2327              	.L125:
 307:Src/main.c    ****     PrepareBuffer(messageToSend);
 2328              		.loc 1 307 0 discriminator 1
 2329 0034 3068     		ldr	r0, [r6]
 2330 0036 FFF7FEFF 		bl	PrepareBuffer
 2331              	.LVL176:
 308:Src/main.c    ****     ConfigureRadioTx(&radioConfiguration);
 2332              		.loc 1 308 0 discriminator 1
 2333 003a 201C     		mov	r0, r4
 2334 003c FFF7FEFF 		bl	ConfigureRadioTx
 2335              	.LVL177:
 309:Src/main.c    ****     sx126x_SetTx(radioConfiguration.txTimeout);
 2336              		.loc 1 309 0 discriminator 1
 2337 0040 606B     		ldr	r0, [r4, #52]
 2338 0042 FFF7FEFF 		bl	sx126x_SetTx
 2339              	.LVL178:
 311:Src/main.c    ****     HAL_Delay(500);
 2340              		.loc 1 311 0 discriminator 1
 2341 0046 281C     		mov	r0, r5
 2342 0048 FFF7FEFF 		bl	HAL_Delay
 2343              	.LVL179:
 2344 004c F2E7     		b	.L125
 2345              	.L127:
 2346 004e C046     		.align	2
 2347              	.L126:
 2348 0050 00000000 		.word	radioConfiguration
 2349 0054 00000000 		.word	.LANCHOR6
 2350              	.LBE16:
 2351              		.cfi_endproc
 2352              	.LFE38:
 2354              		.global	slaveCanListen
 2355              		.global	masterCanSend
 2356              		.global	isMaster
 2357              		.comm	OperatingMode,1,1
 2358              		.global	SnrValue
 2359              		.global	RssiValue
 2360              		.comm	Buffer,32,4
 2361              		.global	BufferSize
 2362              		.global	messageToSend
 2363              		.global	messageToReceive
 2364              		.global	PongMsg
 2365              		.global	PingMsg
 2366              		.global	radioFlags
 2367              		.global	State
 2368              		.comm	radioConfiguration,60,4
 2369              		.comm	hspi1,88,4
 2370              		.section	.rodata
 2371              		.align	2
 2372              		.set	.LANCHOR9,. + 0
 2373              	.LC0:
 2374 0000 F0       		.byte	-16
 2375 0001 0F       		.byte	15
 2376 0002 55       		.byte	85
 2377 0003 AA       		.byte	-86
ARM GAS  /tmp/cciXydud.s 			page 72


 2378 0004 F0       		.byte	-16
 2379 0005 0F       		.byte	15
 2380 0006 55       		.byte	85
 2381 0007 AA       		.byte	-86
 2382              		.section	.bss.RssiValue,"aw",%nobits
 2385              	RssiValue:
 2386 0000 00       		.space	1
 2387              		.section	.data.messageToReceive,"aw",%progbits
 2388              		.align	2
 2389              		.set	.LANCHOR4,. + 0
 2392              	messageToReceive:
 2393 0000 00000000 		.word	PongMsg
 2394              		.section	.bss.ImageCalibrated,"aw",%nobits
 2395              		.set	.LANCHOR8,. + 0
 2398              	ImageCalibrated:
 2399 0000 00       		.space	1
 2400              		.section	.bss.State,"aw",%nobits
 2401              		.set	.LANCHOR3,. + 0
 2404              	State:
 2405 0000 00       		.space	1
 2406              		.section	.data.messageToSend,"aw",%progbits
 2407              		.align	2
 2408              		.set	.LANCHOR6,. + 0
 2411              	messageToSend:
 2412 0000 00000000 		.word	PingMsg
 2413              		.section	.rodata.PongMsg,"a",%progbits
 2414              		.align	2
 2415              		.set	.LANCHOR5,. + 0
 2418              	PongMsg:
 2419 0000 50       		.byte	80
 2420 0001 4F       		.byte	79
 2421 0002 4E       		.byte	78
 2422 0003 47       		.byte	71
 2423              		.section	.data.BufferSize,"aw",%progbits
 2426              	BufferSize:
 2427 0000 20       		.byte	32
 2428              		.section	.bss.SnrValue,"aw",%nobits
 2431              	SnrValue:
 2432 0000 00       		.space	1
 2433              		.section	.bss.radioFlags,"aw",%nobits
 2434              		.align	2
 2437              	radioFlags:
 2438 0000 00000000 		.space	5
 2438      00
 2439 0005 000000   		.section	.rodata.str1.4,"aMS",%progbits,1
 2440              		.align	2
 2441              	.LC21:
 2442 0000 5372632F 		.ascii	"Src/main.c\000"
 2442      6D61696E 
 2442      2E6300
 2443 000b 00       		.section	.bss.slaveCanListen,"aw",%nobits
 2444              		.set	.LANCHOR1,. + 0
 2447              	slaveCanListen:
 2448 0000 00       		.space	1
 2449              		.section	.rodata.PingMsg,"a",%progbits
 2450              		.align	2
 2451              		.set	.LANCHOR7,. + 0
ARM GAS  /tmp/cciXydud.s 			page 73


 2454              	PingMsg:
 2455 0000 50       		.byte	80
 2456 0001 49       		.byte	73
 2457 0002 4E       		.byte	78
 2458 0003 47       		.byte	71
 2459              		.section	.data.masterCanSend,"aw",%progbits
 2460              		.set	.LANCHOR0,. + 0
 2463              	masterCanSend:
 2464 0000 01       		.byte	1
 2465              		.section	.data.isMaster,"aw",%progbits
 2466              		.set	.LANCHOR2,. + 0
 2469              	isMaster:
 2470 0000 01       		.byte	1
 2471              		.text
 2472              	.Letext0:
 2473              		.file 3 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l053xx.h"
 2474              		.file 4 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 2475              		.file 5 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 2476              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 2477              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h"
 2478              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 2479              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 2480              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_spi.h"
 2481              		.file 11 "Inc/radio.h"
 2482              		.file 12 "Inc/sx126x.h"
 2483              		.file 13 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h"
 2484              		.file 14 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
ARM GAS  /tmp/cciXydud.s 			page 74


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cciXydud.s:18     .text.MX_GPIO_Init:00000000 $t
     /tmp/cciXydud.s:22     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cciXydud.s:141    .text.MX_GPIO_Init:00000094 $d
     /tmp/cciXydud.s:149    .text.MasterSendNextEvent:00000000 $t
     /tmp/cciXydud.s:154    .text.MasterSendNextEvent:00000000 MasterSendNextEvent
     /tmp/cciXydud.s:167    .text.MasterSendNextEvent:00000008 $d
     /tmp/cciXydud.s:172    .text.SlaveListenNextEvent:00000000 $t
     /tmp/cciXydud.s:177    .text.SlaveListenNextEvent:00000000 SlaveListenNextEvent
     /tmp/cciXydud.s:190    .text.SlaveListenNextEvent:00000008 $d
     /tmp/cciXydud.s:195    .text.SetToMaster:00000000 $t
     /tmp/cciXydud.s:200    .text.SetToMaster:00000000 SetToMaster
     /tmp/cciXydud.s:229    .text.SetToMaster:00000020 $d
     /tmp/cciXydud.s:240    .text.sx126x_SetCrcSeed:00000000 $t
     /tmp/cciXydud.s:245    .text.sx126x_SetCrcSeed:00000000 sx126x_SetCrcSeed
     /tmp/cciXydud.s:257    .text.sx126x_SetCrcPolynomial:00000000 $t
     /tmp/cciXydud.s:262    .text.sx126x_SetCrcPolynomial:00000000 sx126x_SetCrcPolynomial
     /tmp/cciXydud.s:274    .text.SetConfiguration:00000000 $t
     /tmp/cciXydud.s:279    .text.SetConfiguration:00000000 SetConfiguration
     /tmp/cciXydud.s:344    .text.SetConfiguration:00000048 $d
     /tmp/cciXydud.s:351    .text.sx126x_Reset:00000000 $t
     /tmp/cciXydud.s:356    .text.sx126x_Reset:00000000 sx126x_Reset
     /tmp/cciXydud.s:398    .text.sx126x_WaitOnCounter:00000000 $t
     /tmp/cciXydud.s:403    .text.sx126x_WaitOnCounter:00000000 sx126x_WaitOnCounter
     /tmp/cciXydud.s:441    .text.sx126x_AntSwOn:00000000 $t
     /tmp/cciXydud.s:446    .text.sx126x_AntSwOn:00000000 sx126x_AntSwOn
     /tmp/cciXydud.s:470    .text.sx126x_AntSwOff:00000000 $t
     /tmp/cciXydud.s:475    .text.sx126x_AntSwOff:00000000 sx126x_AntSwOff
     /tmp/cciXydud.s:499    .text.sx126x_WaitOnBusy:00000000 $t
     /tmp/cciXydud.s:504    .text.sx126x_WaitOnBusy:00000000 sx126x_WaitOnBusy
     /tmp/cciXydud.s:529    .text.sx126x_WaitOnBusy:00000014 $d
     /tmp/cciXydud.s:534    .text.sx126x_WriteCommand:00000000 $t
     /tmp/cciXydud.s:539    .text.sx126x_WriteCommand:00000000 sx126x_WriteCommand
     /tmp/cciXydud.s:619    .text.sx126x_WriteCommand:00000060 $d
                            *COM*:00000058 hspi1
     /tmp/cciXydud.s:624    .text.sx126x_SetTx:00000000 $t
     /tmp/cciXydud.s:629    .text.sx126x_SetTx:00000000 sx126x_SetTx
     /tmp/cciXydud.s:667    .text.sx126x_SetTx:00000024 $d
                            *COM*:00000001 OperatingMode
     /tmp/cciXydud.s:672    .text.sx126x_SetDioIrqParams:00000000 $t
     /tmp/cciXydud.s:677    .text.sx126x_SetDioIrqParams:00000000 sx126x_SetDioIrqParams
     /tmp/cciXydud.s:729    .text.ConfigureRadioTx:00000000 $t
     /tmp/cciXydud.s:734    .text.ConfigureRadioTx:00000000 ConfigureRadioTx
     /tmp/cciXydud.s:759    .text.sx126x_SetPaConfig:00000000 $t
     /tmp/cciXydud.s:764    .text.sx126x_SetPaConfig:00000000 sx126x_SetPaConfig
     /tmp/cciXydud.s:803    .text.sx126x_CalibrateImage:00000000 $t
     /tmp/cciXydud.s:808    .text.sx126x_CalibrateImage:00000000 sx126x_CalibrateImage
     /tmp/cciXydud.s:898    .text.sx126x_CalibrateImage:0000006c $d
     /tmp/cciXydud.s:910    .text.sx126x_SetRfFrequency:00000000 $t
     /tmp/cciXydud.s:915    .text.sx126x_SetRfFrequency:00000000 sx126x_SetRfFrequency
     /tmp/cciXydud.s:981    .text.sx126x_SetRfFrequency:00000048 $d
     /tmp/cciXydud.s:989    .text.sx126x_SetModulationParams:00000000 $t
     /tmp/cciXydud.s:994    .text.sx126x_SetModulationParams:00000000 sx126x_SetModulationParams
     /tmp/cciXydud.s:1092   .rodata.sx126x_SetModulationParams:00000000 $d
     /tmp/cciXydud.s:1203   .text.sx126x_SetModulationParams:000000f0 $d
     /tmp/cciXydud.s:1214   .text.sx126x_SetPacketParams:00000000 $t
ARM GAS  /tmp/cciXydud.s 			page 75


     /tmp/cciXydud.s:1219   .text.sx126x_SetPacketParams:00000000 sx126x_SetPacketParams
     /tmp/cciXydud.s:1346   .text.sx126x_SetPacketType:00000000 $t
     /tmp/cciXydud.s:1351   .text.sx126x_SetPacketType:00000000 sx126x_SetPacketType
     /tmp/cciXydud.s:1381   .text.sx126x_SetStandby:00000000 $t
     /tmp/cciXydud.s:1386   .text.sx126x_SetStandby:00000000 sx126x_SetStandby
     /tmp/cciXydud.s:1432   .text.sx126x_SetStandby:0000002c $d
     /tmp/cciXydud.s:1437   .text.sx126x_SetDio2AsRfSwitchCtrl:00000000 $t
     /tmp/cciXydud.s:1442   .text.sx126x_SetDio2AsRfSwitchCtrl:00000000 sx126x_SetDio2AsRfSwitchCtrl
     /tmp/cciXydud.s:1472   .text.sx126x_WriteBuffer:00000000 $t
     /tmp/cciXydud.s:1477   .text.sx126x_WriteBuffer:00000000 sx126x_WriteBuffer
     /tmp/cciXydud.s:1568   .text.sx126x_WriteBuffer:00000074 $d
     /tmp/cciXydud.s:1573   .text.sx126x_SetPayload:00000000 $t
     /tmp/cciXydud.s:1578   .text.sx126x_SetPayload:00000000 sx126x_SetPayload
     /tmp/cciXydud.s:1604   .text.PrepareBuffer:00000000 $t
     /tmp/cciXydud.s:1609   .text.PrepareBuffer:00000000 PrepareBuffer
     /tmp/cciXydud.s:1630   .text.sx126x_WriteReg:00000000 $t
     /tmp/cciXydud.s:1635   .text.sx126x_WriteReg:00000000 sx126x_WriteReg
     /tmp/cciXydud.s:1719   .text.sx126x_WriteReg:00000068 $d
     /tmp/cciXydud.s:1724   .text.sx126x_SetTxParams:00000000 $t
     /tmp/cciXydud.s:1729   .text.sx126x_SetTxParams:00000000 sx126x_SetTxParams
     /tmp/cciXydud.s:1815   .text.sx126x_SetTxParams:00000054 $d
     /tmp/cciXydud.s:1820   .text.sx126x_SetSyncWord:00000000 $t
     /tmp/cciXydud.s:1825   .text.sx126x_SetSyncWord:00000000 sx126x_SetSyncWord
     /tmp/cciXydud.s:1850   .text.ConfigureGeneralRadio:00000000 $t
     /tmp/cciXydud.s:1855   .text.ConfigureGeneralRadio:00000000 ConfigureGeneralRadio
     /tmp/cciXydud.s:1918   .text.ConfigureGeneralRadio:00000044 $d
     /tmp/cciXydud.s:1923   .text.sx126x_Wakeup:00000000 $t
     /tmp/cciXydud.s:1928   .text.sx126x_Wakeup:00000000 sx126x_Wakeup
     /tmp/cciXydud.s:2005   .text.sx126x_Wakeup:00000060 $d
     /tmp/cciXydud.s:2010   .text.sx126x_Init:00000000 $t
     /tmp/cciXydud.s:2015   .text.sx126x_Init:00000000 sx126x_Init
     /tmp/cciXydud.s:2068   .text.sx126x_Init:00000040 $d
     /tmp/cciXydud.s:2074   .text._Error_Handler:00000000 $t
     /tmp/cciXydud.s:2079   .text._Error_Handler:00000000 _Error_Handler
     /tmp/cciXydud.s:2090   .text.MX_SPI1_Init:00000000 $t
     /tmp/cciXydud.s:2094   .text.MX_SPI1_Init:00000000 MX_SPI1_Init
     /tmp/cciXydud.s:2153   .text.MX_SPI1_Init:0000003c $d
     /tmp/cciXydud.s:2162   .text.SystemClock_Config:00000000 $t
     /tmp/cciXydud.s:2167   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cciXydud.s:2265   .text.SystemClock_Config:00000084 $d
     /tmp/cciXydud.s:2273   .text.main:00000000 $t
     /tmp/cciXydud.s:2278   .text.main:00000000 main
     /tmp/cciXydud.s:2348   .text.main:00000050 $d
                            *COM*:0000003c radioConfiguration
     /tmp/cciXydud.s:2447   .bss.slaveCanListen:00000000 slaveCanListen
     /tmp/cciXydud.s:2463   .data.masterCanSend:00000000 masterCanSend
     /tmp/cciXydud.s:2469   .data.isMaster:00000000 isMaster
     /tmp/cciXydud.s:2431   .bss.SnrValue:00000000 SnrValue
     /tmp/cciXydud.s:2385   .bss.RssiValue:00000000 RssiValue
                            *COM*:00000020 Buffer
     /tmp/cciXydud.s:2426   .data.BufferSize:00000000 BufferSize
     /tmp/cciXydud.s:2411   .data.messageToSend:00000000 messageToSend
     /tmp/cciXydud.s:2392   .data.messageToReceive:00000000 messageToReceive
     /tmp/cciXydud.s:2418   .rodata.PongMsg:00000000 PongMsg
     /tmp/cciXydud.s:2454   .rodata.PingMsg:00000000 PingMsg
     /tmp/cciXydud.s:2437   .bss.radioFlags:00000000 radioFlags
     /tmp/cciXydud.s:2404   .bss.State:00000000 State
ARM GAS  /tmp/cciXydud.s 			page 76


     /tmp/cciXydud.s:2371   .rodata:00000000 $d
     /tmp/cciXydud.s:2386   .bss.RssiValue:00000000 $d
     /tmp/cciXydud.s:2388   .data.messageToReceive:00000000 $d
     /tmp/cciXydud.s:2398   .bss.ImageCalibrated:00000000 ImageCalibrated
     /tmp/cciXydud.s:2399   .bss.ImageCalibrated:00000000 $d
     /tmp/cciXydud.s:2405   .bss.State:00000000 $d
     /tmp/cciXydud.s:2407   .data.messageToSend:00000000 $d
     /tmp/cciXydud.s:2414   .rodata.PongMsg:00000000 $d
     /tmp/cciXydud.s:2432   .bss.SnrValue:00000000 $d
     /tmp/cciXydud.s:2434   .bss.radioFlags:00000000 $d
     /tmp/cciXydud.s:2440   .rodata.str1.4:00000000 $d
     /tmp/cciXydud.s:2448   .bss.slaveCanListen:00000000 $d
     /tmp/cciXydud.s:2450   .rodata.PingMsg:00000000 $d
                     .debug_frame:00000010 $d
     /tmp/cciXydud.s:988    .text.sx126x_SetRfFrequency:00000054 $t
     /tmp/cciXydud.s:1213   .text.sx126x_SetModulationParams:0000010c $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_Delay
HAL_GPIO_ReadPin
HAL_SPI_Transmit
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_dmul
memcpy
HAL_SPI_Init
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
